<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSHARP内存管理</title>
      <link href="/2024/09/16/CSharp%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/2024/09/16/CSharp%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="在c-应用的背后">在C#应用的背后…</h1><blockquote><p>C#是微软推出的一种基于.NET框架和后来的.NET的、面向对象的高级编程语言。C#衍伸自C和C++，继承了C和C++的强大功能，同时去掉了一些复杂特性，使其成为C语言家族中高效强大的编程语言。C#以.NET框架类库作为基础，拥有类似Visual Basic的快速开发能力。微软在2000年发布了这种语言，希望借助这种语言来取代Java。</p></blockquote><p><img src="https://celestialsys.com/wp-content/uploads/2020/02/NET-LANGUAGES.png" alt></p><p>.NET 框架中有一些但看缩写非常类似的概念，例如：CLI/CIL/CLR/CTS/CLS/JIT/GC等等。</p><p>在<strong>通用语言基础架构</strong> (Common Language Infrastructure) 中，C# 在构建时会被编译为 <strong>CIL</strong> (Common Intermediate Language)，即<strong>通用中间语言</strong>（在一些地方也被称为<strong>字节码</strong>/ByteCode）。在.Net开发平台下，所有语言（C#、<a href="http://VB.NET">VB.NET</a>、J#、C++/CLI）都会被编译为通用中间语言，再由 <strong>CLR</strong> (Common Language Runtime)，即<strong>通用语言运行时</strong>负责运行。</p><p>在 CLR 中，CLR 通过 <strong>JIT</strong> (Just In - Time Compiler)，即<strong>即时编译器</strong>在运行时将中间语言转换成存储在内存中的<strong>机器码</strong>（native code），因为转换是在程序执行的过程中逐渐进行而不是一次性完成的因此被称为“即时”。由于机器码被存储，因此不需要多次转换。</p><p>CLR 还包含了<strong>公共语言规范</strong> (CLS，负责将各种 .NET 编程语言语法规则和规定转换为 CLR 可理解的格式)、<strong>通用类型系统</strong>（CTS，负责理解 .NET 编程语言的数据类型并将其转换为 CLR 可理解的格式，即值类型和引用类型）和<strong>垃圾收集</strong>（GC，提供自动内存管理功能）。</p><h1 id="c-的内存是什么样的">C#的内存是什么样的</h1><h2 id="内存分区">内存分区</h2><p>在C#中，内存分成5个区，他们分别是：</p><ul><li><strong>堆</strong><br>用于动态分配内存，<strong>存放引用类型</strong>对象本身。在 C# 中由 .NET 平台的垃圾回收机制（GC）管理，容量大但分配和释放速度相对较慢。栈、堆都属于动态存储区，可以实现动态分配。</li><li><strong>栈</strong><br>由编译器自动分配释放，通常容量较小，速度快。存放：<ul><li><strong>值类型</strong>的<strong>对象本身</strong></li><li>引用类型的<strong>引用地址</strong>（指针）</li><li>静态区对象的<strong>引用地址</strong>（指针）</li><li>常量区对象的<strong>引用地址</strong>（指针）等。</li></ul></li><li><strong>全局/静态存储区</strong><br>用于存储静态成员（静态变量和静态方法）、静态类、全局变量等，它们在整个程序生命周期中一直存在，直到程序运行结束时才会被释放和回收。</li><li><strong>常量存储区</strong><br>存储程序中的常量值的对象本身，通常是<strong>只读</strong>的，编译时已确定，存储在程序的数据段中。</li><li><strong>代码段</strong><br>用于存储存放编译后的程序指令，通常是只读的，在程序运行时被执行。</li></ul><blockquote><p><strong>为什么要在内存中对堆(Heap)和栈(Stack)进行区分？</strong><br>将内存划分为堆和栈是为了<strong>更高效地管理内存</strong>，并针对不同类型的数据进行优化处理。</p><ul><li>栈用于存储值类型和函数调用的局部变量，分配<strong>快</strong>但<strong>内存空间有限</strong>。栈的内存分配是<strong>自动且快速</strong>的，基于LIFO（后进先出）结构，分配和释放内存效率高。栈上分配的数据<strong>生命周期短</strong>，作用范围仅限于当前作用域。</li><li>堆用于存储引用类型，适合更大的对象，内存分配更灵活、管理更复杂，访问速度<strong>慢</strong>。能够支持<strong>长生命周期</strong>的数据。在堆上分配的对象需要手动或通过垃圾回收器来释放，避免内存泄漏。</li></ul></blockquote><h2 id="值类型和引用类型">值类型和引用类型</h2><p>C#中有且只存在两种变量类型：<strong>值类型</strong>(value type)和<strong>引用类型</strong>(reference type)，它们都隐式继承自万物之源 System.Object 类（不过几乎所有的引用类型都是直接从 Systerm.Object 继承，而值类型则是继承 Systerm.Object 的子类 Systerm.ValueType 类），区别在于拷贝方式的不同。</p><img src="https://eamonkeane.dev/content/images/2021/02/Frame-1-1.png" width="400/"><ul><li><strong>值类型</strong><ul><li>包含了常见的简单类型（如int、double、float、char、bool）、结构体 struct 和枚举 enum。</li><li>拷贝的是值本身（深拷贝）</li><li>不可以被派生，不支持多态。</li><li>大小最好不要超过64字节（可能与 CPU 缓存行通常是 64 字节，如果 CPU 缓存行不能装下一个完整的值类型数据可能会有性能问题有关），适合作为存储数据的载体。</li><li><u><strong>通常来说</strong></u>存储在栈上，可以被自动释放，内存管理上高效。为什么说“通常来说”呢？因为如果一个值类型的变量被一个引用类型所封装，那么这个值类型变量也会被存放在<strong>堆</strong>上。</li></ul></li></ul><img src="https://eamonkeane.dev/content/images/2021/02/Frame-2.png" width="400/"><ul><li><strong>引用类型</strong><ul><li>包含了类、接口、string和各种类型的数组。</li><li>拷贝的是值的引用，指向的是同一个地址里的值（浅拷贝）</li><li>可以派生，支持多态。</li><li>大小可以很大，适合定义应用程序的行为。</li><li>存储在堆上，需要GC或手动释放，相对低效。</li></ul></li></ul><h3 id="装箱与拆箱">装箱与拆箱</h3><p>从值类型转换到引用类型的过程就是“<strong>装箱</strong>”，反过来就是“<strong>拆箱</strong>”。相对于简单的赋值而言，装箱和取消装箱过程需要进行大量的计算，因此需要避免频繁发生装箱/拆箱的操作。</p><h4 id="装箱">装箱</h4><p><img src="https://learn.microsoft.com/zh-cn/dotnet/csharp/programming-guide/types/media/boxing-and-unboxing/boxing-operation-i-o-variables.gif" alt="在这里，o在栈中存放的是i在堆中的地址1"></p><p>装箱是将值类型转换为 object 类型或由此值类型实现的任何<strong>接口类型</strong>的过程。常见语言运行时 (CLR) 对值类型进行装箱时，会将值包装在 System.Object 实例中并将其存储在<strong>托管堆</strong>中，装箱是<strong>隐式</strong>的。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> i = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// The following line boxes i.</span></span><br><span class="line"><span class="built_in">object</span> o = i;</span><br></pre></td></tr></table></figure><h4 id="拆箱">拆箱</h4><p><img src="https://learn.microsoft.com/zh-cn/dotnet/csharp/programming-guide/types/media/boxing-and-unboxing/unboxing-conversion-operation.gif" alt></p><p>拆箱将从对象中提取值类型，是从 object 类型到值类型或从接口类型到实现该接口的值类型的<strong>显式转换</strong>。拆箱操作包括：</p><ul><li>检查对象实例，以确保它是给定值类型的装箱值。</li><li>将该值从实例复制到值类型变量中。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> i = <span class="number">123</span>;      <span class="comment">// a value type</span></span><br><span class="line"><span class="built_in">object</span> o = i;     <span class="comment">// boxing</span></span><br><span class="line"><span class="built_in">int</span> j = (<span class="built_in">int</span>)o;   <span class="comment">// unboxing</span></span><br></pre></td></tr></table></figure><p>要在运行时成功拆箱值类型，被取消装箱的项（例如上面代码中的 o ）必须是对一个对象的<strong>引用</strong>，该对象是先前通过装箱该值类型的实例创建的。尝试取消装箱 null 会导致 NullReferenceException。尝试拆箱对不兼容值类型的引用会导致 InvalidCastException。</p><h1 id="托管与非托管">托管与非托管</h1><p>在上文中提到了“<strong>托管堆</strong>”的概念，那么这里的“托管”是什么意思呢？是否还存在“非托管堆”呢？<br>托管堆也被称之为<strong>托管内存</strong>，是被 CLR（公共语言运行时）所托管的内存。存在<strong>非托管内存</strong> (unmanaged memory)的说法，它也被称之为<strong>原生内存</strong> (native memory)。</p><p>在这里我们还要引入<strong>托管资源</strong>和<strong>非托管资源</strong>的概念。</p><ul><li>托管资源<br>这是指托管堆上分配的内存资源，由 CLR 在适当的时候调用 GC 进行回收。比如我们对类或者委托等引用类型使用 new 关键字，那么创建的对象就被分配在托管内存中。</li><li>非托管资源<br>指的是 CLR 不知道如何回收的内存资源。最常见的一类非托管资源如文件、窗口、网络连接、数据库连接、笔刷、图标等。对非托管资源需要编写代码手动回收（如实现 IDisposable 接口），因此不会产生 GC。</li></ul><h1 id="垃圾回收-gc-garbage-collection">垃圾回收/GC(Garbage Collection)</h1><p>在前文中我们反复提到了 GC 的概念，这究竟是什么呢？</p><blockquote><p>在计算机科学中，垃圾回收（英语：Garbage Collection，缩写为GC）是指一种自动的存储器管理机制。当某个程序占用的一部分内存空间不再被这个程序访问时，这个程序会借助垃圾回收算法向操作系统归还这部分内存空间。垃圾回收器可以减轻程序员的负担，也减少程序中的错误。</p></blockquote><p>C# 中堆区内存由 GC 负责清理，当对象超出作用域范围或者对象失去指向的引用地址，就会在一定时间内进行统一的处理，无需程序员手动处理。为什么要使用GC呢？也可以说是为什么要使用内存自动管理？有下面的几个原因：</p><ol><li>提高了软件开发的抽象度；</li><li>程序员可以将精力集中在实际的问题上而不用分心来管理内存的问题；</li><li>可以使模块的接口更加的清晰，减小模块间的偶合；</li><li>大大减少了内存人为管理不当所带来的Bug；</li><li>使内存管理更加高效。</li></ol><p>关于GC，知乎的这篇文章写的很好：<a href="https://zhuanlan.zhihu.com/p/38799766">https://zhuanlan.zhihu.com/p/38799766</a></p><h1 id="参考资料">参考资料</h1><p><a href="https://www.youtube.com/watch?v=RM5N_p28d8c&amp;list=PLs0ItJ2M3S9oebJ4hx6Vk32grry0XSHf8">https://www.youtube.com/watch?v=RM5N_p28d8c&amp;list=PLs0ItJ2M3S9oebJ4hx6Vk32grry0XSHf8</a><br><a href="https://celestialsys.com/blogs/an-introduction-to-net-framework/">https://celestialsys.com/blogs/an-introduction-to-net-framework/</a><br><a href="https://zhuanlan.zhihu.com/p/113513147">https://zhuanlan.zhihu.com/p/113513147</a><br><a href="https://blog.yusong.me/dotnet/memory#%E6%95%B0%E6%8D%AE%E4%B8%8E%E5%9C%B0%E5%9D%80">https://blog.yusong.me/dotnet/memory#数据与地址</a><br><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/programming-guide/types/boxing-and-unboxing">https://learn.microsoft.com/zh-cn/dotnet/csharp/programming-guide/types/boxing-and-unboxing</a><br><a href="https://www.bilibili.com/video/BV1oq4y1H7wz/">https://www.bilibili.com/video/BV1oq4y1H7wz/</a><br>有关于结构体实现接口：<a href="https://blog.csdn.net/snakorse/article/details/28889611">https://blog.csdn.net/snakorse/article/details/28889611</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 游戏开发/通用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECS设计模式</title>
      <link href="/2024/08/09/ECS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/08/09/ECS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://miro.medium.com/v2/resize:fit:795/1*u4_kgaIkyGWY5r0ijLazeQ.png" alt></p><h1 id="什么是ecs？为什么我们需要它？">什么是ECS？为什么我们需要它？</h1><p>在传统游戏开发中，开发者习惯于将每个功能写成一个class，例如玩家控制器（PlayerController）。在这个脚本中不但包含了玩家自身的<strong>数据</strong>（data，例如速度、血量等），还包含了针对这些数据的处理<strong>逻辑</strong>（behavior）。</p><p>有时作为开发者，我们需要在极短时间完成原型发开来验证玩法的可行性（或者我们只是打了个game jam），一些能够被重复利用的“轮子”是相当重要的。我们前面所提到的每个功能一个 class 的做法其实很不适合拓展，因为数据和行为是耦合的，不便于修改。</p><p>有没有更好的设计模式呢？接下来让我们隆重推出本文的主角——<strong>ECS设计模式</strong>！本文将参照轻量级 ECS 解决方案 <strong>Entitas</strong> 对该设计模式从源码层面进行介绍。首先，什么是<em>ECS</em> ？ECS 即 <strong>Entity-Component-System</strong>，指“<strong>实体-组件-系统</strong>”设计模式，是一种有别于传统 <strong>OOP</strong>（面向对象）类型的设计模式，它是 <strong>DOP</strong>（面向数据）的。</p><ul><li><strong>E</strong>ntity/实体<br>实体类似于 GameObject，可以简单理解为“游戏对象”。</li><li><strong>C</strong>omponent/组件<br>组件包含了实体的数据（Data）。组件有且仅有数据，不包含任何逻辑，如：位置组件（记录位置信息）、运动组件（记录速度/加速度等）等等。</li><li><strong>S</strong>ystem/系统<br>系统包含了游戏逻辑，比如运动系统负责计算速度变化等等。</li></ul><p>同时，为了便于管理，Entitas中有以下概念：</p><ul><li>Context/上下文环境<br>上下文环境包含了所有实体，开发者可以往其中添加/移除实体。同时，Context 还存储了一些全局状态（例如关卡进度、唯一玩家等等）。</li><li>Group/组<br>组可以视为 context 的子集，如果说 context 是一个数据库，group 就是通过 SELECT 从 context 中筛选出的特定类型的实体。我们可以把一类对象归为一个组（例如玩家组、子弹组），这有助于提高查询速度。</li></ul><p>ECS 把数据和逻辑解耦，各个实体上的组件中只保留了数据。逻辑运算由一个系统负责，在特定的时间点对每个它旗下的所有组件执行，那么理所当然的，每个实体上的组件里的数据不同，逻辑运算后的结果也就不同了。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+-----------------+                                            +------------+</span><br><span class="line">|<span class="string">     Context     </span>|<span class="string">                                            </span>|<span class="string"> ComponentA </span>|</span><br><span class="line">|<span class="string">-----------------</span>|<span class="string">                                            </span>|<span class="string">------------</span>|</span><br><span class="line">|<span class="string">    e       e    </span>|<span class="string">      +------------+                        </span>|<span class="string">    Data    </span>|</span><br><span class="line">|<span class="string">       e      e--</span>|<span class="string">----&gt; </span>|<span class="string">   Entity   </span>|<span class="string">                        +------------+          </span></span><br><span class="line"><span class="string"></span>|<span class="string">  e        e     </span>|<span class="string">      </span>|<span class="string">------------</span>|<span class="string">                               ^</span></span><br><span class="line"><span class="string"></span>|<span class="string">     e  e     e  </span>|<span class="string">      </span>|<span class="string"> ComponentA </span>|<span class="string">                               </span>|</span><br><span class="line">|<span class="string"> e          e    </span>|<span class="string">      </span>|<span class="string">            </span>|<span class="string">      +------------+      +---------+       +------------+</span></span><br><span class="line"><span class="string"></span>|<span class="string">    e     e      </span>|<span class="string">      </span>|<span class="string"> ComponentB-</span>|<span class="string">----&gt; </span>|<span class="string"> ComponentA </span>|<span class="string">&lt;---- </span>|<span class="string"> ASystem </span>|<span class="string"> ----&gt; </span>|<span class="string"> ComponentA </span>|</span><br><span class="line">|<span class="string">  e    e    e    </span>|<span class="string">      </span>|<span class="string">            </span>|<span class="string">      </span>|<span class="string">------------</span>|<span class="string">      +---------+       </span>|<span class="string">------------</span>|</span><br><span class="line">|<span class="string">    e    e     e </span>|<span class="string">      </span>|<span class="string"> ComponentC </span>|<span class="string">      </span>|<span class="string">    Data    </span>|<span class="string">   calculate behavior   </span>|<span class="string">    Data    </span>|</span><br><span class="line">+-----------------+      +------------+      +------------+                        +------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>区分后，代码的可读性和可维护性上得到了提升，这样一来我们可以为每个系统编写各类行为（函数）的轮子，提升开发效率了。当然，ECS的优点并不只有这么些，它真正的优点是：当面对<strong>大量游戏对象</strong>（例如1000个）时，采用ECS架构比传统的架构开销更小。为什么？</p><h2 id="针对大量游戏对象的优化">针对大量游戏对象的优化</h2><p><img src="https://cdn.mos.cms.futurecdn.net/mz2NU5EYiqXGEKzm9ejTF.jpg" alt></p><p>在RTS等类型的一些游戏中，场景内有时会同时存在大量的游戏对象。如果我们为每个游戏对象的prefab都添加了脚本Enemy，假设我们需要在脚本的 Update 函数中更新游戏对象的信息，会发生什么事呢？答案是：游戏的<strong>帧率可能出现严重下滑</strong>，特别是对于处理器性能较差的低端机型来说。</p><p>Unity 生命周期函数是基于类反射实现的，并且这一过程会在运行时不停对所有MonoBehaviour遍历进行。反射在这种情况下允许 Unity 在运行时动态调用对象的特定方法（如 Start、Update 等），而不需要编译时确定。这种方法灵活，但性能上可能稍有影响，因为反射操作通常比直接调用<strong>慢</strong>。这导致当场景中存在 1000 个游戏对象时，执行 1000 次 Update 将严重拖垮游戏帧率。</p><p>而在 ECS 中，我们只需要通过执行一次旋转<strong>系统</strong>中的 Update 函数对所有存在旋转<strong>组件</strong>的<strong>实体</strong>进行更新就可以了，不需要执行 1000 次 Update。ECS 主要的开销集中在查询和提取包含特定组件的实体上，我们可以用 pool（Entitas 中的 group） 的思想来优化这一过程。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">+-----------------+</span><br><span class="line">|<span class="string">     Context     </span>|</span><br><span class="line">|<span class="string">-----------------</span>|</span><br><span class="line">|<span class="string">    e       e    </span>|</span><br><span class="line">|<span class="string">       e      e  </span>|</span><br><span class="line">|<span class="string">  e        e     </span>|</span><br><span class="line">|<span class="string">     e  e     e  </span>|</span><br><span class="line">|<span class="string"> e          e    </span>|</span><br><span class="line">|<span class="string">    e     e      </span>|</span><br><span class="line">|<span class="string">  e    e    e    </span>|</span><br><span class="line">|<span class="string">    e    e     e </span>|</span><br><span class="line">+-----------------+</span><br><span class="line">  |<span class="string"></span></span><br><span class="line"><span class="string">  </span>|<span class="string">     +-------------+  Groups:</span></span><br><span class="line"><span class="string">  </span>|<span class="string">     </span>|<span class="string">      e      </span>|<span class="string">  Subsets of entities in the context</span></span><br><span class="line"><span class="string">  </span>|<span class="string">     </span>|<span class="string">   e     e   </span>|<span class="string">  for blazing fast querying</span></span><br><span class="line"><span class="string">  +---&gt; </span>|<span class="string">        +------------+</span></span><br><span class="line"><span class="string">        </span>|<span class="string">     e  </span>|<span class="string">    </span>|<span class="string">       </span>|</span><br><span class="line">        |<span class="string">  e     </span>|<span class="string"> e  </span>|<span class="string">  e    </span>|</span><br><span class="line">        +--------|<span class="string">----+    e  </span>|</span><br><span class="line">                 |<span class="string">     e      </span>|</span><br><span class="line">                 |<span class="string">  e     e   </span>|</span><br><span class="line">                 +------------+</span><br></pre></td></tr></table></figure><blockquote><p><strong>生命周期函数居然是基于反射实现的？</strong><br>Uniy 引擎整体是架设在 mono IDE 基础上的，支持通过 string 来查找方法，且和真正的反射一样是能够查找调用<strong>私有方法</strong>，当找到这些方法后会存下函数指针待之后使用。在 Unity 内部存在一张表，这张表的形成是通过在场景中查找全部 MonoBehaviour 类型脚本然后遍历里面的方法，将需要的调用的方法全部记录下来然后再进行调用，防止那些不需要调用的 MonoBehaviour 中的方法占用空间，节省资源开耗。</p></blockquote><blockquote><p><strong>为什么不采用多态？</strong><br>反射实际上是开销非常大的调用方式，比虚方法来说要高得多。Unity 使用这种事件机制的根本原因是出于对灵活性的考虑，因为并非所有的 MonoBehaviour 都需要 Update（或 Start，Awake 等等）。Unity 会维护一个需要 Update 的 Behaviour 列表，藉此避免进行空的虚函数调用，提高性能。Unity 采用组件式设计，触发一个事件，需要通知到相应 gameobject 的所有组件。如果使用多态来实现，则必须假设所有组件都派生自包含此事件的基类，或者筛选出派生自此基类的组件逐一通知。这样一来是麻烦，二来则容易带来复杂的继承关系，与组件式这种倡导用聚合代替继承的设计从理念上就是相悖的。</p></blockquote><h2 id="在ecs中实现事件系统">在ECS中实现事件系统</h2><p>为了严格贯彻 ECS 思想，我们需要分离数据和行为，因此我们无法采取传统的组件思想。</p><h3 id="如果我们直接遍历所有实体">如果我们直接遍历所有实体</h3><p>如何在 ECS 中触发事件呢？例如，当一个游戏对象的 y 值超出游戏可视边界（屏幕）的 y 值时，我们希望该对象被销毁，此时应该怎么办？或许我们可以直接在 system 中遍历某类 group 下的所有实体并进行检查。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span>&#123;</span><br><span class="line">  Execute();  <span class="comment">// 执行逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Execute</span>()</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> edgePos = pool.edgeEntity.position;   <span class="comment">// 获取边缘位置</span></span><br><span class="line">  <span class="keyword">foreach</span>(<span class="keyword">var</span> entity <span class="keyword">in</span> positionGroup.GetEntities())&#123; <span class="comment">// 对所有具有位置组件的实体</span></span><br><span class="line">    <span class="keyword">if</span>(entity.position.y &gt;= edgePos.y)&#123;  <span class="comment">//超出边界</span></span><br><span class="line">      entity.isDestory = <span class="literal">true</span>;  <span class="comment">// 销毁</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设存在一个针对子弹的系统 BullteSystem，在执行过程中会不断遍历所有存活的子弹 group，那么我们可以在 update 中对每个子弹的位置和每个敌人的位置进行判断，如果子弹的位置与敌人重合（举个例子）则认为子弹击中敌人。这样想想，如果不采取四叉树/八叉树缩小检索范围，开销还是很大的。</p><h3 id="如果我们专门为事件拟定一个系统">如果我们专门为事件拟定一个系统</h3><p>假设我们不愿意逐帧判断，而是仅在某些变化发生的时候对事件进行响应呢？这便是 ReactiveSystem（响应系统），它会对 context 的变化（例如全局状态上的改变）做出反应，而不是类似于一般系统那样在 Update 中逐帧执行。</p><p>举个例子，当玩家到达出口的位置时，当前关卡 + 1的实现逻辑如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触发器，用于标记玩家和玩家的位置组件</span></span><br><span class="line">TriggerOnEvent IReactiveSystem.trigger&#123;</span><br><span class="line">  <span class="keyword">get</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Matcher.AllOf(Matcher.Player, Matcher.Position).OnEntityAdded();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当玩家位置改变时，遍历所有 exitGroup 中出口的位置进行检查</span></span><br><span class="line"><span class="keyword">void</span> IReactiveExecuteSystem.Excute(List&lt;Entity&gt; entities)&#123;</span><br><span class="line">  <span class="keyword">var</span> playerPos = context.playerEntity.position;</span><br><span class="line">  <span class="keyword">foreach</span>(<span class="keyword">var</span> exit <span class="keyword">in</span> exitGroup.GetEntities())&#123;</span><br><span class="line">    <span class="keyword">if</span>(playerPos.Equals(exit.position))&#123;</span><br><span class="line">      <span class="built_in">int</span> curLevel = context.level.level;</span><br><span class="line">      context.ReplaceLevel(curLevel + <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="entitas源码学习">Entitas源码学习</h1><h2 id="核心模块">核心模块</h2><p>在Entitas源码的核心组成中，我们可以找到以下八个模块：</p><ol><li><strong>Collector</strong><br>Collector可以根据特定的组事件（groupEvent）观察并收集同一个上下文环境中一个或多个组的变化实体，用于实现ECS的事件系统。<br>上文中提到的TriggerOnEvent就归属于Collector模块。</li><li><strong>Context</strong><br>上下文环境，在一些关于Entitas的早期文档中被称为池子（pool），管理实体和组的生命周期。<br>可以创建和销毁实体，并获取实体组。<br>创建上下文的首选方法是使用代码生成器（code generator，我会在下文介绍）生成的方法，例如 var context = new GameContext()；</li><li><strong>Entity</strong><br>实体，即游戏对象。程序员可以通过 context.CreateEntity / entity.Destory 的方式创建 / 销毁实体。用户可以增加/替换/移除实体上的组件。</li><li><strong>EntityIndex</strong><br>为实体创建一个基于键值对的索引，目的是加速实体查询。它将实体与某个键（如组件中的某个值）关联起来，允许通过键快速找到相关实体集。EntityIndex 支持单个键或多个键的映射，并提供增删实体的操作。这对于大规模实体管理场景下的高效查询非常有用，特别是在需要频繁根据某个属性查找实体时。<ul><li>为实体建立索引。</li><li>提供高效的查找机制。</li><li>实体的增删操作自动更新索引。</li></ul></li><li><strong>Extentions</strong><br>工具类，包含移除字符串后缀（用于异常）和单一实体收集器。</li><li><strong>Group</strong><br>使用 context.GetGroup(matcher) 获取与指定匹配器匹配的实体组。使用相同的匹配器调用 context.GetGroup(matcher) 将始终返回相同的组实例。<br>创建的组由上下文管理，并且始终是最新的。<br>它会自动添加与匹配器匹配的实体，或者在实体不再与匹配器匹配时立即将其删除。</li><li><strong>Matcher</strong><br>匹配器，用于匹配实体组件的工具，它的作用是通过<strong>组件索引</strong>匹配实体，来判断某个实体是否具备特定条件。它的主要功能包括：<ul><li>AllOf: 匹配具有指定所有组件的实体。</li><li>AnyOf: 匹配具有指定任意组件的实体。</li><li>NoneOf: 匹配不具备指定组件的实体。</li></ul></li><li><strong>Systems</strong><br>系统模块为系统分组提供了一种便捷的方式。<br>开发者可以添加 IInitializeSystem、IExecuteSystem、ICleanupSystem、ITearDownSystem、ReactiveSystem 和其他嵌套系统实例，所有系统都将按照开发者添加的顺序进行初始化和执行。</li></ol><h3 id="context">Context</h3><blockquote><p>A context manages the lifecycle of entities and groups.<br>You can create and destroy entities and get groups of entities.<br>The preferred way to create a context is to use the generated methods from the code generator, e.g. var context = new GameContext();<br>上下文管理实体和组的生命周期。<br>您可以创建和销毁实体，并获取实体组。<br>创建上下文的首选方法是使用代码生成器生成的方法，例如 var context = new GameContext()；</p></blockquote><h4 id="context-cs"><strong>Context.cs</strong></h4><ul><li>包含了两类（实体与组）的 4 个事件<ul><li>实体创建</li><li>实体将被销毁</li><li>实体销毁</li><li>组创建</li></ul></li><li>规定了实体的相关设置<ul><li>实体所能搭载的最大组件数量</li><li>管理组件池（这是针对每一种类型的组件而言的 stack 结构的池，用于组件的复用）</li></ul></li><li>管理实体与组<ul><li>维护 context 中的实体、可复用实体（位于对象池中）、被其他对象（如 group、collector、ReactiveSystem）保留的实体数量</li><li>创建实体<ol><li>检查是否存在可复用的实体，如果不存在再创建新实体并根据相关设置进行初始化</li><li>加入 context 维护的实体列表，保留实体。保留/释放是 AERC（自动实体参照计数）的一部分，内部用于防止将保留的实体集中起来。如果手动使用保留，也必须在某些时候手动释放。</li><li>清空缓存（entitiesCache）。这是一个泛型实体数组 TEntity[]，用于居埃苏返回当前 context 中的所有实体。由于数组的特性，每次创建新的实体时需要清空缓存，并在需要的时候重新创建一次。</li><li>增加实体相关事件的委托（组件添加/组件移除/组件替换/释放实体/实体销毁）</li><li>触发实体创建事件，返回实体对象</li></ol></li><li>销毁所有实体<ol><li>获取 context 中的所有实体（TEntity[]）</li><li>逐个 Destroy，最后清空维护的实体表</li><li>如果存在被保留的实体，则返回报错</li></ol></li><li>检查上下文是否包含某个特定实体</li><li>获取所有实体（如果不存在缓存，则将实体表转成 TEntity[] 返回）</li><li>获取所有符合匹配器条件的实体（其实就是返回一个组里的实体）</li><li>获取所有符合匹配器条件的组（采用相同的匹配器返回的组是同一个）</li><li>添加 EntityIndex 名称</li><li>获取 EntityIndex 名称</li><li>重置实体 id 编号（creationIndex）</li><li>清空特定id的组件的组件池</li><li>清空所有组件池</li></ul></li><li>上下文手动创建方法<br>Entitas的作者并不建议我们通过手动方式进行创建，而是建议我们使用代码生成器。如果采用手动方式，我们需要人为</li><li>重置上下文<ul><li>摧毁所有实体</li><li>重置实体 id 编号（creationIndex）</li></ul></li><li>移除所有事件监听</li></ul><h4 id="contextinfo-cs"><strong>ContextInfo.cs</strong></h4><ul><li>包含了上下文的信息，主要用途是提供更好的报错信息。<ol><li>上下文名称 Name</li><li>组件名称数组 ComponentNames</li><li>组件类型数组 ComponentTypes</li></ol></li></ul><h3 id="entity">Entity</h3><blockquote><p>Use context.CreateEntity() to create a new entity and entity.Destroy() to destroy it.<br>You can add, replace and remove IComponent to an entity.<br>使用 context.CreateEntity() 创建新实体，使用 entity.Destroy() 销毁实体。<br>您可以在实体中添加、替换和删除 IComponent。</p></blockquote><h4 id="entity-cs">Entity.cs</h4><ul><li>包含了 5 个事件（组建添加/组件移除/组件替换/实体释放/实体摧毁）</li><li>实体属性<ul><li>实体所能搭载的最大组件数量</li><li>id（是唯一的，在context中创建实体时被设置）</li><li>isEnable（表示实体的生存状态）</li><li>RetainCount / 引用计数（保留此实体的对象数量）</li></ul></li><li>组件方法<ul><li>根据组件 id 添加组件</li><li>根据组件 id 移除组件</li><li>根据组件 id 替换组件</li><li>根据组件 id 获取组件</li><li>获取实体挂载的所有组件</li><li>获取实体挂载的所有组件的 id 组成的数组</li><li>判断是否挂载了对应组件 id 的组件</li><li>判断是否挂载了所有存在于对应一系列（int[]）组件 id 的组件</li><li>判断是否挂载了任意一个存在于对应一系列（int[]）组件 id 的组件</li><li>判断是否挂载了组件（挂在组件是否为空）</li><li>移除所有组件</li><li>根据组件 id 获取对应的组件池中的组件（如果不存在就创建一个）</li></ul></li><li>AERC管理方法<ul><li>保留该实体。一个所有者（owner）只能保留一次同一实体</li><li>释放该实体</li><li>摧毁实体</li></ul></li></ul><h4 id="entityequalitycomparer-cs">EntityEqualityComparer.cs</h4><p>实现了 IEqualityComparer&lt;TEntity&gt; 接口，用于</p><ul><li>比较两个 Entity 对象的相等性。它重写了 Equals 方法来判断两个实体对象是否相等（直接比较引用）</li><li>重写了 GetHashCode 方法返回实体的 ID 作为哈希码</li></ul><h4 id="aerc-automatic-entity-reference-counting">AERC（Automatic Entity Reference Counting）</h4><p>实体模块里最有趣的一个功能是AERC（自动实体引用计数），是一个在内部执行的有助于调试和优化性能的功能。<br>在Entitas框架中，自动实体引用计数（AERC）的作用是跟踪实体的<strong>引用数量</strong>，以防止实体在被使用时被错误回收、在计数为0时将实体返回到对象池中以释放资源。具体而言，引用计数通过 Retain 和 Release 方法来管理：</p><ol><li><strong>Retain</strong>：增加实体的引用计数，表示该实体被某个系统或对象“保留”。</li><li><strong>Release</strong>：减少引用计数，表示系统或对象不再使用该实体。 当引用计数为零时，实体才会被回收到对象池中，从而避免使用中的实体被错误回收。</li></ol><p>AERC 在实现思路上参考了 CG 的引用计数机制，分为 SafeAERC 和 UnsafeAERC 两种实现方式。SafeAERC 额外记录了谁保留了实体，提供更安全的管理，而 UnsafeAERC 只维护计数，不追踪具体的所有者。</p><ul><li><strong>SafeAERC</strong><br>SafeAERC 会检查实体是否已被保留或释放。它比 UnsafeAERC 慢，但可以保留所有者的信息。<br>每个实体在被保留（Retain）或释放（Release）时，SafeAERC 会记录和跟踪拥有它的对象。SafeAERC 通过一个哈希集合_owners 存储了所有保留实体的对象；Retain 方法会检查实体是否已经被当前对象保留，防止重复保留，而 Release 则确保只能由已保留该实体的对象进行释放。</li><li><strong>UnsafeAERC</strong><br>UnsafeAERC 不会检查实体是否已被保留或释放。它比 SafeAERC 快，但会丢失有关所有者的信息。<br>UnsafeAERC 只管理引用计数，Retain 和 Release 操作会简单增加或减少计数，不检查是否已被保留或释放，也不记录哪个对象在保留实体。因此，它更快，但无法追踪所有者。</li></ul><h3 id="system">System</h3><blockquote><p>Systems provide a convenient way to group systems.<br>You can add IInitializeSystem, IExecuteSystem, ICleanupSystem, ITearDownSystem, ReactiveSystem and other nested Systems instances.<br>All systems will be initialized and executed based on the order you added them.<br>系统为系统分组提供了一种便捷的方式。<br>您可以添加 IInitializeSystem、IExecuteSystem、ICleanupSystem、ITearDownSystem、ReactiveSystem 和其他嵌套系统实例。<br>所有系统都将按照您添加的顺序进行初始化和执行。</p></blockquote><h4 id="system-cs">System.cs</h4><p>System.cs 方便管理和执行四种类型的系统，分别是：初始化/执行/清理和终止。</p><ul><li>初始化系统<br>顾名思义，包含一个Initialize方法，可以实现各类“初始化”功能，例如“在上下文中创建一个玩家实体，并为其初始化生命值和位置”</li><li>执行系统</li><li>清理系统</li><li>终止系统</li></ul><p>代码中的每个函数在执行时，会遍历（因此是有序的）特定类型的系统列表，调用相应的初始化、执行、清理或终止操作。</p><ul><li>添加/移除系统到对应列表</li><li>按顺序执行所有特定类型系统的对应方法</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Initialize</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; _initializeSystems.Count; i++)</span><br><span class="line">    _initializeSystems[i].Initialize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>激活所有响应系统（ReactiveSystem）</li><li>停用所有响应系统</li><li>仅清除所有响应系统</li></ul><h4 id="reactivesystem-cs">ReactiveSystem.cs</h4><p>如果根据指定的收集器发生了变化，响应系统就会调用 Execute(entities)，并且只会传入发生变化的实体。<br>常见的用例是对变化做出反应，例如，实体位置发生变化时，会更新相关游戏对象的 gameObject.transform.position。</p><h4 id="parallelsystem-cs">ParallelSystem.cs</h4><p>并行系统使用实体子集调用 Execute(entities)，并将工作量分配给多个线程。<br>在 Entitas 中编写多线程代码时，不要使用 AddXyz() 和 ReplaceXyz() 等生成的方法。</p><h3 id="group">Group</h3><blockquote><p>Use context.GetGroup(matcher) to get a group of entities which match the specified matcher. Calling context.GetGroup(matcher) with the same matcher will always return the same instance of the group.<br>The created group is managed by the context and will always be up to date.<br>It will automatically add entities that match the matcher or remove entities as soon as they don’t match the matcher anymore.<br>使用 context.GetGroup(matcher) 可以获取与指定匹配器匹配的实体组。使用相同的匹配器调用 context.GetGroup(matcher) 将始终返回相同的组实例。<br>创建的组由上下文管理，并且始终是最新的。<br>它将自动添加与匹配器匹配的实体，或在实体不再与匹配器匹配时立即将其删除。</p></blockquote><p>Group 用于管理和跟踪符合特定 Matcher 的实体集合，实现动态管理实体的添加、移除和更新，并通过事件系统触发相关的回调。<br>主要功能和函数：</p><ol><li>事件系统<br>OnEntityAdded、OnEntityRemoved 和 OnEntityUpdated 事件分别在实体被添加、移除或更新时触发，通知订阅者发生的变化。</li><li>构造函数<br>Group(IMatcher<TEntity> matcher)：初始化时使用 matcher 匹配实体。<br>HandleEntity/UpdateEntity</TEntity></li><li>处理实体的添加、移除或更新逻辑，动态管理实体是否应该存在于组中。<br>AddEntity/RemoveEntity</li><li>添加或移除符合条件的实体，并触发相应事件。<br>GetEntities() / GetSingleEntity()：</li></ol><p>返回当前组内所有实体，或返回唯一的实体（如果组内只有一个实体）。</p><h3 id="matcher">Matcher</h3><h4 id="matcher-cs">Matcher.cs</h4><p>Matcher<TEntity> 类主要用于匹配实体的<strong>组件</strong>。它允许定义三个类型的组件条件：AllOf、AnyOf 和 NoneOf。</TEntity></p><p>属性：</p><ul><li>Indexes: 返回合并后的索引数组，使用 ??= 操作符进行初始化。</li><li>AllOfIndexes, AnyOfIndexes, NoneOfIndexes: 返回各自的组件索引。</li><li>构造函数</li><li>匹配方法<ul><li>AnyOf(params int[] indexes): 设置满足条件的任何组件的索引。</li><li>AnyOf(params IMatcher<TEntity>[] matchers): 允许使用其他匹配器的索引。</TEntity></li><li>NoneOf(params int[] indexes): 设置不满足条件的组件的索引。</li><li>NoneOf(params IMatcher<TEntity>[] matchers): 允许使用其他匹配器的索引。</TEntity></li><li>Matches(TEntity entity): 检查一个实体是否满足 AllOf、AnyOf 和 NoneOf 的条件。<br>总结<br>这个类通过提供灵活的组件匹配功能，支持复杂的实体查询和操作。</li></ul></li></ul><h3 id="collector">Collector</h3><blockquote><p>A Collector can observe one or more groups from the same context and collects changed entities based on the specified groupEvent.<br>收集器可观察同一上下文中的一个或多个组，并根据指定的 groupEvent 收集已更改的实体。</p></blockquote><p>作用是收集符合特定条件的<strong>组</strong>，并通过监听组的<strong>变化事件</strong>来进行实体的收集。每个 Collector 会关联一个或多个组和事件类型（如实体添加、移除或添加/移除），从而<strong>在这些事件发生时将实体收集到集合中</strong>。</p><p>主要函数解释：</p><ul><li>构造函数：创建一个 Collector，并根据传入的 Group 和 GroupEvent 来决定如何收集实体。它初始化了内部的集合和事件处理委托 _onEntityDelegate。</li><li>Activate()：激活 Collector，开始监听相关的 GroupEvent，并收集符合条件的实体。</li><li>Deactivate()：停止监听事件，并清空已收集的实体集合。</li><li>ClearCollectedEntities()：释放所有已收集的实体，并清空集合。</li></ul><h1 id="总结">总结</h1><p>总的来说，在游戏开发中的 ECS 设计模式有以下优点：</p><ol><li>性能优化：ECS将数据和逻辑分离，通过缓存友好的内存布局提高CPU缓存利用率，从而优化性能。</li><li>模块化和可扩展性：逻辑通过系统处理，数据通过组件管理，方便不同功能模块独立开发和调试。</li><li>数据驱动：实体仅是ID，组件存储数据，系统执行逻辑，可以轻松增加或移除组件来改变实体行为，灵活处理游戏状态。</li><li>并行处理：系统可独立处理各类组件，利于多线程优化（这指的是通过 Unity ECS 的 JobSystem 来进行多线程并发处理）。</li></ol><h1 id="参考资料">参考资料</h1><p><a href="https://github.com/sschmid/Entitas/wiki/Unity-Tutorial-Hello-World">https://github.com/sschmid/Entitas/wiki/Unity-Tutorial-Hello-World</a><br><a href="https://docs.unity3d.com/Packages/com.unity.entities@0.3/manual/index.html">https://docs.unity3d.com/Packages/com.unity.entities@0.3/manual/index.html</a><br><a href="https://github.com/sschmid/Entitas">https://github.com/sschmid/Entitas</a><br><a href="https://www.youtube.com/watch?v=jQEXETwgPDs">https://www.youtube.com/watch?v=jQEXETwgPDs</a><br><a href="https://www.cnblogs.com/morning-lee/p/7509018.html">https://www.cnblogs.com/morning-lee/p/7509018.html</a><br><a href="https://medium.com/%E9%81%8A%E6%88%B2%E9%96%8B%E7%99%BC%E9%9A%A8%E7%AD%86/unity-ecs-%E8%9C%BB%E8%9C%93%E9%BB%9E%E6%B0%B4-e259ccf02d09">https://medium.com/遊戲開發隨筆/unity-ecs-蜻蜓點水-e259ccf02d09</a><br><a href="https://paakmau.github.io/202002110101/">https://paakmau.github.io/202002110101/</a><br><a href="https://yimicgh.top/%E7%BF%BB%E8%AF%91/ECS-01-Core/">https://yimicgh.top/翻译/ECS-01-Core/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 游戏开发/通用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Portfolio</title>
      <link href="/2024/07/25/Portfolio-EN/"/>
      <url>/2024/07/25/Portfolio-EN/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>In this article, I will list all the works I have participated in or completed, as well as some related work!</p><h1 id="game-projects">Game Projects</h1><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2020">2020</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="2020-net-ease-high-school-minigame-competition-前世今生狩猎小队"><strong>2020 Net-Ease High School MiniGame Competition - 前世今生狩猎小队</strong></h3></div></div><div class="timeline-item-content"><div class="videos" col="2"><div class="video"><video controls preload><source src="https://academy.fp.ps.netease.com/file/5f97ef376f0494067ef191129iWlEcks02" type="video/mp4">Your browser does not support the video tag.</video></div></div><p><mark class="hl-label green">Art</mark><br><strong>Introduction</strong>：In <em>前世今生狩猎小队</em>, players take on the role of hunters hunting a giant monster. Each time a hunter dies, a new clone is created to replicate the player’s previous actions. After multiple deaths, a squad is formed, working together to finally defeat the monster.<br><strong>Main Work</strong>：This was my first game project, where I was responsible for creating game scenes, items, and other materials.</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="west-2-online-third-round-assessment-big-watermelon"><strong>West 2 Online Third Round Assessment - Big watermelon</strong></h3></div></div><div class="timeline-item-content"><p><mark class="hl-label green">Full-Stack</mark><br><a href="https://cattyhouse-guiny.xyz/2021/01/30/%E7%94%A8unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C/">Link to my previous post</a><br><strong>Introduction</strong>：This project was my work for the third round assessment of the Unity direction in the “West2Online Studio” computer-related club during my undergraduate studies. The assessment required completing a mini-game remake within a month, and I chose the popular mini-game “Big Watermelon.”<br><strong>Main Job</strong>：This was my first game project as a full stack developer, through which I became familiar with the basic functions of the Unity game engine.</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="west2online-fourth-round-assessment-arknights-remake"><strong>West2Online Fourth Round Assessment - Arknights Remake</strong></h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/25/Portfolio-EN/image.png" alt><br><mark class="hl-label green">Full-Stack</mark><br><a href="https://cattyhouse-guiny.xyz/2021/04/03/%E7%94%A8unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F/">Link to my previous post</a></p><p><strong>Introduction</strong>: This project was my work for the fourth round assessment of the Unity direction in the “West2Online Studio” computer-related club during my undergraduate studies. The task was to complete a remake of the tower defense gameplay of the mobile game “Arknights” within a month.<br><strong>Main Work</strong>：This was my second game project as a full stack developer, where I learned and used skeletal animation, A* pathfinding algorithm, UGUI, object pooling, and other functions.<br><strong>Source Code</strong>：<a href="https://github.com/Guiny-Time/Arknights">https://github.com/Guiny-Time/Arknights</a></p></div></div></div><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2021">2021</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="west2online-fifth-round-assessment-幽港疑云"><strong>West2Online Fifth Round Assessment - 幽港疑云</strong></h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/25/Portfolio-EN/%E5%B9%BD%E6%B8%AF%E7%96%91%E4%BA%91.jpg" alt><br><mark class="hl-label green">Art</mark> <mark class="hl-label green">UIUX</mark> <mark class="hl-label green">Programmer</mark><br><strong>Introduction</strong>: <em>幽港疑云</em> is a 2D narrative puzzle game developed with team members during the fifth round assessment of the Unity direction in the “West2Online Studio” computer-related club during my undergraduate studies.<br><strong>Main Work</strong>: In this project, my work included:</p><ul><li>Programming: I implemented a stack-based UI panel stacking system and related UI functions, and learned about the TextMeshPro component.</li><li>Art: Responsible for drawing all art assets, creating character skeletal animations, and using Unity URP’s 2D lighting assets to enhance the visual effects of the game.</li><li>Version Control: We used git + Github for version control and remote repository, and I learned version control-related skills.</li></ul><p><strong>Source Code</strong>:<a href="https://github.com/ludens-studio/ProjectW">https://github.com/ludens-studio/ProjectW</a></p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="2021-net-ease-high-school-minigame-competition-翻转剧场"><strong>2021 Net-Ease High School MiniGame Competition - 翻转剧场</strong></h3></div></div><div class="timeline-item-content"><div class="videos" col="2"><div class="video"><video controls preload><source src="https://academy.fp.ps.netease.com/file/617917fd2786fd3744134810wQQcdJJz03" type="video/mp4">Your browser does not support the video tag.</video></div></div><p><mark class="hl-label green">UIUX</mark> <mark class="hl-label green">Programmer</mark> <mark class="hl-label green">3DAnimation</mark><br><strong>Introdution</strong>：<em>翻转剧场</em> is a platform jumping puzzle game that tells a story about movies and dreams. This project participated in the 2021 NetEase Games College MINI-GAME Challenge but unfortunately did not make it to the finals.<br><strong>Main Work</strong>： In this project, I was mainly responsible for three aspects of work:</p><ul><li>Programming: I was responsible for the design and implementation of UI-related functions.</li><li>Art Assets: I modeled and rigged the main character using Blender and created the character’s 3D animations. I also designed the game’s UI.</li><li>Version Control: This time we used Unity’s PlasticSCM for version control, and I further learned version control-related skills.</li></ul></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="west2online-sixth-round-assessment-深网防线"><strong>West2Online Sixth Round Assessment - 深网防线</strong></h3></div></div><div class="timeline-item-content"><iframe frameborder="0" src="https://itch.io/embed/1343140" width="552" height="167"><a href="https://guinytime.itch.io/deep-web-defineline">Deep Web Defineline(深网防线) by Guinyの时光</a></iframe><p><mark class="hl-label green">Programmer</mark> <mark class="hl-label green">UIUX</mark> <mark class="hl-label green">VFX</mark><br><strong>Introduction</strong>: <em>深网防线</em> is a 3D tower defense game where players use antivirus tools to build defense towers, enhance their defense network with different upgrade cards, and fight against invading viruses. This project was developed with team members during the sixth round assessment of the Unity direction in the “West2Online Studio” computer-related club during my undergraduate studies.<br><strong>Main Work</strong>：In this project, my work included:</p><ul><li>Programming: Responsible for monster generation logic, UI assembly, and related functions.</li><li>Art: Responsible for the design of scenes, UI/UX.</li><li>Visual Effects: First exposure to engine rendering pipeline, using ShaderGraph to achieve some visual effects, such as the rotating effect of the background display screen in the opening scene.</li></ul></div></div></div><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2022">2022</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="ludum-dare-49-babel-blocks"><strong>Ludum Dare 49 - Babel Blocks</strong></h3></div></div><div class="timeline-item-content"><iframe frameborder="0" src="https://itch.io/embed/1224635" width="552" height="167"><a href="https://guinytime.itch.io/babel-blocks">Babel Blocks(绝地天通) by Guinyの时光</a></iframe><p><mark class="hl-label green">Art</mark> <mark class="hl-label green">Programmer</mark> <mark class="hl-label green">UIUX</mark><br><strong>Introduction</strong>: <em>Babel Blocks</em> is a mini-game about building and destruction. Players need to build their skyscraper by purchasing bricks and strive to protect their world in the face of relentless nature. This project participated in the 49th Ludum Dare extreme game development competition and achieved a total ranking of 1413 / 2500.<br><strong>Main Work</strong>：This was my first time participating in a jam-type extreme game development activity, and the 72-hour development time was a big challenge for me. After spending nearly a day determining the gameplay and division of labor, my work mainly focused on the following three aspects:</p><ul><li>Programming: Responsible for the implementation of the in-game store logic, UI-related functions, and the bottom broadcast system.</li><li>Art: Responsible for designing and drawing all art assets of the game, including the interface, brick materials, and logo.</li></ul><p><strong>Project Link</strong>：<a href="https://ldjam.com/events/ludum-dare/49/babel-blocks">https://ldjam.com/events/ludum-dare/49/babel-blocks</a></p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="douyin-game-type-video-effects-development-宅家舞蹈秀">Douyin Game-type Video Effects Development - 宅家舞蹈秀</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/25/Portfolio-EN/HomeShow.png" alt><br><mark class="hl-label green">Programmer</mark><br><strong>Introduction</strong>: <em>宅家舞蹈秀</em> is a mini-game type video effect on Douyin, which was produced during my internship in the ByteDance Intelligent Creation Department. This special effect was officially launched on Douyin during the May Day period in 2022 after verification.<br><strong>Main Work</strong>：In the initial exposure to the department’s self-developed engine and Lua programming, I successfully completed the video effect development based on the new algorithm model within two weeks, using the audio, sequence frame animation, UI framework, and other functions of the self-developed engine, and learned about the production process of video effects.</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="bytedance-ic-hackthon-2022-linsten-in-the-dark">Bytedance IC Hackthon 2022 - Linsten in the Dark</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/25/Portfolio-EN/listen_in_dark.png" alt><br><mark class="hl-label purple">Technical-Challenge-Award(Nomination)</mark> <mark class="hl-label purple">PicoAudioSDK-Best-User-Award</mark> <mark class="hl-label green">Tester</mark> <mark class="hl-label green">Programmer</mark><br><strong>Introduction</strong>: <em>Listen in the Dark</em> is a VR audio navigation game that blind people can play. This project participated in the 2022 ByteDance Intelligent Creation Department Hackathon competition and was developed within 48 hours. Our team developed a demo with three chapters and an initial tutorial level within two days, and the final work achieved a total score of 27/190, winning the PicoAudioSDK Best User Award and being nominated for the Technical Challenge Award.<br><strong>Main Work</strong>: In this project, as the main programmer, I learned about VR game development based on OpenXR + Pico.<br><strong>Source Code</strong>: <a href="https://github.com/yinhao21/hackathon2022">https://github.com/yinhao21/hackathon2022</a></p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="2022-china-college-computer-competition-wechat-mini-program-application-development-competition-话榕">2022 China College Computer Competition WeChat Mini Program Application Development Competition - 话榕</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/25/Portfolio-EN/%E7%99%BB%E9%99%86%E6%B3%A8%E5%86%8C.png" alt><br><mark class="hl-label purple">South-China-Region-Third-Prize</mark> <mark class="hl-label green">GUI</mark><br><strong>Introduction</strong>: <em>话榕</em> is a work that I and my undergraduate classmates participated in the 2022 China College Computer Competition WeChat Mini Program Application Development Competition, and the project finally won the third prize in the South China region.<br><strong>Main Work</strong>: In this project, I was responsible for completing the GUI design work of the mini program online with team members through Figma, learning and understanding the production process of application wireframes and prototypes, and strengthening the interaction design knowledge I had learned.</p></div></div></div><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2023">2023</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="undergraduate-fyp-starway">Undergraduate FYP - StarWay</h3></div></div><div class="timeline-item-content"><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=655699853&bvid=BV1La4y1G7RM&cid=1115071247&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><p><mark class="hl-label purple">College-Level-Outstanding-FYP</mark> <mark class="hl-label green">Full-Stack</mark><br><strong>Introduction</strong>: <em>Star Way</em> is a puzzle game project that I independently developed as my undergraduate FYP. I wrote my undergraduate essay based on this project and won the 2023 Fuzhou University College-Level Outstanding FYP.<br><strong>Main Work</strong>：</p><ul><li>Programming: Fully responsible for the entire development and version control of the game, using pathfinding algorithms, behavior trees, object pooling, and other algorithms for development, and achieving stylized water rendering in the project. During the project development, my computer hard drive broke, but thanks to the habit of using a remote repository, I did not have to start the thesis from scratch.</li><li>Design: Designed the core gameplay and three levels of the game (including the tutorial level).</li><li>Art: Determined the artistic style of the game, designed the game’s UIUX; used MagicVoxel for character modeling and animation production.</li></ul><p><strong>Source Code</strong>：<a href="https://github.com/Guiny-Time/StarWay">https://github.com/Guiny-Time/StarWay</a></p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="3rd-game-for-good-game-jam-hold-on">3rd Game for Good Game Jam - Hold On！</h3></div></div><div class="timeline-item-content"><iframe frameborder="0" src="https://itch.io/embed/2238172" width="552" height="167"><a href="https://guinytime.itch.io/hold-on-h5ver">Hold on- h5 version by Guinyの时光</a></iframe><p><mark class="hl-label purple">Public-Welfare-Certificate</mark> <mark class="hl-label green">Programmer</mark><br><strong>Introduction</strong>: <em>Hold On!</em> is a local two-player cooperative disaster rescue 3D game where players play as rescuers, rescuing patients with different injuries at the disaster site. This project participated in the third Game for Good Game Jam and won a public welfare certificate (top ten).<br><strong>Main Work</strong>:</p><ul><li>Programming: In this project, I was mainly responsible for constructing the level logic. The project used the Feel framework to achieve many effects, and I was responsible for managing them in the program.</li></ul></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="gcores-booom-game-jam-信徒">Gcores BOOOM Game Jam - 信徒</h3></div></div><div class="timeline-item-content"><iframe frameborder="0" src="https://itch.io/embed/2308752" width="552" height="167"><a href="https://guinytime.itch.io/believer">信徒 by Guinyの时光</a></iframe><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=747222751&bvid=BV1zC4y1G7Hg&cid=1298893261&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><p><mark class="hl-label green">Programmer</mark><br><strong>Introduction</strong>: <em>信徒</em> is a Cthulhu-style tower defense strategy game where players generate friendly units by rolling dice to kill invading enemies. This project participated in the 2023 Gcores BOOOM Game Jam.<br><strong>Main Work</strong>: In this project, as the only programmer, I completed all the programming-related work and version management of the project.</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="game-design-course-final-project-ape-evolution">Game Design Course Final Project - Ape Evolution</h3></div></div><div class="timeline-item-content"><iframe frameborder="0" src="https://itch.io/embed/2455630" width="552" height="167"><a href="https://guinytime.itch.io/ape-evolution">Ape Evolution by Guinyの时光</a></iframe><p><mark class="hl-label green">Full-Stack</mark><br><strong>Introduction</strong>: <em>Ape Evolution</em> is a 2D top-down view ape evolution simulator demo. This project was the final project for the school game design course. I designed 30 different gene types and 4 different natural selection mechanisms, allowing players to select apes on the planet and eventually evolve them into humans under suitable survival pressure.<br><strong>Main Work</strong>: This project was independently developed by me, taking nearly a month. In this project, I used JSON files to store gene types and assigned them to new apes based on heredity/mutation. In addition, I implemented the localization function of the project through configuration tables.<br><strong>Source Code</strong>: <a href="https://github.com/Guiny-Time/ApeEvolution">https://github.com/Guiny-Time/ApeEvolution</a></p></div></div></div><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2024">2024</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="global-game-jam-hongkong-2024-cluckcluck">Global Game Jam HongKong 2024 - CluckCluck</h3></div></div><div class="timeline-item-content"><iframe frameborder="0" src="https://itch.io/embed/2499917" width="552" height="167"><a href="https://guinytime.itch.io/cluckcluck">CluckCluck by Guinyの时光</a></iframe><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=454292809&bvid=BV1A541117LF&cid=1421716595&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><p><mark class="hl-label purple">Best-Competitive-Game-Award</mark> <mark class="hl-label green">Programmer</mark><br><a href="https://cattyhouse-guiny.xyz/2024/02/01/2024ggj%F0%9F%8C%8F%20-%20cluckcluck%E5%A4%8D%E7%9B%98%E2%80%94%E2%80%94%E6%96%B0%E8%BE%93%E5%85%A5%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%89%8B%E6%9F%84%E6%8E%A7%E5%88%B6/">Link to my previous post</a></p><p><strong>Introduction</strong>: <em>CluckCluck</em> is a local same-screen two-player controller competitive 2D game. This project participated in the 2024 Global Game Jam Hong Kong offline 48-hour development event and won the Best Competitive Game Award at GGJ Hong Kong.<br><strong>Main Work</strong>: Using Unity’s new input system combined with gamepads, I achieved the function of playing the game with two gamepads on one computer. This was also my first game using gamepads as input, which made me realize the many possibilities of gamepads.<br><strong>Source Code</strong>: <a href="https://github.com/GGJHK2024/GGJ2024Project">https://github.com/GGJHK2024/GGJ2024Project</a></p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="graduate-fyp-one-last-interview">Graduate FYP - One Last Interview</h3></div></div><div class="timeline-item-content"><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=1656089323&bvid=BV1yE421A76p&cid=1616495693&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><p><mark class="hl-label green">Programmer</mark><br><strong>Introduction</strong>: <em>One Last Interview</em> is a 2D side-scrolling game project, which is my graduate thesis project. I served as the sole programmer in this project. The project has been submitted to the 2024 Tencent Game Creation Competition College Track and indiePlay China 2024.<br><strong>Main Work</strong>: In the first two months of the project, I completed three prototype iterations, and finally, in two months, I used the 2D platform solution Corgi Engine as the core tool to complete all the development work in the demo. Many functions relied on components within the Corgi Engine, but most were modified and extended based on the original components to meet project needs (such as the “parry” function that the Corgi Engine does not have). I also took this opportunity to learn the architectural ideas of commercial engines.<br><strong>Source Code</strong>: <a href="https://github.com/GGJHK2024/ShadowWarrior">https://github.com/GGJHK2024/ShadowWarrior</a></p></div></div></div><h1 id="modules-functions">Modules/Functions</h1><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2022">2022</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="voice-recognition-facial-expression-change-based-on-unity">Voice Recognition + Facial Expression Change Based on Unity</h3></div></div><div class="timeline-item-content"><p><strong>Introduction</strong>: This is a basic demo that uses Unity’s voice recognizer PhraseRecognizer combined with 3D model animation to achieve the function of changing facial expressions based on keywords. Users can configure keywords themselves. In the demo, I used “Good morning,” “Good night,” “a,” “e,” “i,” “o,” and “u.”<br><strong>Main Work</strong>: Created model animations and completed the configuration of PhraseRecognizer.</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="3d-model-clipping-effect-based-on-depth-testing">3D Model Clipping Effect Based on Depth Testing</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/25/Portfolio-EN/aabb.png" alt><br><strong>Introduction</strong>: This was a task I received during my internship at ByteDance. In an app that scans real objects to generate 3D models, users may scan extra parts that need to be clipped and send the clipping data to the server.<br><strong>Main Work</strong>: I was responsible for implementing the model clipping effect, user interaction logic, and cross-end message transmission. I used the AABB bounding box information of the model to draw the clipping box and applied materials, combined with depth testing and other graphics knowledge to achieve the special clipping effect given by the designer, and implemented the chain of listening to client messages and sending clipping information.</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="water-rendering-and-interactive-water-implementation-based-on-unity">Water Rendering and Interactive Water Implementation Based on Unity</h3></div></div><div class="timeline-item-content"><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=562934403&bvid=BV1pv4y127nS&cid=899741090&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=730458751&bvid=BV1bD4y1q7s9&cid=831153018&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=303589905&bvid=BV15P411E7Ub&cid=846825486&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=775558915&bvid=BV1W14y1n7cv&cid=903231810&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><p><strong>Introduction</strong>: These are some rendering exercises I did while learning computer graphics and Unity’s Shader Graph. I tried basic normal disturbance water rendering, stylized water rendering, Gerstner Wave-based water rendering, and interactive water implementation.</p><p><a href="https://cattyhouse-guiny.xyz/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/">Link to my previous post</a><br><a href="https://cattyhouse-guiny.xyz/2022/09/29/%E5%9F%BA%E4%BA%8Egerstner%20wave%E7%AE%97%E6%B3%95%E7%9A%84%E6%B5%B7%E6%B4%8B%E5%AE%9E%E7%8E%B0/">Link to my previous post</a></p></div></div></div><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2023">2023</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="desktop-audio-application-based-on-unity">Desktop Audio Application Based on Unity</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/25/Portfolio-EN/audio.png" alt><br><strong>Introduction</strong>: This is a desktop application based on Unity that supports audio response and click-through. The audio response line drawing part is implemented using the LineRenderer component, and the click-through is achieved using Unity’s background running function and the user32.dll file.<br>This project can be used for wallpaper engines.</p></div></div></div><h1 id="others">Others</h1><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2024">2024</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="translation-of-the-shader-bible">Translation of “The Shader Bible”</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/25/Portfolio-EN/USB.png" alt></p><p><a href="https://zhuanlan.zhihu.com/p/645676077">[Translation] Unity Shader Bible/Unity Shader Bible Full Book Directory - Article by Geometric Glacier - Zhihu</a></p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="procedural-modeling-attempt-based-on-blender-geometry-nodes">Procedural Modeling Attempt Based on Blender Geometry Nodes</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/25/Portfolio-EN/flower.png" alt><br>This is a verification I did for a course final project. After fine-tuning the node parameters, I successfully obtained various types of flowers.<br>This is the final product↓<br><img src="/2024/07/25/Portfolio-EN/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240721183048.jpg" alt></p></div></div></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>项目作品集汇总</title>
      <link href="/2024/07/20/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E6%B1%87%E6%80%BB/"/>
      <url>/2024/07/20/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在这篇文章里，我会罗列出所有我参与或独立完成的作品，以及一些相关的工作！</p><h1 id="参与制作的正式作品">参与制作的正式作品</h1><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2020">2020</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="2020网易游戏高校mini-game挑战赛-前世今生狩猎小队"><strong>2020网易游戏高校MINI-GAME挑战赛 - 前世今生狩猎小队</strong></h3></div></div><div class="timeline-item-content"><div class="videos" col="2"><div class="video"><video controls preload><source src="https://academy.fp.ps.netease.com/file/5f97ef376f0494067ef191129iWlEcks02" type="video/mp4">Your browser does not support the video tag.</video></div></div><p><mark class="hl-label green">游戏美术</mark><br><strong>项目介绍</strong>：在《前世今生狩猎小队》中，玩家扮演猎人狩猎一个巨型怪物，猎人每次死亡都会制造出一个新的克隆体来复刻玩家生前的操作，死亡多次以后就形成了一个小队，互相配合，最后击败怪物。<br><strong>主要工作</strong>：这是我接触的第一个游戏项目，在本项目中负责<s>给各位大佬端茶倒水</s>游戏场景、道具等素材的绘制。</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="西二在线第三轮考核-合成大西瓜"><strong>西二在线第三轮考核 - 合成大西瓜</strong></h3></div></div><div class="timeline-item-content"><p><mark class="hl-label green">全栈</mark><br><a href="https://cattyhouse-guiny.xyz/2021/01/30/%E7%94%A8unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C/">站内链接</a><br><strong>项目介绍</strong>：该项目是我参加本科计算机相关社团“西二在线工作室（West2Online）”Unity方向第三轮考核时的作品，考核内容为在一个月内完成一个小游戏的复刻，我所选择的是当时的热门小游戏《合成大西瓜》。<br><strong>主要工作</strong>：这是由我作为全栈实现的第一个游戏项目，通过该项目接触并熟悉了Unity游戏引擎的各项基础功能。</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="西二在线第四轮考核-复刻明日方舟"><strong>西二在线第四轮考核 - 复刻明日方舟</strong></h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E6%B1%87%E6%80%BB/image.png" alt><br><mark class="hl-label green">全栈</mark><br><a href="https://cattyhouse-guiny.xyz/2021/04/03/%E7%94%A8unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F/">站内链接</a><br><strong>项目介绍</strong>：该项目是我参加本科计算机相关社团“西二在线工作室”Unity方向第四轮考核时的作品，在一个月内完成手机游戏《明日方舟》的塔防玩法复刻。<br><strong>主要工作</strong>：这是由我作为全栈实现的第二个游戏项目，在该项目中我学习并使用了骨骼动画、A*寻路算法、UGUI、对象池等功能。<br><strong>项目链接</strong>：<a href="https://github.com/Guiny-Time/Arknights">https://github.com/Guiny-Time/Arknights</a></p></div></div></div><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2021">2021</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="西二在线第五轮考核-幽港疑云"><strong>西二在线第五轮考核 - 幽港疑云</strong></h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E6%B1%87%E6%80%BB/%E5%B9%BD%E6%B8%AF%E7%96%91%E4%BA%91.jpg" alt><br><mark class="hl-label green">游戏美术</mark> <mark class="hl-label green">UIUX</mark> <mark class="hl-label green">游戏程序</mark><br><strong>项目介绍</strong>：《幽港疑云》是一款2D剧情向解密游戏，是我参加本科计算机相关社团“西二在线工作室”Unity方向第五轮考核时与组员一同开发的作品。<br><strong>主要工作</strong>：在这个项目中，我的工作包括</p><ul><li>程序方面：我实现了UI面板基于栈的堆叠系统和UI相关的功能、接触并学习了 TextMeshPro 组件相关的功能。</li><li>美术方面：负责所有美术资产的绘制、制作了角色的骨骼动画、并使用Unity URP的2D灯光资产提升游戏画面的视觉效果。</li><li>版本控制：我们采用了git + Github作为版本控制工具和远端仓库，我也学习了版本控制相关的技能。</li></ul><p><strong>项目链接</strong>:<a href="https://github.com/ludens-studio/ProjectW">https://github.com/ludens-studio/ProjectW</a></p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="2021网易游戏高校mini-game挑战赛-翻转剧场"><strong>2021网易游戏高校MINI-GAME挑战赛 - 翻转剧场</strong></h3></div></div><div class="timeline-item-content"><div class="videos" col="2"><div class="video"><video controls preload><source src="https://academy.fp.ps.netease.com/file/617917fd2786fd3744134810wQQcdJJz03" type="video/mp4">Your browser does not support the video tag.</video></div></div><p><mark class="hl-label green">UIUX</mark> <mark class="hl-label green">游戏程序</mark> <mark class="hl-label green">3D动画</mark><br><strong>项目介绍</strong>：《翻转剧场》是一款平台跳跃解密游戏，讲述了一个关于电影和梦想的故事。该项目参加了2021网易游戏高校MINI-GAME挑战赛，可惜并未入选决赛。<br><strong>主要工作</strong>：在这个项目中，我主要负责了三个方面的工作：</p><ul><li>程序方面：我依然负责UI相关功能的设计和实现。</li><li>美术资产方面：我通过Blender为游戏主角进行了建模和骨骼绑定，并以此为基础制作了主角的3D动画。同时，我负责设计了游戏的UI。</li><li>版本控制：这一次我们采用了Unity的PlasticSCM作为版本控制工具，我也更进一步学习了版本控制相关的技能。</li></ul></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="西二在线第六轮考核-深网防线"><strong>西二在线第六轮考核 - 深网防线</strong></h3></div></div><div class="timeline-item-content"><iframe frameborder="0" src="https://itch.io/embed/1343140" width="552" height="167"><a href="https://guinytime.itch.io/deep-web-defineline">Deep Web Defineline(深网防线) by Guinyの时光</a></iframe><p><mark class="hl-label green">游戏程序</mark> <mark class="hl-label green">UIUX</mark> <mark class="hl-label green">视效渲染</mark><br><strong>项目介绍</strong>：《深网防线》是一款3D塔防游戏，玩家将使用杀毒工具筑造而成的防御塔，利用不同的升级卡牌增强你的防御网体系，与入侵的病毒们抗争。该项目是我参加本科计算机相关社团“西二在线工作室”Unity方向第六轮考核时与组员一同开发的作品。<br><strong>主要工作</strong>：在这个项目中，我的工作包括</p><ul><li>程序方面：负责怪物生成相关逻辑、UI组装以及相关功能</li><li>美术方面：负责了场景、UI/UX的设计</li><li>视觉效果：初次接触引擎渲染管线，采用ShaderGraph实现了部分视觉特效，如开场画面背景显示屏的旋转效果。</li></ul></div></div></div><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2022">2022</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="ludum-dare-49-绝地天通"><strong>Ludum Dare 49 - 绝地天通</strong></h3></div></div><div class="timeline-item-content"><iframe frameborder="0" src="https://itch.io/embed/1224635" width="552" height="167"><a href="https://guinytime.itch.io/babel-blocks">Babel Blocks(绝地天通) by Guinyの时光</a></iframe><p><mark class="hl-label green">游戏美术</mark> <mark class="hl-label green">游戏程序</mark> <mark class="hl-label green">UIUX</mark><br><strong>项目介绍</strong>：《绝地天通》是一款关于建造与破坏的迷你游戏。玩家需要通过购买砖块构筑起自己的大厦，争取在无情的大自然面前守护自己的天地。该项目参加了第49届Ludum Dare极限游戏开发大赛，取得了总排名 1413 / 2500 的成绩。<br><strong>主要工作</strong>：这是我第一次参与jam类极限游戏开发活动，只有72小时的开发时间对我来说是一个很大的挑战。在花费了近一天时间确定游戏玩法和分工后，我的工作主要集中在以下三个方面：</p><ul><li>程序方面：负责游戏内商城逻辑、UI相关功能的实现和底部广播系统。</li><li>美术方面：负责设计并绘制游戏的所有美术资产，包括界面、砖块素材和logo等。</li></ul><p><strong>作品链接</strong>：<a href="https://ldjam.com/events/ludum-dare/49/babel-blocks">https://ldjam.com/events/ludum-dare/49/babel-blocks</a></p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="抖音特效开发-宅家舞蹈秀">抖音特效开发 - 宅家舞蹈秀</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E6%B1%87%E6%80%BB/HomeShow.png" alt><br><mark class="hl-label green">程序开发</mark><br><strong>项目介绍</strong>：《宅家舞蹈秀》是抖音的一款小游戏类型的特效，是我在字节跳动智能创作部门实习期间的一件产出。该特效在经过验证后已于2022年五一期间上线抖音正式版。<br><strong>主要工作</strong>：在初次接触部门自研引擎与 Lua 编程的情况下，我于两周内顺利完成了基于新算法模型的特效开发，运用了自研引擎中音频、序列帧动画、UI 框架等功能，学习并了解了特效的生产流程。</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="字节跳动-智能创作-hackthon2022-linsten-in-the-dark">字节跳动 智能创作 Hackthon2022 - Linsten in the Dark</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E6%B1%87%E6%80%BB/listen_in_dark.png" alt><br><mark class="hl-label purple">技术挑战奖（提名）</mark> <mark class="hl-label purple">PicoAudioSDK最佳用户奖</mark> <mark class="hl-label green">GUI</mark> <mark class="hl-label green">GUI</mark> <mark class="hl-label green">游戏程序</mark><br><strong>项目介绍</strong>：《Listen in the Dark》是⼀款盲⼈可以玩的VR⾳频寻路游戏，该项目参加了2022年字节跳动智能创作部⻔举办的⿊客编程⻢拉松 (Hackathon 2022) ⽐赛，在48⼩时之内开发完成。我们团队在两天之内开发出了三个章节 + 初始教学关卡的 demo，最终作品获得了总分 27/190 名的成绩，获得PicoAudioSDK最佳用户奖并入围了技术挑战奖。<br><strong>主要工作</strong>：在该项目中，我作为主要程序接触并学习了基于 OpenXR + Pico 的 VR 游戏开发。<br><strong>项目链接</strong>：<a href="https://github.com/yinhao21/hackathon2022">https://github.com/yinhao21/hackathon2022</a></p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="2022年中国-校计算机-赛微信-程序应-开发赛-话榕">2022年中国⾼校计算机⼤赛微信⼩程序应⽤开发赛 - 话榕</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E6%B1%87%E6%80%BB/%E7%99%BB%E9%99%86%E6%B3%A8%E5%86%8C.png" alt><br><mark class="hl-label purple">华南赛区三等奖</mark> <mark class="hl-label green">交互设计</mark><br><strong>项目介绍</strong>：《话榕》是我与本科同学组队参加2022年中国⾼校计算机⼤赛微信⼩程序应⽤开发赛的作品，该项目最终获得华南赛区三等奖。<br><strong>主要工作</strong>：我在项目中负责通过 Figma 与团队成员在线上完成了⼩程序的 GUI 设计⼯作，学习并了解了应⽤线框图与原型的制作流程，强化了所学的交互设计知识。</p></div></div></div><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2023">2023</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="本科毕设-寻星之路">本科毕设 - 寻星之路</h3></div></div><div class="timeline-item-content"><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=655699853&bvid=BV1La4y1G7RM&cid=1115071247&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><p><mark class="hl-label purple">院级优秀毕设</mark> <mark class="hl-label green">全栈</mark><br><strong>项目介绍</strong>：《寻星之路》是我在本科阶段的毕业设计，为个⼈独立开发的解谜游戏项⽬。我以该项⽬为基础撰写了本科毕业论⽂，获得了2023届福州⼤学学院级优秀本科毕业设计。<br><strong>主要工作</strong>：</p><ul><li>程序方面：完整地负责了游戏的整个开发与版本控制，采用了寻路算法、行为树、对象池等算法进行开发、实现了项目中水的风格化渲染。在项目开发的过程中电脑硬盘坏了，得益于使用远程仓库的习惯没有让毕设重头再来。</li><li>策划方面：设计了游戏的核心玩法与三个关卡（包含游戏的引导教学关）</li><li>美术方面：确定游戏的艺术⻛格、设计游戏的UIUX；采用MagicVoxel进行⼈物建模及动画制作。</li></ul><p><strong>项目链接</strong>：<a href="https://github.com/Guiny-Time/StarWay">https://github.com/Guiny-Time/StarWay</a></p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="第三届-益-游未尽-游戏开发大赛-hold-on">第三届《益·游未尽》游戏开发大赛 - Hold On！</h3></div></div><div class="timeline-item-content"><iframe frameborder="0" src="https://itch.io/embed/2238172" width="552" height="167"><a href="https://guinytime.itch.io/hold-on-h5ver">Hold on- h5 version by Guinyの时光</a></iframe><p><mark class="hl-label purple">获得公益证书</mark> <mark class="hl-label green">游戏程序</mark><br><strong>项目介绍</strong>：《Hold On！》是一款本地双人合作的抗灾救援3D游戏，玩家将扮演救援人员，在灾害现场对病人不同的受伤情况基给予营救。该项目参与了第三届《益·游未尽》游戏开发大赛，并获得活动公益证书（前十名）。<br><strong>主要工作</strong>：</p><ul><li>程序方面：在该项目中，我主要负责了关卡逻辑的构建。项目采用Feel框架实现了很多特效，我负责在程序中管理它们。</li></ul></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="booom暴造-游戏创作挑战赛-信徒">「BOOOM暴造」游戏创作挑战赛 - 信徒</h3></div></div><div class="timeline-item-content"><iframe frameborder="0" src="https://itch.io/embed/2308752" width="552" height="167"><a href="https://guinytime.itch.io/believer">信徒 by Guinyの时光</a></iframe><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=747222751&bvid=BV1zC4y1G7Hg&cid=1298893261&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><p><mark class="hl-label green">游戏程序</mark><br><strong>项目介绍</strong>：《信徒》是一款克苏鲁风格的塔防策略游戏，玩家通过掷骰子生成友方单位击杀入侵的敌人。该项目参与了2023年机核「BOOOM暴造」游戏创作挑战赛。<br><strong>主要工作</strong>：在该项目中我作为唯一的程序，完成了项目的所有程序相关的工作以及版本管理。</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="game-design-结课作业-ape-evolution">Game Design 结课作业 - Ape Evolution</h3></div></div><div class="timeline-item-content"><iframe frameborder="0" src="https://itch.io/embed/2455630" width="552" height="167"><a href="https://guinytime.itch.io/ape-evolution">Ape Evolution by Guinyの时光</a></iframe><p><mark class="hl-label green">全栈</mark><br><strong>项目介绍</strong>：Ape Evolution是一款2D top-down视角的猿类进化模拟器demo。该项目是学校游戏设计课的结课作业，我设计了30种不同的基因类型和4种不同的优胜劣汰机制，让玩家筛选星球上的猿类并最终使它们在生存压力适宜的情况下进化为人。<br><strong>主要工作</strong>：该项目由我独立开发完成，用时将近一个月。在该项目中，我用JSON文件存储了基因类型，并根据遗传/基因突变等前提分配到新的猩猩身上。除此之外，我通过配表的方式实现了项目的本地化功能。<br><strong>项目链接</strong>：<a href="https://github.com/Guiny-Time/ApeEvolution">https://github.com/Guiny-Time/ApeEvolution</a></p></div></div></div><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2024">2024</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="global-game-jam-hongkong-2024-cluckcluck">Global Game Jam HongKong 2024 - CluckCluck</h3></div></div><div class="timeline-item-content"><iframe frameborder="0" src="https://itch.io/embed/2499917" width="552" height="167"><a href="https://guinytime.itch.io/cluckcluck">CluckCluck by Guinyの时光</a></iframe><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=454292809&bvid=BV1A541117LF&cid=1421716595&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><p><mark class="hl-label purple">最佳竞技游戏奖</mark> <mark class="hl-label green">游戏程序</mark><br><a href="https://cattyhouse-guiny.xyz/2024/02/01/2024ggj%F0%9F%8C%8F%20-%20cluckcluck%E5%A4%8D%E7%9B%98%E2%80%94%E2%80%94%E6%96%B0%E8%BE%93%E5%85%A5%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%89%8B%E6%9F%84%E6%8E%A7%E5%88%B6/">站内链接</a><br><strong>项目介绍</strong>：《CluckCluck》是⼀款本地同屏双⼈⼿柄联机的2D竞技游戏，该项目参与了2024年Global Game Jam⾹港站的线下48⼩时开发活动，获得GGJ⾹港站最佳竞技游戏奖。<br><strong>主要工作</strong>：通过Unity的新输⼊系统结合⼿柄，实现了⼀台电脑、两个⼿柄共同游玩游戏的功能。这也是我的第⼀款采⽤⼿柄作为输⼊控制的游戏，这让我意识到了控制器的许多可能性。<br><strong>项目链接</strong>：<a href="https://github.com/GGJHK2024/GGJ2024Project">https://github.com/GGJHK2024/GGJ2024Project</a></p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="研究生毕业设计-终面">研究生毕业设计 - 终面</h3></div></div><div class="timeline-item-content"><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=1656089323&bvid=BV1yE421A76p&cid=1616495693&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><p><mark class="hl-label green">游戏程序</mark><br><strong>项目介绍</strong>：《One Last Interview/终面》是一款2D横板卷轴游戏项⽬，是我在研究生阶段的毕业设计项目，我在该项目中担任唯一的程序。该项⽬前已投稿⾄ 2024 腾讯游戏创作⼤赛⾼校赛道和 indiePlay 中国独⽴游戏⼤赛。<br><strong>主要工作</strong>：我在项⽬最初的两个⽉中完成了三版原型迭代，最终在两个⽉的时间⾥采⽤2D平台解决⽅案Corgi Engine为核⼼⼯具完成了demo中的所有开发⼯作。许多功能依靠Corgi Engine内的组件实现，但大多在原生组件的基础上进行了针对项目需求的更改和拓展（如“弹反”等Corgi Engine不具有的功能），我也借此机会学习了商业引擎的架构思想。<br><strong>项目链接</strong>：<a href="https://github.com/GGJHK2024/ShadowWarrior">https://github.com/GGJHK2024/ShadowWarrior</a></p></div></div></div><h1 id="制作的模块-功能">制作的模块/功能</h1><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2022">2022</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="基于-unity-的语音识别-人物面部变化">基于 Unity 的语音识别 + 人物面部变化</h3></div></div><div class="timeline-item-content"><p><strong>模块介绍</strong>：这是一个采用 Unity 的语音识别器 PhraseRecognizer 结合 3D 模型动画所实现的关键词影响面部表情变化功能，是我验证 PhraseRecognizer 功能时做的基础 demo 。用户可以自行配置关键词，在demo中我使用的是“早上好”、“晚安”、“a”、“e”、“i”、“o”和“u”。<br><strong>主要工作</strong>：制作模型动画、完成了 PhraseRecognizer 的配置。</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="基于深度测试的-3d-模型裁剪效果">基于深度测试的 3D 模型裁剪效果</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E6%B1%87%E6%80%BB/aabb.png" alt><br><strong>模块介绍</strong>：这是我在字节跳动实习期间接到的一个任务。在一个扫描现实中的对象生成 3D 模型的 APP 中，用户可能扫描得到多余的部分，需要对其进行裁剪，并将裁剪数据发送给服务端。<br><strong>主要工作</strong>：我负责实现模型裁剪效果、用户交互逻辑和跨端消息传递。我利用模型的 AABB 包围盒信息绘制了裁剪盒并赋予了材质，结合深度测试等图形学知识实现了设计师给定的特殊裁剪效果，并实现了监听客户端消息-发送裁剪信息的链路。</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="基于-unity-的水体渲染与可交互水实现">基于 Unity 的水体渲染与可交互水实现</h3></div></div><div class="timeline-item-content"><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=562934403&bvid=BV1pv4y127nS&cid=899741090&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=730458751&bvid=BV1bD4y1q7s9&cid=831153018&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=303589905&bvid=BV15P411E7Ub&cid=846825486&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=775558915&bvid=BV1W14y1n7cv&cid=903231810&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><p><strong>模块介绍</strong>：这是我在学习计算机图形学和 Unity 的 Shader Graph 时进行的一些渲染练习。我尝试了基础的法线扰动水体渲染、风格化水体渲染、基于Gerstner Wave的水体渲染与可交互水的实现。</p><p><a href="https://cattyhouse-guiny.xyz/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/">站内链接：水面、波浪、白沫和焦散</a><br><a href="https://cattyhouse-guiny.xyz/2022/09/29/%E5%9F%BA%E4%BA%8Egerstner%20wave%E7%AE%97%E6%B3%95%E7%9A%84%E6%B5%B7%E6%B4%8B%E5%AE%9E%E7%8E%B0/">站内链接：基于Gerstner Wave算法的海洋实现</a></p></div></div></div><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2023">2023</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="基于-unity-的桌面音频应用">基于 Unity 的桌面音频应用</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E6%B1%87%E6%80%BB/audio.png" alt><br><strong>模块介绍</strong>：这是一个基于 Unity 实现的可以点击穿透的、支持音频响应的音频桌面应用。音频响应的线条绘制部分采用 LineRenderer 组件实现，点击穿透则利用了 Unity 的后台运行功能和 user32.dll 文件。<br>这个项目可以用于壁纸引擎。</p></div></div></div><h1 id="其他">其他</h1><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2024">2024</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="the-shader-bible-全书翻译">《The Shader Bible》全书翻译</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E6%B1%87%E6%80%BB/USB.png" alt></p><p><a href="https://zhuanlan.zhihu.com/p/645676077">【翻译】Unity Shader Bible/Unity着色器圣经 全书目录 - 几何冰川的文章 - 知乎</a></p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="基于-blender-几何节点的程序化建模尝试">基于 Blender 几何节点的程序化建模尝试</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E6%B1%87%E6%80%BB/flower.png" alt><br>这是我为一门课程的结课作业所做的验证，在对节点参数进行微调后成功得到了多种花朵类型。<br>这是最终成品↓<br><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E6%B1%87%E6%80%BB/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240721183048.jpg" alt></p></div></div></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络同步-帧同步/状态同步</title>
      <link href="/2024/07/19/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5/"/>
      <url>/2024/07/19/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是网络同步">什么是网络同步</h1><p>网络同步是指通过网络将数据从一个系统或节点传输到另一个系统或节点，并保持两者之间的<strong>数据一致性</strong>。换句话说，游戏中的网络同步就是把我的状态同步给远程玩家的“我”的镜像，使双方在屏幕上看到的效果是一致的。<br>在常见的多人联机游戏（例如下棋、格斗、fps等等等等）中，网络同步是非常重要的一项需求。游戏中的玩家需要时时刻刻了解其他玩家的状态或者行为，才能辅助自己做出下一步决策（例如是否开枪等）。<br>如何知道其他玩家的状态，又如何让其他玩家知道我的状态呢？这时候就需要<strong>网络同步技术</strong>了。</p><h1 id="同步设计目标">同步设计目标</h1><p>同步设计主要有两个目标，即 <strong>一致性</strong> 和 <strong>及时性</strong> 。在实际工程中，我们其实很难同时满足一致性和及时性，因为网络延迟始终存在，客户端在接收到最新状态前只能进行预测（采用一些客户端障眼法，例如插值）。<br>在这两个核心目标下，我们可以拆解出三个子设计要素，根据实际情况进行优先级权衡。一般来说用户体验是位于首位的。</p><ul><li><strong>公平</strong><ul><li>确定<br>操作具有幂等性，玩家执行一个操作所得的的结果是确定的。游戏存在明确的规则，玩家知道规则带来的确切的后果，因此才可以基于规则进行博弈。</li><li>安全<br>数据的安全性代表玩家的数据隐私不应该被第三方破坏或篡改。当计算放在客户端时，数据就很容易被篡改，造成作弊行为。</li></ul></li><li><strong>体验</strong><ul><li>延迟<br>由于网络原因，延迟很难避免。延迟分为输入响应延迟和状态延迟。<ul><li>输入响应延迟<br>影响手感、状态变化越剧烈越敏感。对QTE判定、格斗游戏等输入敏感类游戏影响巨大。</li><li>状态延迟<br>影响判断，例如fps游戏中判断是否击杀对方等。</li></ul></li><li>稳定<br>由于网络环境不稳定，可能发生抖动和丢包，一旦发生就很容易引起游戏的“顿挫感”与“拉扯感”。当网络环境中断时就会引起游戏断线，这时会触发断线重连的尝试。</li></ul></li><li><strong>开销</strong><ul><li>流量<br>流量代表客户端需要收发多少数据，流量越大越可能遇到网络问题（例如丢包），并对用户的话费造成影响，造成运维成本上升。</li><li>计算量<br>计算量越大对客户端的负载越大，越容易造成手机发烫、电池消耗大等问题。</li><li>研发成本<br>不同的同步算法的技术门槛和维护成本是不一样的，在下文中会详细说明。</li></ul></li></ul><h1 id="传输数据分析">传输数据分析</h1><p>在网络同步中，我们一般要传输什么数据呢？在实际生活中，一款游戏可以被拆成“输入-逻辑处理-输出”三个部分。用户通过键鼠/触摸屏等设备对游戏产生输入，经过游戏的核心逻辑处理模块处理之后，将状态输出到屏幕上，最后呈现在用户面前。<br>那么很明显，我们需要同步的就是用户的输入的<strong>操作</strong>、或者这些操作所产生的一系列<strong>事件</strong>，将这些事件同步到其他玩家的客户端上，其他玩家的客户端就可以根据事件类型计算出对应的状态并呈现。<br>当然，我们也可以直接同步用户的<strong>状态</strong>，这样就省去了客户端上的计算工作。<br>展开说说？</p><h2 id="一致性：帧同步">一致性：帧同步</h2><blockquote><p><strong>古典帧同步</strong><br>古典帧同步又叫Lockstep Synchronization（锁步同步），其一大特色在于当一个人未同步完成时，其他人都必须等待直到其同步完成。</p></blockquote><p>帧同步就对应于我们在上文中说的同步用户的输入的<strong>操作</strong>、或者这些操作所产生的一系列<strong>事件</strong>。之所以被称之为“帧”同步，是因为帧同步是以<strong>固定频率</strong>（比如60Hz）同步玩家的下一帧的操作的。<br>在这个过程中，客户端将指令发送给服务端，服务端只做指令的转发（指令-&gt;指令），其他客户端接收到服务端传来的指令后进行对应的计算。</p><p><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRllaP7Bjzn6SYHDcw-MlhnUMUELmjSxy-Hkg&amp;s" alt></p><p>正由于最终同步体现在各个服务端接收到指令后计算结果的一致性上，因此帧同步最核心的依赖就是“<strong>同样的程序对于同样的输入会产生完全一致的结果</strong>”。如果这一前提无法被保证，就无法达成一致性。<br>由于硬件平台的不同，还真可能出现计算结果不一致的情况（例如用ios和win/Android计算sin(15)得到的值不同，这是因为ios的FPU位宽更大），我们就需要想尽办法避免这种情况出现。例如对于浮点数计算精度的问题，可以采用更改FPU位宽或用定点数计算。</p><blockquote><p><strong>保证一致性逻辑的几种方法</strong></p><ul><li>保持客户端版本一致（相同的逻辑模块）</li><li>不要依赖不确定性的外部逻辑（如UI交互逻辑）</li><li>限制外部逻辑（如UI）对核心逻辑的调用</li><li>谨慎使用多线程</li></ul></blockquote><ul><li><strong>优点</strong><ul><li>服务器逻辑简单，负载低，不需要做任何计算</li><li>项目研发周期缩短</li><li>表现一致性高（所有指令都来自服务端）</li><li>同步流量小，带宽成本低（一帧的输入量小）</li><li>天然支持观战、录像、回放（记录了所有指令，逐个执行就是回放了）</li><li>实时性表现好（适用于act/ftg/spg/rts/moba等）</li></ul></li><li><strong>缺点</strong><ul><li>反外挂问题严峻（计算都在客户端上，容易被篡改）</li><li>网络延迟敏感度高（容易卡顿）</li><li>不同步问题较难定位和解决</li><li>单局规模受限（否则一帧内包含的指令太多），不适合中途加入角色的游戏</li></ul></li></ul><h2 id="一致性：状态同步">一致性：状态同步</h2><p>而状态同步就类似于我们在上文中说的直接同步用户的<strong>状态</strong>。客户端将指令发送给服务端，服务端计算出状态后广播给其他客户端，客户端收到后进行更新。这样虽然会加重服务端的运算负载，但可以有效避免客户端作弊的发生。<br>当然，我们还可以结合一下<strong>分布式</strong>运算的想法，将计算压力分摊到客户端上。在这种模式中，客户端将部分指令即时计算成状态之后，将状态发送给其他客户端（其他客户端同理），其他客户端收到后进行更新。</p><img src="https://img-blog.csdnimg.cn/direct/ad52ff0a80744ab9901d203669b8fa86.png"><h3 id="状态同步的临界问题">状态同步的临界问题</h3><p>仔细观察下图所示的临界情况：</p><center><img src="/2024/07/19/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5/Clipboard_2024-09-20-16-21-17.png" width="400"></center><p>在这个情况中，假设下方的玩家向上走了一步，发送“向上一步、夺旗”的状态；而上方的玩家在接收到这个状态之前向下走了一步，发送“向下一步、夺旗”的状态。此时两个玩家的状态都变成了“夺旗”，到底谁获得了胜利呢？这就涉及到状态同步的仲裁权问题。两个玩家都在竞争“仲裁权”，我们需要结合具体的信息（例如状态更新的时间）进行公平公正的仲裁。有两种可行的思路：</p><ul><li>强一致性<ul><li>服务器模式就是一种强一致性的方式，因为只存在一个逻辑仲裁点（服务器），这从根本上避免了冲突。</li><li>在分布式模式中，不同客户端仅对单一状态进行仲裁，两个客户端不能仲裁同一个状态，实现仲裁权的分割。只不过这个做法比较理想化，不符合联机游戏的特征、存在扩展风险。</li></ul></li><li>弱一致性<br>在弱一致性方法中，我们首先要对所有一致性做一个区分：哪些是核心一致性，哪些是非核心一致性？<ul><li><strong>核心一致性</strong>：可能影响双方的状态采用单点仲裁处理、异步交互（如：fps游戏中是否命中、赛车游戏中的道具）<ul><li>单点逻辑仲裁<strong>对操作响应的延迟很敏感</strong>。</li><li>比较慢，因为需要服务器计算后合包再发送给各个客户端，这中间存在时延。因此更适合<strong>对核心仲裁延迟相对不敏感</strong>的情况（比如fps的命中判定并不是立刻判定完成的，但结合“子弹存在飞行时间”等ux因素，对玩家的体验影响并不太大）。</li><li>一致性有容错空间。</li></ul></li><li><strong>非核心一致性</strong>：仅对自身有影响的状态采用仲裁分割、延迟同步（如：赛车游戏中自身位置、fps游戏中的位置等）<ul><li>对于<strong>物理</strong>、<strong>3D</strong>这些比较复杂的运算，如果全部交给服务端将对其造成较大的计算负荷，因此这部分状态判定可以交由客户端本身进行处理。</li></ul></li></ul></li></ul><h3 id="fps的回溯判定">fps的回溯判定</h3><p>fps对于精度的判断要求很高，在存在服务器状态延迟、射击指令延迟的时候应该怎么准确的进行命中仲裁呢？此时服务器需要<strong>回溯</strong>射击发生当时的状态，进行判断。</p><center><img src="/2024/07/19/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5/Clipboard_2024-09-20-17-03-56.png" width="300"></center><p>在上图所示的例子中，蓝色玩家在射击时向服务器发送了射击指令，经过延迟服务器收到后计算出橙色玩家已经走到了下面的位置、子弹飞到了右侧的位置，此时子弹和橙色玩家并没有接触。<br>但我们就可以直接判断子弹没有命中橙色玩家吗？显然是不行的，因为我们不知道子弹飞行的过程中是否击中了橙色玩家，因此需要做“<strong>回溯判定</strong>”的操作。服务器会采用一些高效的逐帧检查，直到检测出命中/不命中。</p><center><img src="/2024/07/19/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5/Clipboard_2024-09-20-17-35-35.png" width="300"></center><ul><li><strong>优点</strong><ul><li>适合小规模状态/可划分子系统（适用于fps/赛车/三消等）</li><li>较小的计算量</li><li>输入延迟低，因为本地就计算好状态了</li><li>技术门槛低</li></ul></li><li><strong>缺点</strong><ul><li>大规模状态时同步的数据也大</li><li>流量大</li><li>分布式计算/复杂逻辑的一致性难以协调，导致后期维护成本高</li></ul></li></ul><h2 id="及时性：通用方案">及时性：通用方案</h2><p>我们需要考虑为同步的及时性选择一个恰当的网络协议了。传输层有两个著名的协议：TCP 和 UDP。在保证 UDP 传输可靠性的情况下，我们可以有“可靠UDP（RUDP）”。那么，该选择 <strong>TCP</strong> 还是 <strong>RUDP</strong> 呢？</p><center><img src="/2024/07/19/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5/Clipboard_2024-09-21-16-56-52.png" width="450"></center><p>可以看到，在不同的网络环境下，RUDP的平均延迟都是要好于TCP的。因此在实际开发的过程中，一般选择RUDP作为传输层协议。<br>那么，应该怎么实现可靠UDP呢？</p><h3 id="基于arq-自动重传请求">基于ARQ（自动重传请求）</h3><p>首先，我们需要了解以下几个概念：</p><ul><li><strong>RTT</strong>（Round Trip Time）<br>RTT指的是从客户端发送数据包到客户端收到服务端返回确认数据包（ACK包）的时间间隔，这段时间被称为往返时间（RTT）。</li></ul><center><img src="/2024/07/19/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5/Clipboard_2024-09-21-17-14-14.png" width="300"></center><ul><li><strong>RTO</strong>（Retransmission Timeout）<br>RTO指的是超时重传时间，即在客户端发送数据包后，在RTO时间内未收到服务端的ACK包，就会重新发送一个数据包过去。一般来说，RTO = 1.5RTT</li></ul><center><img src="/2024/07/19/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5/Clipboard_2024-09-21-17-17-23.png" width="300"></center><ul><li><strong>最小丢包延时</strong><br>当丢包发生时，接收方最终收到发送的数据包的最小延时（也就是RTO后发送的包到达接收方的时间）。一般来说，最小丢包延时 = 2RTT</li></ul><center><img src="/2024/07/19/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5/Clipboard_2024-09-21-17-24-59.png" width="300"></center><p>基于上面的三个概念，我们可以发展出以下两种实现RUDP的方式：</p><ol><li><strong>等待式</strong><br>每次客户端发送一个包，都要等到收到服务端的ACK包后才发送下一个。这种实现模式对信道的浪费比较严重。<br><img src="/2024/07/19/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5/Clipboard_2024-09-21-17-50-11.png" width="300"></li><li><strong>后退N步</strong><br>客户端每次发一堆包，收到服务器的一堆ACK包后检查有没有哪个漏了，有的话从漏掉的包开始重新发送（服务器会丢弃缺漏包后的所有包）。这种模式对流量的占用较大，浪费了信道资源。<br><img src="/2024/07/19/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5/Clipboard_2024-09-21-17-50-28.png" width="300"></li><li><strong>选择重发</strong><br>和后退N步类似，但只选择性地重发未收到ACK包的包，服务器不会丢弃其他包。<br><img src="/2024/07/19/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5/Clipboard_2024-09-21-17-51-55.png" width="300"></li></ol><p>在ARQ中，已经有了大量现成的解决方案（如KCP），但其最小丢包时延较高。</p><h3 id="基于fec-前向冗余纠错">基于FEC（前向冗余纠错）</h3><img src="/2024/07/19/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5/Clipboard_2024-09-21-17-53-45.png" width="500"><p>在FEC中，最小丢包延迟比ARQ的小，但它只适用于<strong>帧同步</strong>中，并且实现算法比较复杂、没有现成的实现方案（需要自己造轮子）。</p><h3 id="丢包时应该怎么办？">丢包时应该怎么办？</h3><p>丢包分为两种：相关性丢包和随机性丢包。</p><ol><li><strong>相关性丢包</strong><br>这种丢包通常是由链路拥塞、路由器负载过高、无线信号衰减、基站/场景切换等程序员无法干预的情况导致的。我们知道丢包的原因，但无法解决。</li><li><strong>随机性丢包</strong><br>这种丢包通常是由于二进制信道噪声产生的，完全是随机出现的，将近90%的丢包都属于这种类型。<br>基于吉尔伯特模型，我们可以计算出连续K次丢包的概率（随着k的增加，概率是会越来越低的）。因此，为了避免随机性丢包，我们可以连发2次同一个包（如果2次不够就发送3次）。</li></ol><blockquote><p><strong>UDP包与MTU</strong><br>由于网络信道存在MTU的概念，当一个UDP包的大小超过MTU时，打包就会被拆成IP分片小包，在收到时再重组成UDP大包。<br>但分成小包进行传输，其实是很容易遇到丢包的情况的。一旦IP分片中有一个包丢失了，系统就会丢弃整个UDP大包。<br>因此，我们有时候需要人为地将一个UDP大包拆成小包发送，并留意信道的MTU大小。经验MTU大小为<strong>470字节</strong>。</p></blockquote><hr><h3 id="对时方案">对时方案</h3><p>什么是“<strong>对时</strong>”？简单来说，对时就是“<strong>对齐时间轴</strong>”的简称。对于帧同步来说，我们需要对齐第一帧；而对于状态同步来说，我们需要对齐所有状态。说的轻巧，怎么对时呢？</p><center><img src="https://ae05.alicdn.com/kf/S56b4560e112b4029ac73bae217c6258eo.jpg" width="100"></center><p><a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E6%99%82%E9%96%93%E5%8D%94%E5%AE%9A#%E6%97%B6%E9%92%9F%E5%90%8C%E6%AD%A5%E7%AE%97%E6%B3%95">https://zh.wikipedia.org/wiki/網路時間協定#时钟同步算法</a></p><h3 id="预表现">预表现</h3><p>预表现也就是我们常说的“客户端障眼法”。在还未获取玩家的状态或者帧的情况下，我们不能让玩家卡在某个地方（否则会带来很强的顿挫感），而是需要通过插值和预测做出预表现。<br>因此，在预表现中，存在两个重要的算法：预测算法和插值算法。</p><ul><li>预测算法<br>根据当前的状态预测下一个状态。最经典的预测算法是“航位推测算法（Dead Reckoning）”，常用于交通技术层面，但容易收到误差积累的影响。<ul><li>规则（人为设置的规则，辅助预测）</li><li>无用户输入（硬直状态，根据状态机进行判断）</li><li>寻找积分导数（位移是速度积分算的，速度是加速度积分算的，…）</li><li>用户输入有限（一个用户就十个指头，手速有限）</li></ul></li><li>插值算法<br>根据两个状态，平滑地进行过度。插值其实是一个瘦时间影响的操作序列，主要起到视觉上的平滑效果，符合游戏规则。<ul><li>使用录像数据进行与训练</li><li>用户个性化样本训练</li></ul></li></ul><p>除了这两种方法之外，我们还可以寻找<strong>视觉掩饰</strong>，例如设置前摇与后摇，提供缓冲时间。</p><h1 id="方案对比">方案对比</h1><p>回到前文的“同步算法设计七大要素”，我们现在可以对比一下帧同步与状态同步在这七大要素中的表现情况了：</p><ul><li><strong>公平</strong><ul><li>确定<ul><li>帧同步：具有强一致性</li><li>状态同步：非本地仲裁的数据有延迟或需要修正</li></ul></li><li>安全<ul><li>帧同步：输入数据和状态数据可能被篡改，拥有所有玩家的状态，隐私问题难以保障。<br>在这种情况下，服务器需要进行完整逻辑校验，并对关键状态进行校验（投票）。</li><li>状态同步：<strong>本地</strong>的输入数据和状态数据可能被篡改，远端的状态数据是隐私的。<br>对延迟敏感的项目，可以本地维护状态、服务器后校验；对延迟不敏感的项目，可以直接通过服务器维护状态。</li></ul></li></ul></li><li><strong>体验</strong><ul><li>延迟<ul><li>帧同步：网络优化，采用RUDP</li><li>状态同步：对网络抖动不敏感，可用RUDP也可用TCP</li></ul></li><li>稳定<ul><li>帧同步：断线重连非常复杂，需要服务器缓存所有帧数据，发回给客户端，从断线处开始播放到当前帧</li><li>状态同步：可以由服务器保存当前状态，重连时使用该状态即可</li></ul></li></ul></li><li><strong>开销</strong><ul><li>流量<ul><li>帧同步：同步指令，同步流量小</li><li>状态同步：同步状态，同步流量大<br>可以通过优化编码格式、设置电平触发/边沿触发（是每秒发送按键，还是在按键变化时发送？）、区分重要/不重要数据的方式优化流量开销。</li></ul></li><li>计算量<ul><li>帧同步：计算量全部集中在客户端（因此无法维护大规模的游戏）</li><li>状态同步：部分计算量在客户端（本地状态），部分计算量在服务端</li></ul></li><li>研发成本<ul><li>帧同步：技术门槛高、维护成本高、研发周期短</li><li>状态同步：技术门槛低、维护成本高（随着状态复杂而复杂化）、研发周期长</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 探索发现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏编程 </tag>
            
            <tag> 经验分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024GGJ🌏 - CluckCluck复盘——新输入系统与手柄控制</title>
      <link href="/2024/02/01/2024GGJ%F0%9F%8C%8F%20-%20CluckCluck%E5%A4%8D%E7%9B%98%E2%80%94%E2%80%94%E6%96%B0%E8%BE%93%E5%85%A5%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%89%8B%E6%9F%84%E6%8E%A7%E5%88%B6/"/>
      <url>/2024/02/01/2024GGJ%F0%9F%8C%8F%20-%20CluckCluck%E5%A4%8D%E7%9B%98%E2%80%94%E2%80%94%E6%96%B0%E8%BE%93%E5%85%A5%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%89%8B%E6%9F%84%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="新输入系统-input-system">新输入系统(Input System)</h1><p>Unity的新输入系统是一个基于事件的新系统，它在编辑器里提供了一个中间层（Input Action Asset），用户可以在其中自定义一系列玩家动作和其对应的操作。例如在CluckCluck中，我设定了移动（left joystick）、冲刺（B）、拾取道具（right trigger）三个控制：</p><p><img src="/2024/02/01/2024GGJ%F0%9F%8C%8F%20-%20CluckCluck%E5%A4%8D%E7%9B%98%E2%80%94%E2%80%94%E6%96%B0%E8%BE%93%E5%85%A5%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%89%8B%E6%9F%84%E6%8E%A7%E5%88%B6/image0.png" alt></p><p>完成操作设置之后，保存Input Action资产，在其检查器中可以点击生成对应的C#类，接下来就可以在代码中通过事件绑定的方法使用这些操作监听。</p><p><img src="/2024/02/01/2024GGJ%F0%9F%8C%8F%20-%20CluckCluck%E5%A4%8D%E7%9B%98%E2%80%94%E2%80%94%E6%96%B0%E8%BE%93%E5%85%A5%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%89%8B%E6%9F%84%E6%8E%A7%E5%88%B6/image.png" alt="这里已经生成过C#类了，所以没有generate C# class的选项"></p><h1 id="同屏双手柄-1p2p">同屏双手柄（1p2p）</h1><p>由于我们做的是一个比较欢脱的双人派对竞技游戏，这次jam还有一个重要的需求是同屏双手柄控制。我不想像懂哥一样用“PlayerController1.cs”和“PlayerController2.cs”来区分不同玩家（因为如果采取这种模式，如果玩家数量增多，需要维护的脚本就会变多），所以如何在一个脚本中为不同玩家绑定不同的控制器尤为重要。<br>首先是声明p1/p2，它们都用了同一套InputAction “Player2”（之所以是这个命名是因为Player1是键盘控制）。通过游戏对象的名称是否包含“1”来判断玩家是否是p1，如果是则为该玩家绑定全部游戏控制器列表的第一个控制器；否则绑定第二个控制器。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">p1 = <span class="keyword">new</span> Player2();</span><br><span class="line">p2 = <span class="keyword">new</span> Player2();</span><br><span class="line"><span class="keyword">var</span> allGamepads = Gamepad.all;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.gameObject.name.Contains(<span class="string">&quot;1&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> user1 = InputUser.PerformPairingWithDevice(allGamepads[<span class="number">0</span>]);</span><br><span class="line">    user1.AssociateActionsWithUser(p1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> user2 = InputUser.PerformPairingWithDevice(allGamepads[<span class="number">1</span>]);</span><br><span class="line">    user2.AssociateActionsWithUser(p2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考资料">参考资料</h1><p><a href="https://docs.unity3d.com/Packages/com.unity.inputsystem@1.2/api/UnityEngine.InputSystem.IInputActionCollection2.html">https://docs.unity3d.com/Packages/com.unity.inputsystem@1.2/api/UnityEngine.InputSystem.IInputActionCollection2.html</a><br><a href="https://learn.microsoft.com/en-us/dotnet/api/system.idisposable?view=net-8.0">https://learn.microsoft.com/en-us/dotnet/api/system.idisposable?view=net-8.0</a><br><a href="https://zhuanlan.zhihu.com/p/106396562">https://zhuanlan.zhihu.com/p/106396562</a><br><a href="https://www.reddit.com/r/Unity3D/comments/eqq07o/multiple_controllers_through_input_action_system/">https://www.reddit.com/r/Unity3D/comments/eqq07o/multiple_controllers_through_input_action_system/</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏编程 </tag>
            
            <tag> 经验分享 </tag>
            
            <tag> 项目复盘 </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏AI-状态机与行为树</title>
      <link href="/2023/05/10/%E6%B8%B8%E6%88%8FAI-%E7%8A%B6%E6%80%81%E6%9C%BA%E4%B8%8E%E8%A1%8C%E4%B8%BA%E6%A0%91/"/>
      <url>/2023/05/10/%E6%B8%B8%E6%88%8FAI-%E7%8A%B6%E6%80%81%E6%9C%BA%E4%B8%8E%E8%A1%8C%E4%B8%BA%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>假设我们需要设计一个敌人 AI，它存在“<strong>按照路线巡逻</strong>”、“<strong>警觉</strong>”、“<strong>追击玩家</strong>”三种状态，它们之间的关系如下：</p><ul><li>AI 默认处于“按照路线巡逻”状态</li><li>在“按照路线巡逻”中，如果发现了玩家，就进入“警觉”状态</li><li>在警觉状态中，如果玩家持续存在，经过两秒后进入“追击玩家”状态</li><li>在“警觉”和“追击玩家”状态中，如果玩家逃脱巡查范围或死亡，则回到“按照路线巡逻”状态</li></ul><p>对初学者来说，我们很容易会想到为每个状态设置一个bool值，用来判断对象是否处于某个状态中，例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> isPatrol = <span class="literal">true</span>; <span class="comment">// 初始处于巡逻状态</span></span><br><span class="line"><span class="built_in">bool</span> isAlert = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">bool</span> isChase = <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(isPatrol)&#123;</span><br><span class="line">    <span class="keyword">if</span>(playerTarget)&#123;</span><br><span class="line">      isAlert = <span class="literal">true</span>;</span><br><span class="line">      isPartol = <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">// 巡逻</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(isAlert)&#123;</span><br><span class="line">    <span class="keyword">if</span>(playerTarget)&#123;</span><br><span class="line">      <span class="comment">// 启用某种计时器，结束之后有：</span></span><br><span class="line">      <span class="comment">// isChase = true;</span></span><br><span class="line">      <span class="comment">// isAlert = false;</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      isProtal = <span class="literal">true</span>;</span><br><span class="line">      isAlert = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(isChase)&#123;</span><br><span class="line">    <span class="keyword">if</span>(playerTarget)&#123;</span><br><span class="line">      <span class="comment">// 追击玩家</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      isProtal = <span class="literal">true</span>;</span><br><span class="line">      isChase = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际在开发的过程中，我们可能因为策划的需要而为敌人 AI 加入新的状态，例如追击一段时间后开始奔跑等等。为了实现这个新的状态，我们就需要加入一个新的 bool 值 isRunning 来判断敌人是否处于奔跑状态。当状态越来越多，需要维护的 bool 值也越来越多，复杂的分支和状态导致代码的可读性降低，非常容易出 bug。</p><p>那么，有什么能拯救敌人 AI 的方法吗？</p><h1 id="状态机-state-machine-与状态模式">状态机(State Machine)与状态模式</h1><h2 id="有限状态机-fsm">有限状态机(FSM)</h2><p>如果把刚才的三种状态抽象成一张图：<br><img src="/2023/05/10/%E6%B8%B8%E6%88%8FAI-%E7%8A%B6%E6%80%81%E6%9C%BA%E4%B8%8E%E8%A1%8C%E4%B8%BA%E6%A0%91/Clipboard_2024-10-17-12-05-25.png" alt><br>恭喜，你成功创建了一个<strong>有限状态机</strong>（FSM）。FSM 是一种基于状态转换的行为模型。它将对象的行为建模为一系列状态，通过定义状态之间的转换条件和动作来控制对象的行为。状态机由多个状态组成，每个状态表示对象在特定情况下的行为。当特定条件满足时，状态之间会进行切换，从而驱动对象执行相应的动作。</p><blockquote><p>有限状态机借鉴了计算机科学里的自动机理论（automata theory）中的一种数据结构（图灵机）思想。有限状态机可以看作是最简单的图灵机。</p></blockquote><p>在状态机中，整个状态机由状态、事件和转换组成。展开来说：</p><ul><li>状态机拥有一组状态，可以在这些状态之间进行切换，但同一时间只能处于一种状态中；</li><li>状态机会接受到一组事件（可能由输入等造成）作为转换条件；</li><li>每个状态之间有一组转换，每个转换都关联着一个事件并指向另一个状态。状态的转换取决于转换条件和当前所处状态。</li></ul><p>为了避免写出复杂的 if-else 语句，我们可以考虑用枚举来表示每个状态，并用 switch-case 分支语句构建每个状态的行为和转换逻辑。在这种写法中，所有处理单个状态的代码都集中在一起了，这是实现状态机最简单的方法。在 if-else 写法中，通过 bool 值标识可能会存在一些没有意义的值，但在枚举写法中，每一个枚举值都是有意义的。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AI 的三种状态</span></span><br><span class="line"><span class="built_in">enum</span> State&#123;</span><br><span class="line">  Protal,</span><br><span class="line">  Alert,</span><br><span class="line">  Chase</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Update&#123;</span><br><span class="line">  <span class="keyword">switch</span>(state)&#123;</span><br><span class="line">    <span class="keyword">case</span> Protal:</span><br><span class="line">      <span class="keyword">if</span>(playerTarget)&#123;</span><br><span class="line">        state = Alert;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 巡逻</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Alert:</span><br><span class="line">      <span class="keyword">if</span>(playerTarget)&#123;</span><br><span class="line">        <span class="comment">// 启用某种计时器，结束之后有：</span></span><br><span class="line">        state = Chase;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        state = Protal;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Chase:</span><br><span class="line">      <span class="keyword">if</span>(playerTarget)&#123;</span><br><span class="line">        <span class="comment">// 追击玩家</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        state = Protal;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态模式">状态模式</h2><p>状态模式将这可能存在于玩家控制器中的一大串 switch-case 解耦成了更符合面向对象思维的写法。在状态模式中，我们可以定义状态接口IState：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">IState</span>&#123;</span><br><span class="line">  <span class="comment">// 处理事件</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">HandleInput</span>()</span>;</span><br><span class="line">  <span class="comment">// 状态行为</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Action</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，我们可以为每个状态定义一个类（以警觉为例，我们正好可以实现一下计时器方法），并实现状态接口：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">AlertState</span> : <span class="title">IState</span>&#123;</span><br><span class="line">  <span class="built_in">float</span> _time = <span class="number">0.0f</span>;</span><br><span class="line">  <span class="built_in">bool</span> _beginChase = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 警觉状态的事件处理</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">HandleInput</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!playerTarget)&#123;</span><br><span class="line">      <span class="comment">// 丢失目标，切换状态到Protal</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(_beginChase)&#123;</span><br><span class="line">      <span class="comment">// 切换状态到Chase</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 警觉状态的行为</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Action</span>()</span>&#123;</span><br><span class="line">    Timer();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 计时器</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Timer</span>()</span>&#123;</span><br><span class="line">    _time += Time.deltaTime();</span><br><span class="line">    <span class="keyword">if</span>(_time &gt; <span class="number">2.0f</span>)&#123;</span><br><span class="line">      _beginChase = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，在 AI 控制器 AIController.cs 一类的脚本中，我们需要一个用来表示 AI 当前状态的指针，并直接调用接口方法（来执行每个状态实现的方法）。在修改状态时，改变状态指针所指的对象即可。如果状态类中不包含数据成员（比如Protal和Chase），那么这些不论怎么实例化都始终一样的对象，可以考虑作为静态对象存放在状态的类 AIState 中，例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">AIState</span>&#123;</span><br><span class="line">  <span class="keyword">static</span> ProtalState protal;</span><br><span class="line">  <span class="keyword">static</span> ChaseState chase;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但对于警戒状态来说，它包含了与计时器有关的变量_timer，采用静态方法就行不通了。而且对于多个 AI 来说，它们可能同时处于一个状态中，就需要采用实例化的方式代替静态状态，为每个 AI 的状态机创建一个当前状态的实例。</p><p>那应该如何实现状态之间的切换呢（就像我们在前面的 HandleInput 代码中只是用一行注释简单带过了）？我们可以考虑在状态的方法中<strong>返回</strong>新的状态,做法就是：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 警觉状态的事件处理</span></span><br><span class="line">  <span class="function">IState <span class="title">HandleInput</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!playerTarget)&#123;</span><br><span class="line">      <span class="comment">// 丢失目标，切换状态到Protal</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ProtalState();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(_beginChase)&#123;</span><br><span class="line">      <span class="comment">// 切换状态到Chase</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ChaseState();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在 AI 控制器中，判断返回的状态，如果非空则认为状态发生了变化。在这个基础上，我们还可以实现 Entry 和 Exit 方法实现状态进入/退出时的特殊功能，完善状态机的健壮性。</p><h2 id="并发状态机">并发状态机</h2><p>在前文的有限状态机中同一时间 AI 只能处于一个状态中，那么如果我希望 AI 在追击角色的<strong>同时</strong>执行持枪/开火的循环状态，应该怎么办呢？对FSM，我们可能要把状态加上“巡逻时持枪”、“巡逻时开火”、“警觉时持枪”、“警觉时开火”、“追击时持枪”和“追击时开火”了，提升了代码的复杂性。</p><p>但其实仔细想想，持枪/开火这个循环其实和其他状态是独立的，如下图所示，那么我们就可以在 AI 控制器中声明两个状态指针，分别指代持枪/开火和其他的 AI 行为，在执行 handleInput 时两个状态都调用一下就可以了。这就是并发状态机的思想，适合多个毫无关联的状态机并发执行（如果有关联，并发状态机依然可以完成任务，但需要结合一些 if 语句进行判断）。<br><img src="/2023/05/10/%E6%B8%B8%E6%88%8FAI-%E7%8A%B6%E6%80%81%E6%9C%BA%E4%B8%8E%E8%A1%8C%E4%B8%BA%E6%A0%91/Clipboard_2024-10-17-15-58-43.png" alt></p><h2 id="层次状态机">层次状态机</h2><p><img src="https://picx.zhimg.com/v2-f9122ffbc3cfd2350199893bd2b64f1f_r.jpg" alt><br>在我们实际编写状态机代码时，可能会发现许多状态包含了<strong>重复的逻辑</strong>，例如在“警觉”和“追击”两个状态中，丢失玩家只会都会回到“巡逻”状态。有没有办法减少这些重复代码呢？我们可以考虑采用<strong>继承</strong>的方式。“警觉”和“追击”都可以继承自一个父状态“非巡逻（或者一个更好的名字）”，在&quot;非巡逻&quot;的 handleInput 中：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!playerTarget)&#123;</span><br><span class="line">  <span class="comment">// 丢失目标，切换状态到Protal</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ProtalState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，在继承了“非巡逻”的状态中实现自己的特殊行为即可。我们通常把这种状态机叫做层次状态机，一个状态有一个父状态，当有一个事件进来的时候，如果子状态不处理它，那么沿着继承链传给它的父状态来处理。</p><p>即使状态模式已经在一定程度上解耦了状态机的复杂代码，但在实际项目中，我们随时可能增加新状态、减少状态或者改变状态之间的迁移关系，如果状态越来越多，任何一点小修改都会产生很大的工作量（例如我们需要维护新的状态类）。</p><h1 id="行为树-behavior-tree">行为树(Behavior Tree)</h1><p><img src="https://user-images.githubusercontent.com/8220843/70063424-b20b3700-1622-11ea-8c58-102322c2a88b.png" alt="可视化行为树编辑器"><br><strong>行为树</strong>（Behavior Tree）是一种基于<strong>树结构</strong>的行为模型。它以树状的方式描述了对象的行为决策过程。行为树由多个节点组成，每个节点代表一个具体的行为或决策。节点之间通过连接关系形成树状结构，决定了对象在特定情况下应该执行哪些行为。通过遍历行为树，对象可以根据节点的逻辑规则来选择合适的行为进行执行。行为树则适合用于描述对象的<strong>复杂行为决策过程</strong>，例如角色在特定情况下应该采取何种行为（如追逐、逃避、攻击等）。</p><p>作为一种树，行为树由三种节点构成，每个节点都有<font color="green"><strong>成功</strong></font>、<font color="red"><strong>失败</strong></font>和<font color="orange"><strong>运行中</strong></font>三种返回值。</p><ul><li><strong>行为节点</strong>（Task）<br>行为树的叶子节点，代表了 AI 的具体行为（例如移动、攻击、什么也不做），包含初始化函数 Init 和行为逻辑函数 OnTick（每帧执行）。</li><li><strong>控制节点</strong>（Composite）<br>控制节点一般为行为树的中间节点，控制行为树的行为变换。具体来说有以下三种类型：<ul><li><strong>顺序节点</strong>（Sequence）<br>相当于<strong>与</strong>（and），依次执行所有子节点，若当前子节点返回成功，则继续执行下一个子节点；若子当前节点返回失败，则中断后续子节点的执行，并把结果返回给父节点。<br><img src="https://lifan.tech/images/behavior/behavior-sequences.png" width="200"></li><li><strong>选择节点</strong>（Selector）<br>相当于<strong>或</strong>（or），依次执行所有子节点，若当前子节点返回成功，则中断后续节点运行，并把结果返回给父节点。<br><img src="https://lifan.tech/images/behavior/behavior-selector.png" width="200"></li><li><strong>平行节点</strong>（Parallel）<br>依次执行所有子节点，无论失败与否，都会把所有子节点执行一遍。至于Parallel节点该返回什么值给父节点，这要看需求。比如：成功数 &gt; 失败数返回成功，否则返回失败。<br><img src="https://lifan.tech/images/behavior/behavior-parellel.png" width="200"></li><li><strong>随机节点</strong>（Random）<br>随机选择一个子节点来运行。</li></ul></li><li><strong>装饰节点</strong><ul><li><strong>逆变节点</strong>（Inverter）<br>对子节点的返回值取反，相当于<strong>非</strong>（not），它只会有一个子节点。</li><li><strong>成功节点</strong>（Succeeder）<br>不管其子节点返回何值，都会返回Success给父节点</li><li><strong>重复节点</strong>（Repeater）<br>重复执行n次子节点。</li><li><strong>重复直至失败节点</strong>（Repeat Until Fail）<br>重复执行子节点，直到失败为上；同样也有类似的重复直至成功节点这里就不列出了。</li><li><strong>执行一段时间</strong>（MaxTime）<br>重复执行子节点一段时间。</li></ul></li></ul><p>行为树的出现从根本上解决了前文提到的复杂代码维护的问题，它把每个行为作为一个原子项，任何人都可以决定 AI 的执行流程，作为程序的我们只需要集中精力根据需求增加新的行为，而不用关心具体流程、转换方式是什么样的。</p><p>不过在性能上，行为树的运算通过帧循环的 update 来驱动，每帧会遍历所有非行为节点，在树比较复杂时会造成资源浪费。并且对于简单的操作在行为树也要使用节点，相对比较繁琐。针对性能优化方面，如果用状态机实现简单状态的切换，进入某个状态（例如战斗）后再用行为树表示复杂行为逻辑，这会是一个有效的优化。尤其是怪物很多时，大部分时间段，大部分怪都处于巡逻状态，完全没有必要遍历行为树。</p><h1 id="参考资料">参考资料</h1><p>游戏编程模式（游戏设计与开发）<br><a href="https://zhuanlan.zhihu.com/p/540191047">https://zhuanlan.zhihu.com/p/540191047</a><br><a href="https://lifan.tech/2020/02/15/game/behavior-tree/">https://lifan.tech/2020/02/15/game/behavior-tree/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 游戏开发/通用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Gerstner Wave算法的海洋实现</title>
      <link href="/2022/09/29/%E5%9F%BA%E4%BA%8EGerstner%20Wave%E7%AE%97%E6%B3%95%E7%9A%84%E6%B5%B7%E6%B4%8B%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/09/29/%E5%9F%BA%E4%BA%8EGerstner%20Wave%E7%AE%97%E6%B3%95%E7%9A%84%E6%B5%B7%E6%B4%8B%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="介绍">介绍</h1><h2 id="sin-wave的局限">Sin Wave的局限</h2><p>在引入Gerstner Wave之前，人们更多使用正弦波来模拟海浪，因为正弦波天生具有类似海浪的形状。但它的局限也很明显，那就是波峰过于圆润，纵然有办法通过代数方法约束波峰的形状，但效果还是无法达到预期的尖锐。</p><p><img src="https://ae01.alicdn.com/kf/Sb8fb55c5f57b452dac273b30a9c6d677j.gif" alt="瞧这圆滚滚的波峰"></p><h2 id="什么是gerstner-wave">什么是Gerstner Wave</h2><p>Gerstner Wave是Sin Wave的后继者，到现在也是一种常用的用来模拟海洋波浪的算法。他的历史其实已经很古老了，可以追溯到1986年。相比于快速傅里叶变换(FFT)，Gerstner Wave方法的开销更小，效果也很真实，因此被更多的应用与游戏领域（FFT更适合影视行业，因为它的效果更好但开销更大）。<br>Gerstner Wave的公式如下：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>+</mo><mo>∑</mo><mo stretchy="false">(</mo><mrow><msub><mi>Q</mi><mi>i</mi></msub><msub><mi>A</mi><mi>i</mi></msub><mo>∗</mo><msub><mi>D</mi><mi>i</mi></msub><mi mathvariant="normal">.</mi><mi>x</mi><mo>∗</mo><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><msub><mi>D</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>+</mo><mi>φ</mi><mi>t</mi></mrow><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mo>+</mo><mo>∑</mo><mo stretchy="false">(</mo><mrow><msub><mi>Q</mi><mi>i</mi></msub><msub><mi>A</mi><mi>i</mi></msub><mo>∗</mo><msub><mi>D</mi><mi>i</mi></msub><mi mathvariant="normal">.</mi><mi>y</mi><mo>∗</mo><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><msub><mi>D</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>+</mo><mi>φ</mi><mi>t</mi></mrow><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>∑</mo><mo stretchy="false">(</mo><mrow><msub><mi>A</mi><mi>i</mi></msub><mo>∗</mo><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><msub><mi>D</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>+</mo><mi>φ</mi><mi>t</mi></mrow><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">P(x,y,t) = \begin{pmatrix}x + \sum({Q_{i}A_{i} * D_{i}.x * \cos(\omega_{i} D_{i}(x,y) + \varphi t}))  \\y + \sum({Q_{i}A_{i} * D_{i}.y * \cos(\omega_{i} D_{i}(x,y) + \varphi t}))  \\\sum({A_{i} * \sin(\omega_{i} D_{i}(x,y) + \varphi t})) \end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8100000000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">φ</span><span class="mord mathdefault">t</span></span><span class="mclose">)</span><span class="mclose">)</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">φ</span><span class="mord mathdefault">t</span></span><span class="mclose">)</span><span class="mclose">)</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">φ</span><span class="mord mathdefault">t</span></span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8100000000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中x和y表示任一顶点的水平面坐标（在unity中对应x和z），t表示时间。前两行代表顶点在xy平面做cos变化，第三行表示顶点的高度轴（在unity中为y）做sin变化。如果可视化Gerstner Wave中每一个顶点的运动情况，则有下图的结果：</p><p><img src="https://ae01.alicdn.com/kf/Sae98b3d8eb7d4dd687270602c24193b3C.gif" alt></p><p>这代表顶点在做圆周运动，这是因为x方向为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">cos</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span></span></span></span> 函数，高度方向为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>i</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">sin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span></span></span></span> 函数的原因。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>i</mi><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>c</mi><mi>o</mi><msup><mi>s</mi><mn>2</mn></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">sin^2 + cos^2 = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><h1 id="在unity中实现">在Unity中实现</h1><p>由上公式，我们可以剥离出几个控制变量：</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">Height</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span></span></span></span>，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">A_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，表示浪的高度</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>p</mi><mi>e</mi><mi>e</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">Speed</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span></span></span></span>，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\varphi_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，因为与时间相乘，表示浪的运行速度</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>，即周期，用来在后续表示<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi></mrow><annotation encoding="application/x-tex">\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>h</mi><mi>a</mi><mi>r</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">Sharp</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">h</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">p</span></span></span></span>，即尖锐程度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">Q_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，控制浪尖的尖锐程度</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi><mi>a</mi><mi>v</mi><mi>e</mi><mi>D</mi><mi>i</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">WaveDir</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>，即浪的运动方向(Wave Direction)</li></ul><p>为了避免float类型的变量太多导致材质参数过多，这回我把Height\Speed\T\Sharp封装到了一个vec4变量中</p><p><img src="https://ae01.alicdn.com/kf/S6931d0a23c4e4530a38590d28235443bI.jpg" alt="用到了group一组节点的功能，可以起到注释的作用"></p><p>其余渲染的部分可以参照上一篇文章(水体渲染)，这里用模型高度插值加了一个浪尖白沫，其他是一样的。</p><h2 id="步骤">步骤</h2><ol><li>利用已有变量计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi></mrow><annotation encoding="application/x-tex">\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">Q_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi><mo>=</mo><mfrac><mrow><mn>2</mn><mi>π</mi></mrow><mi>T</mi></mfrac></mrow><annotation encoding="application/x-tex">\omega = \frac{2\pi}{T}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 就不用多说了，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mi>i</mi></msub><mo>=</mo><mfrac><mrow><mi>S</mi><mi>h</mi><mi>a</mi><mi>r</mi><mi>p</mi></mrow><mrow><mi>ω</mi><mo>∗</mo><mi>A</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">Q_{i} = \frac{Sharp}{\omega * A}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.277216em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="mbin mtight">∗</span><span class="mord mathdefault mtight">A</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">Q_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是控制波浪陡度的参数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">Q_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为0表示通常的滚动正弦波，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mi>i</mi></msub><mo>=</mo><mfrac><mn>1</mn><mrow><mi>ω</mi><mo>∗</mo><mi>A</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">Q_{i} = \frac{1}{\omega * A}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="mbin mtight">∗</span><span class="mord mathdefault mtight">A</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>表示尖峰，加入sharp控制尖锐程度</li><li>计算x、z和y的部分，组装乘vec3后与Position相加<br>Gerstner Wave的公式已经给出，现在也计算好了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi></mrow><annotation encoding="application/x-tex">\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">Q_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，所以直接组合公式即可。计算完成后将x、y、z的结果组装成Vec3，与Position节点相加后输出<br><img src="https://ae01.alicdn.com/kf/S45048c2064c54cf8afef24307b13c9d2y.jpg" alt></li></ol><p>调整过参数后一层Gerstner Wave效果：<br><img src="https://ae01.alicdn.com/kf/Sc8d49de73a3e42d39c6fa40e595aeebbo.gif" alt="一层Gerstner Wave"></p><p>叠加一层的效果比较一般，因为只有一层波浪的效果。但是可以设置不同参数（例如浪速、浪的方向）后叠加第二个方向的波浪。下图是叠加两层Gerstner Wave效果</p><p><img src="https://ae01.alicdn.com/kf/Sbbeb27aa98054ea694bf1eb8baa54978L.gif" alt="把SceneColor乘上了水色，看起来更海洋一些"></p><p>给小船加上动画，有內味了：</p><p><img src="https://ae01.alicdn.com/kf/S0eed0c9febdb4b9c820dd0ae82bfd6a3q.gif" alt="最终效果"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> ShaderLab </tag>
            
            <tag> shader </tag>
            
            <tag> demo </tag>
            
            <tag> 水体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水面、波浪、白沫和焦散</title>
      <link href="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/"/>
      <url>/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class="note info simple"><p><strong>请注意</strong><br>由于微博图床外链失效，本文部分图片无法获取</p></div><h1 id="介绍与准备">介绍与准备</h1><p>我最近打算开始做毕设项目的场景啦XD！这个项目的名字叫元素宇宙(Elemental Universe)，是一个化学元素拟人世界观下的小宇宙的故事，目前只有我一个人在做，第一步是搭场景。主场景打算用polyBrush磨出来，其中有一些湖泊和海洋。海洋部分我打算用GerstnerWave的方法来做，湖泊部分采用本文所介绍的方法（当然，还有很多可以改进的地方。有改进的部分会在“更新说明”里提及）。</p><p>废话交代完了，现在正式开始吧：</p><p>首先，准备一个细分好的平面（因为我们需要一定数量的顶点）作为水面。在这个项目中我使用的是：</p><p><img src="https://ae01.alicdn.com/kf/S4692442a6627441b8f9dc376338fa8376.png" alt></p><p>演示模型来自Sketchfab，使用遵守CC版权协议。如下预览所示，模型原本的水面只是一块普通的、smooth值几乎设置为1的水平面：</p><div class="sketchfab-embed-wrapper"> <iframe title="Little Pond & fish" frameborder="0" allowfullscreen mozallowfullscreen="true" webkitallowfullscreen="true" allow="autoplay; fullscreen; xr-spatial-tracking" xr-spatial-tracking execution-while-out-of-viewport execution-while-not-rendered web-share src="https://sketchfab.com/models/4f091bcb17ce42ee9a7e678a16ddc349/embed"> </iframe> <p style="font-size: 13px; font-weight: normal; margin: 5px; color: #4A4A4A;"> <a href="https://sketchfab.com/3d-models/little-pond-fish-4f091bcb17ce42ee9a7e678a16ddc349?utm_medium=embed&utm_campaign=share-popup&utm_content=4f091bcb17ce42ee9a7e678a16ddc349" target="_blank" style="font-weight: bold; color: #1CAAD9;"> Little Pond & fish </a> by <a href="https://sketchfab.com/motpanda?utm_medium=embed&utm_campaign=share-popup&utm_content=4f091bcb17ce42ee9a7e678a16ddc349" target="_blank" style="font-weight: bold; color: #1CAAD9;"> Kenny Kwok. </a> on <a href="https://sketchfab.com?utm_medium=embed&utm_campaign=share-popup&utm_content=4f091bcb17ce42ee9a7e678a16ddc349" target="_blank" style="font-weight: bold; color: #1CAAD9;">Sketchfab</a></p></div><h1 id="波浪">波浪</h1><p>波浪的基本原理是顶点动画，通过修改水面顶点y值(高度)实现，这也是为什么前文提到我们需要一块顶点数比较多的面，越多的顶点意味着越高的波浪精细程度。</p><p>我们现在希望的事情是：水面能够上下波动形成波浪。对于湖泊这样较为波澜不惊的水域，用GerstnerWave模拟的话浪尖太尖，不太合适。想要圆滑一点的波浪，直接用sin的效果更好。</p><p>可以直接对顶点的模型空间坐标的一个分量（譬如x）使用sin函数计算进行模拟，如下所示。其中Height控制浪高，Speed控制波浪起伏速度，Time表示不断递增的时间，vert表示模型空间的顶点。</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>y</mi><mo>+</mo><mo>=</mo><mi>H</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo>∗</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>v</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>x</mi><mo>∗</mo><mi>T</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo>∗</mo><mi>S</mi><mi>p</mi><mi>e</mi><mi>e</mi><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">vert.y += Height * sin(vert.x * Time * Speed)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">+</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mclose">)</span></span></span></span></span></p><p>但如果顶点足够密的话会发现这个波浪是沿着x方向走的，如果把vert.x替换成vert.z就是沿着z方向的浪。相加之后浪就是斜着走的了。我自己是觉得斜着的浪更好看一些吧（直上直下总觉得哪里怪怪的），所以最终采用的公式是：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>y</mi><mo>+</mo><mo>=</mo><mi>H</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo>∗</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>v</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>x</mi><mo>+</mo><mi>v</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>z</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>T</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo>∗</mo><mi>S</mi><mi>p</mi><mi>e</mi><mi>e</mi><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">vert.y += Height * sin((vert.x + vert.z) * Time * Speed)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">+</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mclose">)</span></span></span></span></span></p><p>在shader graph中，它表示为：</p><img src="https://tva4.sinaimg.cn/large/006UcwnJly1h65euevlmxj30uc0c5q5a.jpg" alt="image" width="1092" data-width="1092" data-height="437"><p>最终连接到VertexShader的Position上，波浪搞定。</p><h1 id="水域分层与浮沫效果">水域分层与浮沫效果</h1><p>波浪完成之后，现在的水面是一种单色调的、不透明的、会动的面。</p><p><img src="https://ae01.alicdn.com/kf/S69deed0922c746a38b7c54834bc82de4n.png" alt></p><p>而见过一般水域的你都会认为一个漂亮的水域应该是下图的样子：</p><p><img src="https://ae01.alicdn.com/kf/Saf5e78cc5f124768bc44ba1f487fab48D.png" alt="我想去度假"></p><p>这片水域的特点可以概括为以下几点：</p><ol><li>有微微起伏的起伏</li><li>水域分层，浅层的水的颜色也更透亮、深层的水则更深沉</li><li>岸边伴随着白色的浮沫</li><li>水下的物体由于光的折射而扭曲</li></ol><p>其中波浪部分我们已经实现了，现在开始实现水域分层。</p><h2 id="水域分层">水域分层</h2><p>水域分层体现在越浅的水的颜色越透亮、越深的水颜色更深沉，颜色与深度有关。</p><p><img src="https://ae01.alicdn.com/kf/S2a6d93e321774c3c9df197cdbde622cdS.png" alt="海洋调色盘, created by Sherwin-Williams"></p><p>如果获取到水域的深浅情况，就可以根据水深对颜色进行插值了。怎么求水深呢？假设水面顶点经过MV矩阵处理完的坐标为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\begin{pmatrix}x  \\y  \\z \\1 \end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span>现在我们有：</p><ol><li>相机的深度图(Z-buffer)，一张黑白的图片，表示每个绘制出来的像素的深度值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mfrac><mrow><mi>z</mi><mo stretchy="false">(</mo><mi>F</mi><mi>a</mi><mi>r</mi><mo>+</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><mo>⋅</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi><mo>⋅</mo><mi>F</mi><mi>a</mi><mi>r</mi></mrow><mrow><mi>z</mi><mo stretchy="false">(</mo><mi>F</mi><mi>a</mi><mi>r</mi><mo>−</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{\frac{z(Far + Near)+2 \cdot Near \cdot Far}{z(Far - Near)}+1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7579em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4129em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.6864500000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0377857142857143em;"><span style="top:-2.640785714285714em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5020714285714285em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mclose mtight">)</span><span class="mbin mtight">+</span><span class="mord mtight">2</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5377857142857143em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li>原始(raw)屏幕空间位置的数据，从相机出发获取每一点的世界空间深度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">-z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></li></ol><p>这里Z-Buffer里的值是非线性的，需要转换成眼空间下的线性深度值进行计算，在ShaderLab中使用的是LinearEyeDepth函数。如果我们把眼空间的场景深度减去原始(raw)屏幕空间位置的alpha值，就能获取到一个差值对深层水的颜色与浅层水的颜色进行插值。LinearEyeDepth的底层推导过程可以参考：<a href="https://zhuanlan.zhihu.com/p/157863844">https://zhuanlan.zhihu.com/p/157863844</a><br><img src="https://tva4.sinaimg.cn/large/006UcwnJly1h6665r2j4pj30p80dotce.jpg" alt="image" width="400" data-width="908" data-height="492"></p><p>如果你觉得这个插值太刚硬了，可以加一个指数去调节，让颜色的过渡更平滑（这是我在刚做这个效果时没意识到的一个地方）。或者可以干脆新添加一个变量“陡峭程度”steep：</p><img src="https://tva3.sinaimg.cn/large/006UcwnJly1h666g1tvl3g30pd0ct1kz.gif" alt="steed" width="400" data-width="913" data-height="461"><p>目前为止，fragment部分的shader graph长下图这样(请不要在意那些多出来的线，与后续步骤有关)。现在我们要在水域分割的基础上添加浮沫的效果啦。</p><p><img src="https://ae01.alicdn.com/kf/Sd28657e9e80c4052b50046d739726f75L.png" alt="片元着色器图"></p><div class="note info simple"><p><strong>请注意</strong><br>如果要获取深度图，需要在相机渲染设置里开启Depth Texture选项<br><img src="https://ae01.alicdn.com/kf/S170180ee88744e60ac7af1a4ec4914882.png" alt></p></div><h3 id="screenposition节点的模式">ScreenPosition节点的模式</h3><h4 id="default模式">default模式</h4><p>光栅化的章节里我简单画了一个屏幕坐标系，当时以屏幕左下角为原点建系：<br><img src="https://ae01.alicdn.com/kf/Sc75208253a6042b4863c4b7c41fa11efo.png" alt="屏幕坐标系"></p><img src="https://ae01.alicdn.com/kf/S7b1624e719aa46148fc70b8517bc6db4o.png" alt="ScreenPosition的default模式" width="300" data-width="918" data-height="513"><p>事实上，default模式的屏幕空间坐标系也是这样建的。如果把ScreenPosition连到baseColor上输出，就能得到上图右所示的情况。该模式下节点只包含了屏幕上任何一像素的横纵坐标值。</p><h4 id="center模式">center模式</h4><p>center模式较于default模式将原点移动到了屏幕中心，该模式下节点依然只包含了屏幕上任何一像素的横纵坐标值。</p><img src="https://tva3.sinaimg.cn/large/006UcwnJly1h65ylh7odgj30pi0e90y7.jpg" alt="image" width="300" data-width="918" data-height="513"><h4 id="tile模式">tile模式</h4><p>“tile”的意思是平铺。以屏幕中心为原点，每256*256个像素作为一个单元进行平铺，该模式下节点依然只包含了屏幕上任何一像素的横纵坐标值。</p><img src="https://ae01.alicdn.com/kf/S53e001abf59e4d1e95a2e670e62c7847s.png" alt="ScreenPosition的tile模式" width="300" data-width="918" data-height="513"><h4 id="raw模式">raw模式</h4><p>raw模式即原始数据模式，与前面提到的三种模式都不同。raw模式是数据指每个顶点经过MVP矩阵变换之后、还未进行齐次除法的信息。第四个分量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span>，或者说<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>，代表了世界空间的深度，或者说眼空间深度(eye-space depth)。<br>为什么？因为:</p><ol><li>顶点数据在MV矩阵处理过后为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\begin{pmatrix}x  \\y  \\z \\1 \end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span>，其中w分量不受平移、旋转、缩放的影响，依然是1。这里的z的绝对值代表了点到相机的深度距离。</li><li>投影矩阵P为：</li></ol><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi>cot</mi><mo>⁡</mo><mfrac><mrow><mi>F</mi><mi>O</mi><mi>V</mi></mrow><mn>2</mn></mfrac></mrow><mrow><mi>A</mi><mi>s</mi><mi>c</mi><mi>e</mi><mi>p</mi><mi>t</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cot</mi><mo>⁡</mo><mfrac><mrow><mi>F</mi><mi>O</mi><mi>V</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mrow><mi>F</mi><mi>a</mi><mi>r</mi><mo>+</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi></mrow><mrow><mi>F</mi><mi>a</mi><mi>r</mi><mo>−</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi></mrow></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mrow><mn>2</mn><mo>⋅</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi><mo>⋅</mo><mi>F</mi><mi>a</mi><mi>r</mi></mrow><mrow><mi>F</mi><mi>a</mi><mi>r</mi><mo>−</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">P = \begin{pmatrix}   \frac{\cot{\frac{FOV}{2}}}{Ascept}    &amp; 0                       &amp; 0                                 &amp; 0 \\   0                                      &amp; \cot{\frac{FOV}{2}}    &amp; 0                                 &amp; 0 \\   0                                      &amp; 0                       &amp; -\frac{Far + Near}{Far - Near}    &amp; -\frac{2 \cdot Near \cdot Far}{Far - Near} \\   0                                      &amp; 0                       &amp; -1                                &amp; 0\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:5.4000699999999995em;vertical-align:-2.4500349999999997em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.950035em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.4999950000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.0950050000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.6900150000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.7100150000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.950035000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.925183em;"><span style="top:-4.925183em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.161265em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">A</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5508em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mtight">c</span><span class="mtight">o</span><span class="mtight">t</span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8720928571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.571744em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.339413em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.0960819999999998em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4251830000000005em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.925183em;"><span style="top:-4.925183em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.571744em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mop">cot</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span style="top:-2.339413em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.0960819999999998em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4251830000000005em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.925183em;"><span style="top:-4.925183em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.571744em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.339413em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.0960819999999998em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4251830000000005em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.925183em;"><span style="top:-4.925183em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.571744em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.339413em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.0960819999999998em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4251830000000005em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.950035em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.4999950000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.0950050000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.6900150000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.7100150000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.950035000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><ol start="3"><li>经过计算，顶点坐标变成了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mfrac><mrow><mi>cot</mi><mo>⁡</mo><mfrac><mrow><mi>F</mi><mi>O</mi><mi>V</mi></mrow><mn>2</mn></mfrac></mrow><mrow><mi>A</mi><mi>s</mi><mi>c</mi><mi>e</mi><mi>p</mi><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mrow><mi>cot</mi><mo>⁡</mo><mfrac><mrow><mi>F</mi><mi>O</mi><mi>V</mi></mrow><mn>2</mn></mfrac></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mo>−</mo><mi>z</mi><mo stretchy="false">(</mo><mi>F</mi><mi>a</mi><mi>r</mi><mo>+</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi><mo stretchy="false">)</mo><mo>−</mo><mn>2</mn><mo>⋅</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi><mo>⋅</mo><mi>F</mi><mi>a</mi><mi>r</mi></mrow><mrow><mi>F</mi><mi>a</mi><mi>r</mi><mo>−</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi></mrow></mfrac></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>z</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\begin{pmatrix}x { \frac{\cot{\frac{FOV}{2}}}{Ascept}} \\y{\cot{\frac{FOV}{2}}}  \\\frac{-z(Far + Near)-2 \cdot Near \cdot Far}{Far - Near} \\-z \end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.488035em;vertical-align:-2.4940175em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.950035em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.4999950000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.0950050000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.6900150000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.7100150000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.950035000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9940175em;"><span style="top:-4.9940175em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.161265em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">A</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5508em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mtight">c</span><span class="mtight">o</span><span class="mtight">t</span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8720928571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span style="top:-3.6405784999999997em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord"><span class="mop">cot</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span><span style="top:-2.2705785em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mclose mtight">)</span><span class="mbin mtight">−</span><span class="mord mtight">2</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.0272475000000003em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4940175em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.950035em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.4999950000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.0950050000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.6900150000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.7100150000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.950035000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span></span></span></span></span>。</li><li>可见<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span>变成了点到相机的深度距离，或者说眼空间深度(eye-space depth)。</li></ol><blockquote><p>在正交模式下，由于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mrow><mi>o</mi><mi>r</mi><mi>t</mi><mi>h</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mrow><mi>A</mi><mi>s</mi><mi>c</mi><mi>e</mi><mi>p</mi><mi>t</mi><mo>⋅</mo><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mrow><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mn>2</mn><mrow><mi>F</mi><mi>a</mi><mi>r</mi><mo>−</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi></mrow></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mrow><mi>F</mi><mi>a</mi><mi>r</mi><mo>+</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi></mrow><mrow><mi>F</mi><mi>a</mi><mi>r</mi><mo>−</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">P_{orth} = \begin{pmatrix}\frac{1}{Ascept \cdot Size}    &amp; 0  &amp; 0    &amp; 0 \\0   &amp; \frac{1}{Size}    &amp; 0                        &amp; 0 \\0                              &amp; 0                 &amp; -\frac{2}{Far - Near}    &amp; -\frac{Far + Near}{Far - Near} \\0                              &amp; 0                 &amp; 0 &amp; 1\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:5.006986em;vertical-align:-2.253493em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.753493em;"><span style="top:-4.908385em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">A</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">t</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mord mathdefault mtight">e</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.5821689999999995em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.349838em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.106507em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.253493em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.753493em;"><span style="top:-4.908385em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.5821689999999995em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mord mathdefault mtight">e</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.349838em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.106507em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.253493em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.753493em;"><span style="top:-4.908385em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.5821689999999995em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.349838em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.106507em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.253493em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.753493em;"><span style="top:-4.908385em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.5821689999999995em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.349838em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.106507em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.253493em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span>始终为1。</p></blockquote><p>可见这个结果与顶点自身有关，因为波浪中控制顶点进行运动，所以将ScreenPosition连到baseColor上输出的话结果是在不停地改变着的：</p><img src="https://tva4.sinaimg.cn/large/006UcwnJly1h65zecrlawg315u0mk1l5.gif" alt="raw" width="300" data-width="1506" data-height="812"><h2 id="浮沫">浮沫</h2><img src="https://tva4.sinaimg.cn/large/006UcwnJly1h666qcdcmij30xc0m8x0h.jpg" alt="image" width="500" data-width="1200" data-height="800"><p>浮沫（或者说白沫）指的是水域靠近岸边时产生的一系列白色泡沫边缘部分，常见于海边，适当的浮沫会让水域更生动。在前面的水域划分部分里，其实我们已经得到了被着色为浅水的部分，这部分正好对应岸边“应当聚集浮沫”的地方。那我们拿这个区域与浮沫的贴图相乘不就好了吗？没错。</p><p>可以找心仪的噪声来模拟波浪，不同的噪声可以获得不一样的波浪效果：</p><p><img src="https://tva4.sinaimg.cn/large/006UcwnJly1h667eqrcvzg30pd0ctx6q.gif" alt="foam1" width="300" data-width="913" data-height="461" style="display:inline"><img src="https://tva3.sinaimg.cn/large/006UcwnJly1h667fonrxkg30pd0ct7wk.gif" alt="foam2" width="300" data-width="913" data-height="461" style="display:inline"></p><p>首先，我们要让浮沫能够**“动起来”<strong>。在把噪声纹理导入之后，使用Time节点修改纹理的UV偏移量就能实现。因为波浪的方向是斜着的，所以直接乘Time就行。这里我们可以给Time乘一个</strong>浮沫速度<strong>的变量以</strong>控制噪声的运动速度**。同时，可以加一个变量<strong>浮沫缩放</strong>用来<strong>控制噪声的缩放大小</strong>。在Shader Graph中可以直接用TileAndOffset节点实现：</p><img src="https://tva3.sinaimg.cn/large/006UcwnJly1h6690cl21og30o009o1kx.gif" alt="noise" width="664" data-width="864" data-height="348"><div class="note info simple"><p><strong>请注意</strong><br>如果要得到正确的、连续的贴图偏移/缩放效果，需要在贴图设置里修改平铺模式为Reapeat<br><img src="https://tva4.sinaimg.cn/large/006UcwnJly1h668eqtrzfj30bp013glg.jpg" alt="image"></p></div><p>现在，让噪声与浮沫水域（和浅水域很类似，但你可以自己定义一个FoamArea参数取代原本的Depth用来控制浮沫范围）部分相乘，得到的结果再与浮沫颜色根据浮沫水域范围进行插值（用来控制噪声的消隐）：</p><img src="https://ae01.alicdn.com/kf/S09c6cb2402104b63a3c38840a8994b92G.png" width="400" data-width="904" data-height="457"><p>好丑啊！！！本身就模糊的噪声被直接贴上来了，各种意义上都有失美感。我们可以用Step函数滤掉一部分，获得一个较硬的浮沫边缘：</p><img src="https://ae01.alicdn.com/kf/S70bcff758bc54c61bf50bc61b53d59cfV.png" width="400" data-width="953" data-height="308"><p>已经搞定了，不是吗？而且由于我们设置了独立于浅水域的浮沫水域，可以设置浮沫的范围：</p><img src="https://ae01.alicdn.com/kf/Sb99b8aae2b444fe2a6901178c46ead3b0.gif" alt="area" width="912" data-width="912" data-height="348"><img src="https://ae01.alicdn.com/kf/S94678975df4f4a4584d7a615feb774e49.png" width="1297" data-width="1297" data-height="462"><h1 id="水体折射">水体折射</h1><p>现在的水体虽然已经能够展示浮沫和深浅水域了，但是我们没法透过水域看到湖底的东西，也没有折射效果。根据光学原理，光在穿过不同介质的时候会发生折射现象，加上水面的扭曲，我们看到的东西不会是这么宁静的。所以我们要做的事情是：</p><ol><li>增加折射效果（晃动水底）</li><li>增加扭曲效果（噪声扭曲）</li></ol><h2 id="晃动水底">晃动水底</h2><p>把Default模式的ScreenPosition加上SceneColor节点之后、与浅水域颜色进行插值再输出到水面上，会得到水底的环境（现在我们终于能看清这条鱼长什么样子了）：</p><img src="https://ae01.alicdn.com/kf/S1ecfa77607f44b07a8cba99fd30ca4b2p.png" alt="挺可爱的" width="400" data-width="822" data-height="468"><p>既然要晃动水底实现折射的效果，理所应当的我们会想到使用一个周期函数进行摇晃，而最常见的周期函数就是sin。把Time节点的sin（需要自行调整一下大小）与ScreenPosition相加之后，得到了这样的效果：</p><img src="https://tva4.sinaimg.cn/large/006UcwnJly1h66auzlycbg30pb09ob2a.gif" alt="sin" width="500" data-width="911" data-height="348"><p>我们的水面也没有晃的那么厉害，折射所看到的box的虚影应该至少在晃动的同侧。可以把sin函数的范围从[-1,1]映射到[0,1]，保证同侧：</p><img src="https://ae01.alicdn.com/kf/S229563591b9441c6bfc1f54c3c579553w.gif" width="500" data-width="910" data-height="348"><img src="https://tva2.sinaimg.cn/large/006UcwnJly1h66b4bf1w5j30wz0aptaj.jpg" alt="image" width="1187" data-width="1187" data-height="385"><h2 id="噪声扭曲">噪声扭曲</h2><p>现在就是最后一步，也就是扭曲水底的映像，得到水体波动扭曲的效果。实现方法是通过噪声生成法线(NormalFromHeight节点)，与ScreenPosition节点相加，再输出到片元着色器的base color节点上。诶，为什么Normal不是输出到Normal节点呢？因为NormalFromHeight节点使用的是屏幕空间求导得到节点（这也是为什么我们能把ScreenPosition与之相加），这在顶点着色器中不可用。</p><img src="https://tva1.sinaimg.cn/large/006UcwnJly1h66dfwinp2g30pa09o7wh.gif" alt="扭曲" width="500" data-width="910" data-height="348"><img src="https://ae01.alicdn.com/kf/S434eff5b821242bb98bfada9dc44d5cex.png" alt="着色器图" width="1263" data-width="1263" data-height="574"><p>我们几乎已经全部完成了。现在，把水体结果与水域分割、浮沫相加，再用saturate规范一下(因为我发现浮沫在开启bloom效果的情况下特别亮，说明有值太大了)：</p><img src="https://tva2.sinaimg.cn/large/006UcwnJly1h66dpe6b6sg30pa09o1ky.gif" alt="目前的效果" width="500" data-width="910" data-height="348"><img src="https://ae01.alicdn.com/kf/S0e5cb458451c4e7ca9ce69a62853d577Y.png" alt="着色器图" width="1918" data-width="1918" data-height="945"><h1 id="更新说明">更新说明</h1><h2 id="2022-9-15-让水域分层面一起扭曲">2022/9/15 - 让水域分层面一起扭曲</h2><p><img src="https://tva2.sinaimg.cn/large/006UcwnJly1h66dpe6b6sg30pa09o1ky.gif" alt="almost" width="450" data-width="910" data-height="348" style="display:inline"> <img src="https://tva2.sinaimg.cn/large/006UcwnJly1h67q5ckx75g31660fie84.gif" alt="change" width="470" data-width="1518" data-height="558" style="display:inline"></p><p>分层的面没有和折射的部分一起扭曲，显得很奇怪，于是我把用来扭曲折射的部分(加到SceneColor前面的那一大串)加到了深度节点的uv接口。</p><h2 id="2022-9-15-为什么不加上焦散呢？">2022/9/15 - 为什么不加上焦散呢？</h2><img src="https://ae01.alicdn.com/kf/Scf892eeb5b6b48d882948552f796fcd6T.gif" alt="change2" width="470" data-width="1518" data-height="558"><p>焦散(Caustic)是一种光学现象。当观察游泳池或者其他清澈透亮的水体的时候，很容易在底部或者壁面发现这样的光纹，这就是焦散：</p><img src="https://ae01.alicdn.com/kf/S3e36038064314516b9a2807cb3c54a868.png" alt="caustic" width="400"><blockquote><p>A caustic is the envelope of light rays which have been reflected or refracted by a curved surface or object, or the projection of that envelope of rays on another surface.<br>焦散是由曲面引起的光反射。一般来说，任何曲面都可以表现得像一个透镜，将光线聚焦在一些点上，并将其散射到其他点上。玻璃和水是允许它们形成的最常见的介质.</p></blockquote><p>采用这篇博客提供的方法，可以通过一张贴图模拟出逼真的焦散效果：<a href="https://www.alanzucconi.com/2019/09/13/believable-caustics-reflections/">https://www.alanzucconi.com/2019/09/13/believable-caustics-reflections/</a></p><p>两次以不同程度的偏移来采样焦散噪声，并用min函数对两张贴图进行混合：</p><img src="https://ae01.alicdn.com/kf/Sb5ff4e47927a41b2a151080cce15fecdt.gif" alt="焦散效果" width="239" data-width="239" data-height="446"><p>让焦散的部分展示在浅水域，同时在uv采样时加上扭曲就ok力！</p>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> ShaderLab </tag>
            
            <tag> shader </tag>
            
            <tag> demo </tag>
            
            <tag> 水体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贴地雾效实现</title>
      <link href="/2022/02/07/%E8%B4%B4%E5%9C%B0%E9%9B%BE%E6%95%88%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/02/07/%E8%B4%B4%E5%9C%B0%E9%9B%BE%E6%95%88%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>  接上篇文章画的饼，这回我打算试着实现一下雾效，我们最终的目标就是实现类似下图的效果。当然，纪念碑谷中的不怎么被雾影响的方块和浸泡在雾气中的方块使用的应该是两种shader，他们不会混在一起。但如果我们要实现的是一个可以移动的场景呢？使用我想在纪念碑谷的静态贴地雾效上加点东西，即：当摄像机移动时，雾的范围会随着摄像机的移动而移动，始终做到远处模糊、近处清晰的效果。</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220206022120.png"><h1 id="思路">思路</h1><p>其实我们实现纪念碑谷中的这种雾效的思路和全局渐变非常类似。总结一下，主要有以下两点需求：</p><ul><li>离摄像机越远，雾气越浓，具体表现在物体整体与雾气的颜色相融</li><li>离摄像机越近，雾气越轻，具体表现在雾气很浅，几乎消失</li></ul><p>  即，离相机较远的物体如下左所示；离相机较近的物体如下右所示：</p><p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220206021225.png" style="display:inline"> <img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220206021327.png" width="300" style="display:inline"></p><p>  我们可以调整地平线（渐变中心位置）的值来实现这个效果。<strong>当一个物体离摄像机较近时，它的渐变中心也较低；反之则较高</strong>。</p><h1 id="实现">实现</h1><h2 id="变量">变量</h2><p>我们需要这么几个变量：</p><ul><li>渐变纹理</li><li>主色调</li><li>雾的颜色</li><li>雾的浓度</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Properties&#123;</span><br><span class="line">    _RampTex(&quot;渐变纹理&quot;, 2D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">    // 颜色设置</span><br><span class="line">    _UpColor(&quot;Main Color&quot;,Color)=(1,1,1,1)</span><br><span class="line">    _DownColor(&quot;Fog Color&quot;,Color)=(1,1,1,1)</span><br><span class="line">    // 雾气浓度</span><br><span class="line">    _Concentration(&quot;Fog Concentration&quot;, float) = 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顶点着色器">顶点着色器</h2><p>在顶点着色器中我们需要获取几组坐标：</p><ol><li>世界空间的顶点坐标</li><li>世界空间的顶点法线</li><li>裁剪空间的顶点坐标</li><li>观察空间的顶点坐标</li></ol><p>  在顶点着色器中，我们最关键的步骤是<strong>求出顶点和相机之间的距离</strong>。实现这个操作的方法是利用观察空间的坐标深度：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">v2f vert(appdata v)&#123;</span><br><span class="line">    v2f o;</span><br><span class="line">    // 获取观察空间坐标</span><br><span class="line">float3 cameraPos = mul(UNITY_MATRIX_MV,v.vertex).xyz;</span><br><span class="line">// 计算与相机距离</span><br><span class="line">o.distance = length(cameraPos);</span><br><span class="line">    </span><br><span class="line">    // 获取世界空间坐标</span><br><span class="line">    o.worldPos=mul(UNITY_MATRIX_M,v.vertex);</span><br><span class="line">    // 获取裁剪空间坐标</span><br><span class="line">    o.vertex = UnityObjectToClipPos(v.vertex);</span><br><span class="line"></span><br><span class="line">    o.worldNormal = normalize(mul((float3x3)UNITY_MATRIX_M, v.normal));</span><br><span class="line">    o.uv = TRANSFORM_TEX(v.texcoord, _RampTex);</span><br><span class="line">    return o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="片元着色器">片元着色器</h2><p>在片元着色器中，我们进行三个主要步骤：</p><ol><li>计算渐变纹理的映射</li><li>计算光照</li><li>雾气的渐变混合</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">float4 frag(v2f i) : SV_Target&#123;</span><br><span class="line">    // 渐变纹理</span><br><span class="line">    fixed3 worldN = normalize(i.worldNormal);</span><br><span class="line">    fixed3 worldLightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line">    fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line">    fixed halfLambert = 0.5 * dot(worldN, worldLightDir) + 0.5;</span><br><span class="line">    fixed3 diffuseColor = tex2D(_RampTex, fixed2(halfLambert, halfLambert)).rgb;</span><br><span class="line">    fixed3 diffuse = _LightColor0.rgb * diffuseColor;</span><br><span class="line"></span><br><span class="line">    // 计算光照</span><br><span class="line">    float NdotL = dot(i.worldNormal, _WorldSpaceLightPos0);</span><br><span class="line">    float light = clamp(NdotL * 0.237 + 0.763, 0, 1);</span><br><span class="line"></span><br><span class="line">    // 利用相机距离远近作为控制</span><br><span class="line">    _Concentration = _Concentration + i.distance;</span><br><span class="line">    // 混合</span><br><span class="line">    float4 fogCol = light * lerp(_DownColor, _UpColor, clamp( (i.worldPos.y - _Concentration) / 7.5, 0, 1));</span><br><span class="line">    float4 col = fixed4(ambient + diffuse + fogCol, 1.0);</span><br><span class="line">                </span><br><span class="line">    return col;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  最终效果和材质球控制演示如下所示：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/%E8%BF%91%E5%9C%B0%E9%9B%BE.gif"><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/%E8%BF%91%E5%9C%B0%E9%9B%BE%E6%BC%94%E7%A4%BA.gif"><h1 id="优化">优化</h1><p>  完成之后感觉好像看上去哪里不对。对比了一下纪念碑谷中的图之后，我意识到我的目标效果应该是贴地雾效，而不是全局雾效。即使物体距离摄像机比较远，他应该也只是底部的一部分被云雾覆盖住，而不是整个变成云雾的颜色。所以，我们应该在变量里加上一个“<strong>云雾地平线</strong>”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 最高雾气位置</span><br><span class="line">_Skyline(&quot;Skyline&quot;,float) = 0</span><br></pre></td></tr></table></figure><p>  之后，在片元着色器中对雾气浓度加上限制。由于测试过的数值都在0以下，所以选用了min函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_Concentration = min(_Concentration + i.distance, _Test);</span><br></pre></td></tr></table></figure><p>  这样，即使在很远的位置，较高的部分依然展现出原有的色彩：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220207010914.png"><p>再画个饼，下一篇文章打算研究一下几何形状的low poly风格海洋的实现。</p>]]></content>
      
      
      <categories>
          
          <category> 探索发现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> ShaderLab </tag>
            
            <tag> shader </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何正确地搞颜色？</title>
      <link href="/2022/02/04/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%90%9E%E9%A2%9C%E8%89%B2%EF%BC%9F/"/>
      <url>/2022/02/04/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%90%9E%E9%A2%9C%E8%89%B2%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="如何正确地搞颜色？">如何正确地搞颜色？</h1><div>&emsp;&emsp;如何正确地“搞颜色”？看到这里，你的脑海中是不是闪过了一些奇奇怪怪的东西？不，这是篇非常正经的科普！所以现在，让我来给大家看一张色图。很正经吧~这张图上的小可爱叫做色轮，它将是我们接下来的科普中的主角，现在请先记住它的样子吧！</div><img src="https://pic.rmb.bdstatic.com/bjh/c6bf82e971e2783b6980df061a08b4b1.png" width="300/"><div>&emsp;&emsp;本文中我将围绕色彩的基本知识、几种常见的配色方案逐一展开介绍。</div><h1 id="颜色理论与配色模式">颜色理论与配色模式</h1><h2 id="人类是如何看见颜色的？">人类是如何看见颜色的？</h2><div>&emsp;&emsp;在自然界中自然光从光源发出，到达物体的表面。大部分被照射到的物体会吸收掉其中的一部分光，将剩下的光线反射到我们的眼睛里，成为了我们所看到的这个物体的颜色。如果一个物体不吸收任何落在其表面的光线，也就是说呢它把所有照射在它身上的光线都原封不动的反射回去了，那么它在人眼看来就是白色的。而另一方面，如果一个物体吸收了所有照射到它表面的光，那么这个物体看起来就会是黑色的。</div><img src="https://pic.rmb.bdstatic.com/bjh/b480ce28be46b372a1ed74482347bfec.png"><div>&emsp;&emsp;这种成色原理被称为减色法，在多媒体领域中对应于CMYK颜色模型。在日常生活中，这种颜色模型广泛应用于打印机等需要在不会自然发光的物体上显示颜色的场合。这是因为物体不会自发光，所以我们所看到的它的颜色来自于油墨本身反射的光。</div><div>&emsp;&emsp;而另一种颜色模型，RGB颜色模型则相反。想必相对于CMYK，各位对RGB的了解更多一些。RGB三个字母分别代表红、绿和蓝，是光的三基色。RGB颜色模型是指将这三种颜色按不同的比例进行混合得到一种新的颜色。这种颜色模式广泛应用于电视、电脑、手机等能够主动发光的设备。</div><div>&emsp;&emsp;现在，你已经了解了两种最基本的颜色模式，要怎么把这些颜色组合出完美的颜色搭配呢？接下来，我们先欣赏几种由前人总结出来的搞颜色的模式吧！</div><h2 id="单色配色">单色配色</h2><img src="https://pic.rmb.bdstatic.com/bjh/24323722b582f671f39392aad2911f6e.png"><div>&emsp;&emsp;单色模式应该是看起来最和谐的配色模式了。通过的示例，你几乎感受不到色彩上的冲撞，整个画面带给人一种和谐、清新的感觉。</div><div>&emsp;&emsp;单色模式之所以呈现出这种和谐感，是因为它其实是由同一种基础颜色，也就是色相，经过一定的明暗变化得到其他颜色的集合，正如这张色轮所示。除了基础颜色之外，它不包含额外的颜色的干扰，因此看起来更加简单、干净和精致。但是单色配色模式的缺点也很明显，那就是它是一种缺乏变化的配色方式。</div><img src="https://pic.rmb.bdstatic.com/bjh/e5638f7f5f554c0232fc86ee32aa2c6b.png"><h2 id="互补配色">互补配色</h2><img src="https://pic.rmb.bdstatic.com/bjh/38cfbd8504c567cded02623447412703.png"><div>&emsp;&emsp;那，如果说单色配色模式干净悠远又和谐，那我们接下来要介绍的这种配色模式就要活泼许多。有人想猜一下接下来要介绍的是哪一种配色模式吗？可以在群里打字哦。</div><div>&emsp;&emsp;接下来我们要介绍的就是互补配色，也被称作对比配色。互补色能够给人以一种强烈的碰撞感。在色轮上，互补色正好处在色轮的两端，这意味着这两种颜色的冷暖属性、给人的感受是完全相反的。也就是说，当这两种颜色放在一起时，我们很容易注意到两种颜色带来的冲突，如果应用得当可以带来十分惊艳的效果。</div><div>&emsp;&emsp;比如UI设计师们喜欢用互补色来突出希望用户注意到的信息，一些画作也巧妙的利用了这种冲突来表现画面，让观众第一眼能落到设计师希望观众注意到的地方。它的缺点也是显而易见的，过于混乱的对比关系可能让人眼花缭乱。</div><img src="https://pic.rmb.bdstatic.com/bjh/9482b746b6a54319c60b5120d62ee66f.png"><h2 id="补色分割配色">补色分割配色</h2><img src="https://pic.rmb.bdstatic.com/bjh/e8b6855955ee10f3189a774fbf25a8df.png"><div>&emsp;&emsp;接下来我要介绍的是补色分割配色法。补色分割配色如上图所示，使用一个基础色以及两个在色轮上相互对称的次要颜色，共组一个窄边三角形；它会选取一个暖色和两个冷色、或一个冷色配合两个暖色。</div><div>&emsp;&emsp;与互补色不同，补色分割配色较为协调也给予柔和些的视觉感。一般来说，在三角形中窄角的颜色一般为主要色，另外两个次要颜色常作打光或强调色使用。这创建了一个比互补色方案更为微妙的配色，它和互补色有着同样的視觉效果，但又不会显得那么“冲撞”。通过色轮可以看到，补色分割配色本质上就是互补配色的一个变形或分支，但它有一个重要区别：它的色彩对比和视觉反差不如互补配色那般强烈和夸张。</div><img src="https://pic.rmb.bdstatic.com/bjh/7d171b27a38b906b6ae0f81d96a117ed.png"><h2 id="近似色配色">近似色配色</h2><img src="https://pic.rmb.bdstatic.com/bjh/7ac37794eb4e04dcd0e2e41d8778cce6.png"><div>&emsp;&emsp;下一种配色模式似乎兼备了前面提到的两种配色模式的优点，它不如单色模式那样过于单调，但也不像对比色那样激烈。灵活应用这种配色模式，你可以轻易设计出和谐又活泼的界面。这是什么呢？那么我们来到了第三种配色模式，近似色。</div><div>&emsp;&emsp;近似色是指没有太多对比的一组颜色，它们在色轮上相互靠近。这种配色模式可以说是无所不能的，我们先来看看近似色和单色之间的对比。不难发现，相对于单色而言，近似色包含了更多的色彩，但是近似色又没有打破颜色之间微妙的和谐与平衡。这使得近似色能表现得更加丰富多彩，适合需要更多多样性的设计。</div><div>&emsp;&emsp;同时，相对于互补色，近似色又要柔和得多，因此是被称作万金油的搭配模式。我们经常在各种场合见到近似色。</div><img src="https://pic.rmb.bdstatic.com/bjh/085a53e31be1db7aba6b77dcadaaf34e.png"><h2 id="三等分配色">三等分配色</h2><img src="https://pic.rmb.bdstatic.com/bjh/171d6bc610811d8d680399db3c8256a8.png"><div>&emsp;&emsp;接下来我要介绍的是三等分配色法。三等分色的三个颜色位置之间有平均的距离，彼此之间存在一定的对比关系。如此一来三个颜色皆为主要颜色，产生一种鲜艳、抢眼的效果。不过使用这种配色方案需要特别注重作品的色彩平衡。正因为每种颜色之间微妙的对比关系，这种配色方案对于需要在设计中对每种颜色创建出高对比度的画面很有用。但是如果平等的分配三种颜色，可能会让画面的冲击感太强而失去美感。</div><div>&emsp;&emsp;那么有没有例外情况呢？有。在类似暗含“均分”元素的画面中，比如说三个功能的按钮，平均分配三种颜色确实不成问题。但是画面一旦复杂，平均的分摊三种颜色就会变得混乱。</div><div>&emsp;&emsp;要正确的应用三等分配色，一般是在三种颜色中选择一个或两个颜色作为主色来压制其他颜色。主色作为画面中最为主要的颜色，再少量使用其他颜色作为蜻蜓点水般的辅助，或者简单地选择一个柔和的色调来覆盖其他两个颜色也是可以的。</div><img src="https://pic.rmb.bdstatic.com/bjh/f5b79bbd3b67288e9c066c87e28b3e14.png"><h2 id="矩形配色">矩形配色</h2><img src="https://pic.rmb.bdstatic.com/bjh/8aef488013f5bf2ed303dc568c415f23.png"><div>&emsp;&emsp;如果从色轮中选择两对相互对立的颜色，会获得怎么样的效果？这就是矩形配色，比三等分配色还要桀骜不驯的一种配色方式。矩形配色的四种颜色间并没有明显的主次关系，但由于两两对比，这种配色模式也有着鲜艳亮眼的效果。这些颜色结合起来可能给人强烈的视觉感，但是为了求最好的视觉效果，在设计之前需要事先构思和细心创作。</div><div>&emsp;&emsp;颜色越多，设计师往往就越难调和它们。矩形配色更常见与四个按钮这样的平均分配的情况，或者降低对比度相互混杂以达到一种“纷繁”的效果。</div><h1 id="颜色心理学">颜色心理学</h1><div>&emsp;&emsp;我们已经了解了一些配色的基本知识，那我们要怎么去选择合适的配色方案呢？在正式开始搞颜色之前，我们需要了解一些“颜色心理学”。很多人认为颜色的选择主要取决于设计师的品味和审美，然而色彩选择的过程要比看起来要复杂得多。正确的搞颜色，在设计中非常重要。我们来看下图的这张表格，我们发现对于不同的颜色，人们的感受是存在区别的。</div><img src="https://pic.rmb.bdstatic.com/bjh/c78db4caa90b77d777b98ceb33540a39.png"><div>&emsp;&emsp;例如，当我们谈论红色时，会发现这个颜色常常与激情、热血或者侵略、进攻的感觉联系在一起。红色是双面的，它不仅给人带来热爱、自信的感觉，也能让人们联想到愤怒，是一种非常引人注目的颜色。在设计中，红色的使用往往是吸引用户注意的一种有效方式。</div><div>&emsp;&emsp;再举一个例子，当我们说到绿色时，你脑海中出现了什么画面？即使不是第一反应想到的，我们也总能通过绿色联想到茂密的森林和生机勃勃的草地。绿色是一种充满活力的颜色，所以它并不适合用来装饰消极或悲观的图像。更多的时候，我们会选择灰色系来处理后者。</div><div>&emsp;&emsp;但是色彩心理学只能代表大多数人的感受，它无法避免一些人对某种颜色有其他的理解。比如说一些人一看到绿色就会联想到瘟疫、疾病和死亡。此外，由于文化上的差异，同一种颜色在不同的文化中可能代表不同的含义。例如白色在西方文化中是神圣、纯洁的，经常用在庄严神圣的场合，比如婚礼。这也是为什么西式婚礼新娘的婚纱通常是洁白的。而在中国传统文化中白色则是死亡的象征，比如我们常常说红白喜事，这里的“白喜事”指有家里有高寿老人过世。</div><div>&emsp;&emsp;所以呢，在选择颜色的时候不仅需要考虑我们希望观众看到我们搞的颜色时的心理反应，还需要考虑不同文化下颜色的特殊含义。</div><img src="https://pic.rmb.bdstatic.com/bjh/3607a5234c94b086532e1c2ab118b182.png"><h1 id="正确的搞颜色">正确的搞颜色</h1><div>&emsp;&emsp;现在我们已经了解了颜色配色的基础知识和色彩心理学，是时候开始正确的搞颜色了。然而，如何正确地选择第一个颜色呢? 正如前面提到的，颜色的选择非常重要，选错了颜色可能是致命的。那么，我们将从受众群体和主题的方面进行考虑。</div><div>&emsp;&emsp;如果考虑受众默认为所有群体，有人知道最“安全”的颜色是什么吗？答案是蓝色。我们可以非常轻易的在手机上找到以蓝色为主色调的应用，比如默认主题的QQ、支付宝、推特、Pixiv等等。为什么是蓝色呢？通过下图可以发现，不管是男性还是女性，喜欢蓝色的群体占比是最大的。这意味着选择蓝色能迎合大部分人的喜好。考虑一下不同国家的文化差异呢？我们会发现图表中罗列出来的几个国家最喜欢的颜色中占比最高的竟然也都是蓝色。从颜色心理学的角度出发，它深沉、给人创新和信任、安全的感觉，是一种让人舒服的颜色。</div><img src="https://pic.rmb.bdstatic.com/bjh/3d71514d8253d8b1817984a4a4ca745f.png"><img src="https://pic.rmb.bdstatic.com/bjh/9b4e0557f4a0ce85dc1455205ff1018f.png"><div>&emsp;&emsp;现在我们考虑考虑特殊的受众群体。如果受众群体主要是女性，那么可以考虑使用一些暖色调，给人带来浪漫和美好的感觉，比如粉色、紫色、红色等等。而相反的，如果受众群体以男性为主，可以考虑使用冷色，比如绿色、蓝色和黑色，这样能给用户带来一种冷静、深沉、科技感等等的感觉。而如果观众是儿童或年轻人，可以考虑使用互补色、三等分色、补色分割等配色方案，因为这些颜色相对活泼大胆。相反，如果观众主要是成年人，则比较朴素的单色或类似色可能更合适。</div><div>&emsp;&emsp;从主题来看，比如说如果一幅画或者一个设计的主题是体育运动，那么它的主色调往往和黄色、红色或绿色脱不开干系，因为前两种颜色让人感觉“充满活力和热情”，而绿色则给人一种充满活力和追求成功的感觉。另一方面，如果主题是工作学习，蓝色、绿色、紫色甚至黑色等冷色更合适，因为这些颜色能唤起一种智慧和成熟的感觉。</div><div>&emsp;&emsp;现在，你已经是一个成熟的人了，相信你在日后欣赏色图的时候能对着色图的配色模式展开合理的分析，同时也能应用今天学到的知识正确的搞颜色。谢谢大家，本文就到此结束啦。</div>]]></content>
      
      
      <categories>
          
          <category> 探索发现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 颜色心理学 </tag>
            
            <tag> 心理学 </tag>
            
            <tag> 设计 </tag>
            
            <tag> 用户体验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全局渐变效果实现</title>
      <link href="/2022/02/01/%E5%85%A8%E5%B1%80%E6%B8%90%E5%8F%98%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/02/01/%E5%85%A8%E5%B1%80%E6%B8%90%E5%8F%98%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>  我想试着实现一下下图中纪念碑谷中的全局渐变的效果。关于如何实现这种渐变效果之前和别人讨论过，一开始我认为是通过从下往上打光来实现的，后来同学说是利用了shader和雾。利用后者实现的效果更为缓和，而利用光照可能会造成底部过亮的问题，不好控制。</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220202030207.png" width="300/"><p>  为什么我管这种效果叫“全局渐变”呢？因为当我移动模型的时候，渐变的范围并不是固定在模型身上的，而是在世界空间的“某个位置”（如下图所示）。实际上，我们可以自行规定这个渐变地平线的位置，只需要在shader里加个控制变量就可以了。</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/%E6%B8%90%E5%8F%98.gif"><h1 id="实现">实现</h1><h2 id="变量">变量</h2><p>首先，我们需要这么几个变量：</p><ul><li>顶部的颜色</li><li>底部的颜色</li><li>渐变混合的程度</li><li>光照的强度</li><li>渐变地平线</li><li>渐变纹理</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Properties</span><br><span class="line">&#123;</span><br><span class="line">    // 光照的强度</span><br><span class="line">    _Contrast(&quot;Contrast&quot;,Range(0,1))=0.1</span><br><span class="line">    // 渐变纹理</span><br><span class="line">    _RampTex(&quot;渐变纹理&quot;, 2D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">    // 上下渐变色</span><br><span class="line">    _UpColor(&quot;UpColor&quot;,Color)=(1,1,1,1)</span><br><span class="line">    _DownColor(&quot;DownColor&quot;,Color)=(1,1,1,1)</span><br><span class="line">    // 渐变程度</span><br><span class="line">    _WorldYDeno(&quot;WorldYDeno&quot;,float)=0</span><br><span class="line">    // 渐变中心位置</span><br><span class="line">    _Skyline(&quot;地平线&quot;, float) = 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顶点着色器">顶点着色器</h2><p>在顶点着色器中我们需要获取几组坐标：</p><ol><li>世界空间的顶点坐标</li><li>世界空间的顶点法线</li><li>裁剪空间的顶点坐标</li></ol><p>世界空间的坐标和法线用于光照强度的控制；裁剪空间的坐标用于渐变的渲染</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">v2f vert(appdata v)&#123;</span><br><span class="line">    v2f o;</span><br><span class="line">    // 世界空间坐标</span><br><span class="line">    o.worldPo=mul(UNITY_MATRIX_M,v.vertex);</span><br><span class="line">    // 世界空间法线</span><br><span class="line">    o.worldNormal = normalize(mul((float3x3)UNITY_MATRIX_M, v.normal));</span><br><span class="line">    // 裁剪空间坐标</span><br><span class="line">    o.vertex = UnityObjectToClipPos(v.vertex);</span><br><span class="line">    o.uv = TRANSFORM_TEX(v.texcoord, _RampTex);</span><br><span class="line">    return o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="片元着色器">片元着色器</h2><p>在片元着色器中，我们进行三个主要步骤：</p><ol><li>计算渐变纹理的映射</li><li>光照强度</li><li>渐变混合</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">float4 frag(v2f i) : SV_Target&#123;</span><br><span class="line">    // 渐变纹理</span><br><span class="line">    fixed3 worldN = normalize(i.worldNormal);</span><br><span class="line">    fixed3 worldLightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line">    fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line">    fixed halfLambert = 0.5 * dot(worldN, worldLightDir) + 0.5;</span><br><span class="line">    fixed3 diffuseColor = tex2D(_RampTex, fixed2(halfLambert, halfLambert)).rgb;</span><br><span class="line">    fixed3 diffuse = _LightColor0.rgb * diffuseColor;</span><br><span class="line">    // 光照强度</span><br><span class="line">    float NdotL = dot(i.worldNormal, _WorldSpaceLightPos0);</span><br><span class="line">    float light = clamp(NdotL * _Contrast + (1 - _Contrast), 0, 1);</span><br><span class="line">    // 渐变混合</span><br><span class="line">    float4 col = fixed4(ambient + diffuse + light * lerp(_DownColor, _UpColor, clamp( (i.worldPos.y - _Skyline) / _WorldYDeno, 0, 1)), 1.0);</span><br><span class="line">    </span><br><span class="line">    return col;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  最终，我们可以得到如下的效果（暂未加上渐变纹理贴图）：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/%E6%B8%90%E5%8F%981.gif" width="500/"><p>  可以看出效果不太好，并且在细节上表现的很不自然，画面的颜色很单一。如果加上渐变纹理的话可以得到更好的细节效果：</p><p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220205233646.png" width="308/"><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220205233913.png" width="300/"></p><p>  好，就是这样了。实际上，我们还可以在较远的物体表面加上一层<strong>雾</strong>。有关于雾效的实现，在下一篇demo文章中将会尝试一下。最终我们的材质球面板和面板各属性的控制情况如下所示：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220206012239.png" width="400/"><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/%E6%B8%90%E5%8F%98%E6%BC%94%E7%A4%BA.gif">]]></content>
      
      
      <categories>
          
          <category> 探索发现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> ShaderLab </tag>
            
            <tag> shader </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序棋盘格效果实现</title>
      <link href="/2022/01/21/%E7%A8%8B%E5%BA%8F%E6%A3%8B%E7%9B%98%E6%A0%BC%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/01/21/%E7%A8%8B%E5%BA%8F%E6%A3%8B%E7%9B%98%E6%A0%BC%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>  为什么会写这篇文章呢…因为我已经在大大小小的场合中遇到三次相关的题目了，前几次答得挺不尽人意的。第一次是在剑心互娱的校招笔试上，要求画一个黑灰白三条杠（下左），第二次是字节的二面要求画一个棋盘格的效果（下右），还有一次忘了（</p><p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121194712.png" width="250" style="display:inline"><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121221514.png" width="250" style="display:inline"></p><p>  对于这两种效果，我们的思路其实是一样的（棋盘格只需要多一步加法）。</p><h1 id="开始绘制">开始绘制</h1><p>  怎么用程序画东西呢？我们在做材质的时候似乎一直是基于贴图进行处理的。实际上，我们是可以直接对纹理映射（texcoord节点）下手的，如果将其连接到根节点的base color，我们会得到如下画面：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121204917.png" width="300/"><p>  为什么是这个颜色？首先需要知道的是：texcoord只有uv两个量，而颜色具有三个分量。当我们默认第三个分量为0时，就会得到上述的颜色信息。而如果我们把第三个分量设置为1，就会得到：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121212036.png" width="300/"><h1 id="数学处理">数学处理</h1><h2 id="黑-灰-白">黑、灰、白</h2><p>  为了实现三条边、四条边甚至多边的情况，我们需要对texcoord进行缩放，这一步很简单，只需要让texcoord乘上一个用来控制的常量：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121212722.png" width="300/"><p>  然后，对texcoord的值进行取整（floor节点）。这一步的目的是将贴图“阶梯化”，方便后续实现黑白分条的效果。下图好像并没有出现理想的分条效果，因为黄色的部分的uv值已经超过1了，程序自动用1填补了原本的值：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121213058.png"><p>  接下来我们对uv坐标除以2，这样坐标对应的值就变成了0，0.5，1，1.5，2，…，灰色开始出现</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121213315.png"><p>  接下来，我们把u和v从这张红红绿绿的图里解码出来，单独输出R通道（u）的结果如下所示：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121213912.png"><p>  这就是我们要的黑灰白三条杠的效果了。</p><h2 id="黑白棋盘">黑白棋盘</h2><p>  我们将在三条杠的基础上实现棋盘效果。把R通道的信息和G通道相加：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121215821.png"><p>  结果很不尽人意，因为超出的部分都变成了1（也就是白色的块），盘上还有灰色的块。现在我们需要的是一个黑白的棋盘，也就是说我们的颜色只能有0和1。<br>  怎么实现黑白的效果呢？现在其实我们的数学结果其实是这样的：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121221040.png" width="300/"><p>  如果只保留小数点部分，我们就可以得到比较合适的图了，只不过现在看上去是白色的部分其实是<strong>值为0.5的灰色</strong>。</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121194843.png" width="300/"><p>  我们还需要进行最后一步，也就是*2的操作才能得到真正的黑白棋盘。对比上图的“黑灰棋盘”还是有点区别的。<br>  （其实我一开始写的时候忘记乘2了，因为这个灰色比较淡，又在黑色边上，一下子没看出来）</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121221514.png" width="300/"><p>  实际场景应用效果：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121222141.png">]]></content>
      
      
      <categories>
          
          <category> 探索发现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shader </tag>
            
            <tag> demo </tag>
            
            <tag> Unreal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>菲涅尔反射实现边缘光效果</title>
      <link href="/2022/01/17/%E8%8F%B2%E6%B6%85%E5%B0%94%E5%8F%8D%E5%B0%84%E5%AE%9E%E7%8E%B0%E8%BE%B9%E7%BC%98%E5%85%89%E6%95%88%E6%9E%9C/"/>
      <url>/2022/01/17/%E8%8F%B2%E6%B6%85%E5%B0%94%E5%8F%8D%E5%B0%84%E5%AE%9E%E7%8E%B0%E8%BE%B9%E7%BC%98%E5%85%89%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在之前的项目中，我从网上抓了一个用菲涅尔反射写的边缘光shader。经过自己的魔改之后，加上了法线等用在后续的项目中。现在我们回过头来探寻一下菲涅尔效应是如何用来实现边缘光的。<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/%E8%8F%B2%E6%B6%85%E5%B0%94.gif"></p><h1 id="参数">参数</h1><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220117132932.png"><p>我们有三个至关重要的参数：边缘光的颜色、边缘光强度和强度系数。</p><ul><li>边缘光颜色<br>这个没什么好说的，就是控制边缘光的颜色。但因为是<strong>光</strong>，所以当颜色调整为黑色时不论强度多少都是看不到效果的。</li><li>边缘光强度<br>这个值可以控制菲涅尔影响范围的大小，这个值越大，效果上越边缘化（上：强度为1.5；下：强度为4）。</li></ul><p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220117133226.png" width="105/"><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220117133245.png" width="100/"></p><ul><li>边缘光强度系数<br>这个值控制菲涅尔反射的反射强度，值越大，反射越亮，反之越暗（上：强度为1.5；下：强度为12）。代码里的注释有错，因为原先的代码的强度系数在内部被原作者定死了。</li></ul><p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220117134332.png" width="105/"><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220117134445.png" width="100/"></p><h1 id="片元着色器">片元着色器</h1><h2 id="边缘检测">边缘检测</h2><p>这一步是实现边缘光效果的核心。<br>首先我们来理清一下思路，如何进行边缘检测？其实很简单的一种方式就是通过视线方向和片元的法线方向点乘进行判断。当我们差不多正视一个片元的时候，夹角通常都是小于45°的。而片元越靠近边缘，与视线的夹角越大，最终达到视线相切的90°，再大就看不到了。<br>所以我们对视线和片元法线归一化之后进行点乘，可以得到：</p><ul><li>视线与法线相切，点乘的结果为0</li><li>视线与法线重合，点乘的结果为1</li><li>视线与法线的夹角在(0°, 45°)，点乘的结果在(0, 1)范围内</li></ul><p>于是我们得到一个信息：值越小，片元越靠近视线观察角度的边缘。我们可以对这个结果进行求反（用1减去值就好），得到更符合逻辑的结果。</p><h2 id="菲涅尔着色">菲涅尔着色</h2><p>我们已经有了求反过的点乘信息NdotV，接下来我们就需要把它展现在材质球上。我们可以定义一个叫fresnel的变量来简单的将NdotV和控制强度的变量相乘，再乘上边缘光的颜色：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">float fresnel = NdotV * _InSideRimIntensity;</span><br><span class="line">float3 Emissive = _InSideRimColor.rgb * fresnel; </span><br><span class="line">return fixed4(Emissive + diffuse + ambient, 1.0);</span><br></pre></td></tr></table></figure><p>我们已经可以得到一个初步的效果。但是不幸的是，不管我们怎么调整强度，反射环的面积似乎总是太大了，并且有一种雾蒙蒙的感觉：</p><p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220117141104.png" width="100/"><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220117141253.png" width="111/"></p><p>在另一篇文章（UE4 Materials 101：材质混合）中我们介绍了用指数提升对比度、缩小范围的方法。因此，我们可以引入一个变量来控制边缘光的强弱（并不是控制光强，而是控制了最大影响范围）。我们可以把代码改写成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float fresnel = pow(NdotV,_InSideRimPower) * _InSideRimIntensity;</span><br></pre></td></tr></table></figure><p>这样，我们就得到了不错的边缘光效果了。如果想在这个基础上加上边缘光的“呼吸”效果，可以引入sin(time.z)对光强进行调整。不过需要小心颜色超出1的情况，所以最好加一个max函数进行限制，或者自己拟好合适的三角函数曲线。</p><h2 id="源码">源码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line">    const fixed3 albedo = tex2D(_MainTex, i.uv).rgb * _MainColor.rgb;</span><br><span class="line">    // 环境光</span><br><span class="line">    const fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * albedo;</span><br><span class="line">    i.wold_normal = normalize(i.wold_normal);</span><br><span class="line">    // 获取世界空间的视角方向</span><br><span class="line">    float3 worldViewDir = normalize(_WorldSpaceCameraPos.xyz - i.vertexWorld.xyz);</span><br><span class="line">    // 获取世界空间的光照方向</span><br><span class="line">    fixed3 worldLightDir = normalize(_WorldSpaceLightPos0.xyz); </span><br><span class="line">    // 漫反射</span><br><span class="line">    const fixed3 diffuse = _LightColor0.rgb * albedo * max(0, dot(i.wold_normal, worldLightDir)); </span><br><span class="line"></span><br><span class="line">    /*核心步骤*/</span><br><span class="line">    // 计算法线方向和视角方向点积,约靠近边缘夹角越大，值约小，那就是会越在圆球中间约亮，越边缘约暗</span><br><span class="line">    half NdotV = max(0, dot(i.wold_normal, worldViewDir));</span><br><span class="line">    // 求反</span><br><span class="line">    NdotV = 1.0 - NdotV;</span><br><span class="line">    float fresnel = pow(NdotV, _InSideRimPower) * _InSideRimIntensity;</span><br><span class="line">    // 内边缘光自发光颜色</span><br><span class="line">    float3 Emissive = _InSideRimColor.rgb * fresnel;</span><br><span class="line"></span><br><span class="line">    return fixed4(Emissive + diffuse + ambient,1.0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 探索发现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> ShaderLab </tag>
            
            <tag> shader </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Z-Fighting</title>
      <link href="/2022/01/12/%E8%A7%A3%E5%86%B3Z-Fighting/"/>
      <url>/2022/01/12/%E8%A7%A3%E5%86%B3Z-Fighting/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="解决z-fighting">解决Z-Fighting</h1><p>Z-Fighting是在实际项目中困扰到场景布局的一大因素。从理论上来说，在相同深度值的地方有多个片元，这导致颜色缓冲区不知道该呈现哪个颜色比较合适，而当视角运动时就会出现糟糕的闪烁：<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220113143251.png" width="315/"><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220113143402.png" height="300/"></p><p>通过调整渲染队列并不能避免这种问题，就比如上图的半透明物体的渲染队列是在不透明物体之后的，但他们重叠时依然会发生z-fighting现象。</p><h2 id="解决方法">解决方法</h2><p>Shaderlab语法中的Offset命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Properties&#123;</span><br><span class="line">        _OffsetFactor(&quot;深度斜率&quot;,Float) = 0</span><br><span class="line">        _OffsetUnit(&quot;深度偏移&quot;,Float) = 0</span><br><span class="line">    &#125;</span><br><span class="line">SubShader&#123;</span><br><span class="line">    Pass&#123;</span><br><span class="line">        Tags&#123; &quot;LightMode&quot; = &quot;ForwardBase&quot; &#125;</span><br><span class="line">        Offset [_OffsetFactor],[_OffsetUnit]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="参数解读">参数解读</h3><ul><li><strong>_OffsetFactor</strong>: 缩放最大 Z 斜率，也称为<strong>深度斜率</strong>，以生成每个多边形的可变深度偏移。<br>不平行于近剪裁平面和远剪裁平面的多边形具有 Z 斜率。调整此值以避免此类多边形上出现视觉瑕疵。</li><li><strong>_OffsetUnit</strong>: 缩放最小可分辨深度缓冲区值，以产生恒定的<strong>深度偏移</strong>。最小可分辨深度缓冲区值（一个 <em>unit</em>）因设备而异。<br>负值意味着 GPU 将多边形绘制得更靠近摄像机。正值意味着 GPU 将多边形绘制得更远离摄像机。</li></ul><h3 id="效果">效果</h3><p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220113152924.png" width="328/"><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220113153033.png" width="315/"></p>]]></content>
      
      
      <categories>
          
          <category> 探索发现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> ShaderLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oculus Quest电脑端有线连接教程</title>
      <link href="/2021/10/25/Oculus%20Quest%E7%94%B5%E8%84%91%E7%AB%AF%E6%9C%89%E7%BA%BF%E8%BF%9E%E6%8E%A5%E6%95%99%E7%A8%8B/"/>
      <url>/2021/10/25/Oculus%20Quest%E7%94%B5%E8%84%91%E7%AB%AF%E6%9C%89%E7%BA%BF%E8%BF%9E%E6%8E%A5%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>由于无线连接需要代理路由或代理wifi，所以走有线</strong><br><strong>本篇教程使用github作为图床，使用代理来加载图片</strong><br><strong>本教程的前提是你的设备已经激活并且连上手机。激活需要代理热点，比如刷了老毛子固件的路由器或者坐船去台湾，也可以通过oculus helper、SSTap等来实现</strong></p><h1 id="基础步骤">基础步骤</h1><h2 id="安装oculus电脑客户端">安装Oculus电脑客户端</h2><p>从官网上下载Oculus Hub，点击oculus setup就可以直接安装，如下（如果你是开发者，可以安装Oculus Developer Hub）：<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211025214452.png"><br>安装建议使用科学上网，一个好的代理可以在半小时内下完5G多的资源，否则要五个小时。安装好之后桌面上会出现客户端图标：<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211025214715.png"><br>这时候使用之前注册的开发者账户登录会出错，原因是国内墙的dns污染导致无法连接oculus的服务器。解决方式是打开电脑文件目录：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="name">C</span>:\WINDOWS\System32\drivers\etc</span><br></pre></td></tr></table></figure><p>里面有一个hosts文件，以记事本打开它，在末尾加上：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">157.240.217.51</span> graph.oculus.com</span><br><span class="line"><span class="number">157.240.195.51</span> graph.oculus.com</span><br><span class="line"><span class="number">157.240.199.54</span> graph.oculus.com</span><br></pre></td></tr></table></figure><p>保存之后，打开cmd输入命令刷新dns：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig/flushdns</span><br></pre></td></tr></table></figure><p>完成之后重启客户端，这时候就可以登陆了<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/U7%25IF51%7ECX75%7BD%7BE%25E8OQN7.png"></p><h2 id="连接quest设备">连接Quest设备</h2><p>首先，给手柄装上电池，然后拿出Quest自带的usb-C连接线。长得比较奇怪的一边连接设备，另一边连接电脑的usb3.0接口或者usb-C接口<br>完成之后，打开Oculus客户端，在设备中添加头部设备：<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211025215441.png"><br>选中Quest之后，选择有线，之后等待配对成功。<br>初次连接需要检查连接：<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211025215641.png"><br>完成之后，连接就成功了。</p><h2 id="连接steam-vr游戏">连接steam VR游戏</h2><p>嗨，我们没有在玩游戏<br>不过Quest连接SteamVR非常方便。当电脑与Quest成功配对之后，Quest的头戴式设备内会提示是否启用Oculus Link的选项，此时确定就可以将设备与电脑连接</p><p>连接成功之后，在电脑上打开steam的vr游戏就可以了</p>]]></content>
      
      
      <categories>
          
          <category> VR开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oculus </tag>
            
            <tag> Quest </tag>
            
            <tag> VR </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>§1-1：渲染流水线</title>
      <link href="/2021/07/13/%C2%A71-1%EF%BC%9A%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF/"/>
      <url>/2021/07/13/%C2%A71-1%EF%BC%9A%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>我们总在说渲染管线，几乎每一个与TA有关的课程第一课都和渲染管线相关，这是一切图像的基础。就拿最近在用的Unity内置渲染管线为例吧，其中包含了CPU和GPU两个部分，总的流程图如下所示：</p><p><img src="/2021/07/13/%C2%A71-1%EF%BC%9A%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF/Clipboard_2021-09-12-04-25-58.png" alt></p><h1 id="应用阶段-cpu处理阶段">应用阶段/CPU处理阶段</h1><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA9b9cef8b1cf22d282bf0cc32344dee73.png" alt="image.png" title="image.png" width="635"><p>应用阶段的处理场所在CPU。这一阶段主要处理以下几件事：</p><ul><li>准备好场景数据</li><li>剔除不需要渲染的部分</li><li>设置渲染顺序</li><li>加载数据到显存</li><li>调用DrawCall</li><li><strong>输出渲染图元</strong>(Rendering Primitives)作为几何阶段的输入。通俗来讲，渲染图元可以是点、线、三角面等，这些信息会传递给GPU渲染管线处理。</li></ul><h2 id="剔除-culling"><strong>剔除(Culling)</strong></h2><p>CPU阶段的剔除是<strong>粗粒度</strong>的，和GPU阶段的裁剪不同。粗粒度剔除发生在物体层面，剔除是以物体1为单位进行的。这一步包含了三种剔除：</p><ol><li><p>视锥体剔除<br>视锥体剔除指的是剔除掉相机视锥体之外的元素，视锥体即相机的可视范围，全部在外的物体(比如下图的鸟)不需要渲染，部分在外的物体会在GPU渲染部分被裁剪。<br><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA679019020b8176f927ad44c010889bc0.png" alt="image.png" title="image.png"></p></li><li><p>层级剔除<br>层级剔除指物体所处的层(Layer)是否被相机所渲染。如果相机的渲染层不包含该物体的layer，则该物体不被渲染。譬如在上文的例子中，如果不渲染树木层，就会是下面的画面：<br><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA97faa25782a72442debbbff7b7cb8c55.png" alt="image.png" title="image.png" width="403"></p></li><li><p>遮挡剔除<br>遮挡剔除指当一个物体被其他物体遮挡而不在摄像机的可视范围内时，不对其进行渲染。对这些物体进行渲染是浪费时间和性能的，所以要先剔除掉这部分元素以节省接下来的时间。</p></li></ol><h2 id="设置渲染顺序">设置渲染顺序</h2><p>渲染顺序主要由**渲染队列(Render Queue)**决定的，序号越小的越先渲染。Unity默认渲染队列序号如下：</p><ul><li>Background（1000）<br>最早被渲染的物体的队列。</li><li>Geometry（2000）<br>不透明物体的渲染队列。大多数物体都应该使用该队列进行渲染，也是Unity Shader中默认的渲染队列。</li><li>AlphaTest（2450）<br>有透明通道，需要进行Alpha Test的物体的队列，比在Geomerty中更有效。</li><li>Transparent（3000）<br>半透物体的渲染队列。一般是不写深度的物体，Alpha Blend等的在该队列渲染。</li><li>Overlay（4000）<br>最后被渲染的物体的队列，一般是覆盖效果，比如镜头光晕，屏幕贴片之类的</li></ul><p>当渲染队列相同时，<strong>不透明队列</strong>(RenderQueue &lt; 2500)，根据摄像机距离<strong>从前往后排序</strong>，这样先渲染离摄像机近的物体，远处的物体被遮挡剔除；<strong>半透明队列</strong>(RenderQueue &gt; 2500)，根据摄像机距离<strong>从后往前排序</strong>，这是为了保证渲染正确性，例如半透明黄色和蓝色物体，不同的渲染顺序会出现不一样的颜色。</p><h2 id="打包数据到显存">打包数据到显存</h2><p>在CPU阶段，数据会先从硬盘加载到RAM中，随后网格、纹理等数据又被加载到显存上。加载到显存上之后，数据就会被移除。<br>之所以这么做是因为GPU访问显存的速度比访问前两者更快，而且多数显卡可能无法直接访问RAM。打包的数据主要包括：</p><ol><li><strong>模型信息</strong>，包括顶点坐标、法线、uv、切线、顶点颜色等等</li><li><strong>变换矩阵</strong>V和P，这是由相机的位置和FOV决定的</li><li><strong>灯光信息</strong></li><li>模型的<strong>材质参数</strong>，设置对应的渲染状态</li></ol><h2 id="调用setpass-call和draw-call">调用SetPass Call和Draw Call</h2><ul><li><p>SetPass Call<br>Shader脚本中一个Pass语义块就是一个完整的渲染流程，一个着色器可以包含多个Pass语义块，<strong>每当GPU运行一个Pass之前，就会产生一个SetPassCall</strong>，所以可以理解为调用一个完整渲染流程。</p></li><li><p>DrawCall<br>CPU每次调用图像编程接口命令GPU渲染的操作称为一次Draw Call。Draw Call就是一次渲染命令的调用，它指向一个需要被渲染的图元（primitive）列表，不包含任何材质信息。GPU收到指令就会根据渲染状态（例如材质、纹理、着色器等）和所有输入的顶点数据来进行计算，最终输出成屏幕上显示的那些漂亮的像素。</p></li></ul><h1 id="gpu处理阶段">GPU处理阶段</h1><p>处理场所：GPU<br>主要流程：</p><ol><li>顶点处理</li><li>图元装配</li><li>光栅化</li><li>片元着色器</li><li>输出合并</li></ol><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA3ab332888e0df4ce1aeb54cabf9ba62b.png" alt="image.png" title="image.png"><h2 id="顶点处理">顶点处理</h2><p>在顶点处理阶段，每个顶点都会经过一次顶点着色器。虽然一个模型可能有很多很多顶点，但得益于GPU的高并发的特点，可以同时处理大量的数据，所以实际上是很快的（虽然快但不代表可以无限精细模型）。在顶点阶段完成的最基本的操作是顶点坐标的变换，从模型空间经过MVP处理变换到齐次裁剪空间。在这个阶段也可以计算顶点的光照（高洛德着色），但效果不佳。<br>除了顶点着色器之外，顶点处理阶段还包括<strong>曲面细分着色器</strong>和<strong>几何着色器</strong>。这两种着色器是<strong>非必须</strong>的，可选可不选。</p><h3 id="曲面细分着色器-tessellation-shader">曲面细分着色器(Tessellation Shader)</h3><p>主要作用是用于细分图元。曲面细分着色器是一个<strong>可选的着色器</strong>，主要是对三角面进行细分，以此来增加物体表面的三角面的数量。借助它可以实现<strong>细节层次(LOD,Level-of-Detail</strong>)的机制，使得离摄像机越近的物体具有更加丰富的细节，而远离摄像机的物体具有较少的细节。</p><h3 id="几何着色器">几何着色器</h3><p>几何着色器也是一个<strong>可选的着色器</strong>，它以完整的图元（比如，点）作为输入数据，输出可以是一个或多个其他的图元(比如，三角面)，或者不输出任何的图元。几何着色器的拿手好戏就是将输入的点或线扩展成多边形。我们可以用几何着色器完成很多工作，例如绘制mesh的法线、</p><h2 id="图元装配">图元装配</h2><h3 id="裁剪-clipping">裁剪(Clipping)</h3><p>CPU阶段的剔除已经帮助我们去掉了所有整个在视锥体外、不需要渲染的物体。但有一些物体<strong>部分在视锥体内部分在视锥体外</strong>，针对这些物体，在视锥体外的部分就需要进行裁剪，使用一些新的顶点来代替被裁剪的部分，不再渲染视锥体外被裁减的部分，减少开销。</p><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA98e47f2dc4bc2daa31c10d8e5c37e035.png" alt="image.png" title="image.png" width="196"><h3 id="标准化设备坐标-normalized-device-coordinates-ndc">标准化设备坐标(Normalized Device Coordinates，NDC)</h3><p>在处理完模型顶点的裁剪空间的基础上，进行透视除法(perspective division，即除w)后会得到一个长宽高均为2的正方体，这就是标准化设备坐标(NDC)。之所以边长是2是因为从原点出发三个轴的范围都在[0,1]之间。</p><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA63923e5233b56a1b4a6ffd973198e322.png" alt="image.png" title="image.png" width="292"><p>获得NDC坐标是为了实现屏幕坐标的转换，与硬件无关。</p><h3 id="背面剔除-back-face-culling">背面剔除(Back-Face Culling)</h3><p>这一步在NDC之后，剔除所有背对摄像机的三角面。上篇文章（GPU渲染管线）中我们讲到过模型数据中含有顶点和mesh的索引列表，列表中的三个点组成一个三角片，默认情况下：</p><ul><li>三个点是顺时针排列的，认为背对摄像机</li><li>三个点是逆时针排列的，认为正对摄像机</li></ul><p>关于是顺时针还是逆时针，可以通过三角形任意两边叉乘的方向判断。判断为背面则剔除，除非开启了双面渲染等设置。</p><h3 id="屏幕映射-screen-mapping">屏幕映射(Screen Mapping)</h3><p>屏幕映射将NDC中每个图元的x、y坐标转换到屏幕坐标系(Screen Coordinates, <strong>z坐标不做任何处理</strong>（但并不是无用的），因为屏幕是二维的。<br>屏幕坐标系和z坐标一起被称作窗口坐标系(Window Coordinates)。</p><h2 id="光栅化">光栅化</h2><p>光栅化的主要流程是计算每个图元覆盖了哪些像素，并计算它们的颜色。即将屏幕空间的<strong>图元离散化为片元</strong>的过程，包括：</p><ul><li>三角形设置</li><li>三角形遍历</li></ul><h3 id="三角形设置-triangle-setup">三角形设置(Triangle Setup)</h3><p>我们从上一个阶段获得图元的顶点信息，也就是三角面每条边的两个端点，但如果要得到整个三角网格对像素的覆盖情况，我们就必须计算每条边上的像素坐标。为了能够计算边界像素的坐标信息，我们就需要得到三角形边界的表示方式。这样一个计算三角网格表示数据的过程就叫做三角形设置。</p><h3 id="三角形遍历-triangle-traversal">三角形遍历(Triangle Traversal)</h3><p>检查每个像素是否被一个三角形网格覆盖，如果覆盖的话则生成一个<strong>片元(Fragment)</strong>, 并使用三角网格3个顶点的顶点信息对整个覆盖区域的像素进行插值。这个阶段也被成为<strong>扫描变换(Scan Conversion)</strong><br>经过三角形遍历我们会得到一个片元序列，但片元不等同于像素，而是包含了屏幕坐标、深度信息(通过插值得到)、顶点信息等的状态合集。</p><h2 id="片元着色器-fragment-shader">片元着色器(Fragment Shader)</h2><p>片元着色器最主要的任务就是<strong>着色</strong>,光栅化阶段实际上并不会影响屏幕上每个像素的颜色值，而是会产生一系列的数据信息，用来表述一个三角网格是怎样覆盖每个像素的。而每个片元就负责存储这样一系列数据。着色有两种最常见的技术，分别是<strong>纹理贴图</strong>和<strong>光照技术</strong>。</p><h2 id="输出合并-output-operations">输出合并(Output Operations)</h2><p>这个阶段也被成为<strong>逐片元操作</strong>（Per-Fragment Operations），主要决定了每个片元的<strong>可见性</strong>(在这个阶段需要对片元进行多种测试，包括透明度测试、模板测试和深度测试等等)和片元的混合。</p><h3 id="透明度测试-alpha-test"><strong>透明度测试(Alpha Test)</strong></h3><p>这是输出合并阶段片元经历的<strong>第一个测试</strong>，也是一个非常简单粗暴的测试。通过片元数据，可以获取该片元的alpha值，如果alpha值小于某个数的话，则直接将该片元丢弃，不进行渲染（即只渲染透明度在某一范围内的片元），可以用来做一些树叶镂空的效果。</p><h3 id="模板测试-stencil-test"><strong>模板测试(Stencil Test)</strong></h3><p>模板测试是输出合并阶段经历的<strong>第二个测试</strong>。模板测试将<strong>模板缓冲区中的模板值</strong>与<strong>参考值</strong>进行比较，可以自己配置比较的方式，比较的结果决定一个片元是否通过测试。通过模板测试的片元可以参与下一阶段的深度测试(如果开启了的话)，否则被舍弃。</p><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA805b3cc2d0696b913f4c61ef0b730bfb.png" alt="image.png" title="image.png" width="987"><h3 id="深度测试-depth-test"><strong>深度测试(Depth Test)</strong></h3><p>深度测试是<strong>最后一个测试</strong>。深度测试比较了片元的深度值和已存在于深度缓冲区中的深度值，可以自己配置比较的方式，比较的结果决定一个片元是否通过深度测试。如果没有通过，需要舍弃该片元。</p><p>深度测试在正常的思维中是近处覆盖远处(深度值小覆盖深度值大，同时缓冲区内的深度值被替换成当前深度值)，但通过修改深度测试的规则，可以允许物体永远出现在前方，或仅在遮挡时显示。</p><h3 id="混合-blend">混合(Blend)</h3><p>混合操作对于半透明物体而言十分重要。如果没有开启混合功能，GPU会直接使用片元的颜色覆盖掉颜色缓冲区中的颜色。而如果开启了混合功能，GPU会取出颜色缓冲区中的颜色(目标颜色)与片元的颜色(源颜色)根据设置的混合模式进行<strong>混合</strong>。</p><p>对混合更好的理解是绘图软件（例如PS）中的混合模式(比如叠加、正片叠底、滤色等等)，实际上就是混合图层与下面的图层进行混合。在片元着色器的混合中，因为存在深度(z轴参数不同)，所以实际上片元也存在图层的前后关系。</p><blockquote><p><strong>提前深度测试</strong>(Early-z)<br>深度测试和模板测试是在片段着色器之后进行的，这里就存在一个问题：我们费尽千辛万苦计算了一个片元的颜色，然后它没有通过测试，被抛弃了！那我们花在这个片元上的计算岂不是就<strong>浪费</strong>了吗？Yes，真是这样。<br>提前深度测试正是在这种情况下出现的，它在顶点着色器和片元着色器之间进行，可以在片元着色器计算之前把那些无法通过深度测试的片元剔除。不过，Early-Z Culling<strong>不是管线标准</strong>，只是硬件厂商用来加速渲染的一种优化手段，所以在不同的硬件上会有不同的实现，而且Early-Z Culling并不保证一定有效，它需要硬件的支持。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> Unity Shader </tag>
            
            <tag> 计算机图形学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Unity简单实现明日方舟</title>
      <link href="/2021/04/03/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F/"/>
      <url>/2021/04/03/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言">前言</h1><p>这次学校工作室的考核任务（是的还是考核）是复刻一款游戏，给出了三个游戏选择（饥荒/杀戮尖塔/元气骑士）不过我都没有玩过，于是想了想我决定做一个简陋版的明日方舟。之前在b站看到过大佬仅耗时48小时开发出明日方舟的战斗界面，感觉好像也不会很难吧……就去试了！</p><p>但是做了之后才发现其实是很有挑战性的一次任务。先上两张游戏界面的图（p1p2）！</p><p><img src="/2021/04/03/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F/image.png" alt="p1"><br><img src="/2021/04/03/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F/image-1.png" alt="p2"></p><h1 id="制作思路">制作思路</h1><h2 id="场景：">场景：</h2><p>最开始我的想法包括了五个场景：两个关卡、选择干员的界面、看板界面和登录起始界面（包括一些本地化的内容，工作量挺大的）。后来由于时间不够了就砍成了登录起始界面和一个关卡。</p><h2 id="干员：2d骨骼-trail-renderer">干员：2D骨骼/Trail Renderer</h2><p>选择什么干员来演示比较合适呢？方舟并没有公开模型，如果要获取对应的gif会比较麻烦，而自己画角色好像也很麻烦。</p><p>纠结了半天我决定画三个自己的原创角色，并使用2D骨骼动画制作了相关的站立、战斗的动画（对2D骨骼感兴趣的同学可以在b站上找Michael老师的系列教程参考学习）</p><p>在干员战斗的时候你会注意到一些秘制特效，这是用Unity自带的组件Trail Renderer做的。这个组件很强大，如果加上一点代码能得到非常酷的效果。</p><h2 id="关卡：2-5d-正交相机-透视相机">关卡：2.5D/正交相机+透视相机</h2><p>关卡界面我是完全按照方舟游戏本体的某一关来搭建的。</p><p>我们知道舟游的地图是3D的，但是干员又是纸片人，这种不同维度的结合势必会带来一些问题。几番考虑我决定在2D场景中创建3D的地图（其实是某种意义上的2.5D），正好Unity默认的Cube长宽为1，完美契合了地图格子的对应位置，能够得到图3的效果：</p><p><img src="/2021/04/03/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F/image-2.png" alt></p><p>因为想要得到近大远小的效果，所以渲染地图的相机必须是透视而不是正交的，但是这样会导致我方干员贴图在挪动到地图边缘的位置时出现扭曲的现象。为了解决这个问题，我额外引入了另一个正交像机专门用来渲染干员预制件，这样干员在拖拽实例化之后怎么看都像端端正正站立在地图上的。</p><p>不过这样也会导致另外一个问题，那就是在靠近边缘的地方干员和格子可能无法很好的对应上。我认为是能找到一个数学模型来对应的，但是有点麻烦…</p><p>后来在参考研究48h开发明日方舟的白斗七星大佬的作品时发现他只用了一个摄像机，但是这个摄像机的机位很巧妙，把近小远大的影响压到了最小。</p><h1 id="具体实现">具体实现</h1><p>标题场景比较简单，就是几个UI元素调到还行的布局，在此不多做论述。</p><p><img src="/2021/04/03/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F/image-3.png" alt="起始界面ui"></p><p><img src="/2021/04/03/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F/image-4.png" alt="代码结构"></p><p>在上一期《用Unity简单实现合成大西瓜》一文中，我在代码结构的处理上非常糟糕，该封装的东西都没封装，导致整个代码结构特别复杂也特别乱。这次在这方面做了一些小小的努力，相对结构也还是能看的吧（笑～）</p><h2 id="敌人相关">敌人相关</h2><p>EnemyWaveController参（zhao）考（ban）了油管上Brackeys老师的教程，EnemyMove则使用了A* 算法。对于网格地图上的移动，除了A* 之外还有好几种其他的寻路算法，感兴趣可以上b站找Joe的视频参考学习。</p><p>为了减小开销（在频繁销毁生成的资源很多的时候，这点非常重要），敌人的生成和死亡使用了对象池。</p><h2 id="player相关">Player相关</h2><p>第一次写接口（IPlayer）竟然是用在玩家的攻击和特殊攻击上。因为考虑到每个我方干员都有这两种攻击形式和一些属性，就整了这么个，后来用起来也还挺方便的。</p><p>PlayerMgr里的玩家列表对“已上场的干员”、“还未上场的干员”、“攻击范围内的干员”都有着至关重要的作用。UI的玩家图像按钮就是依赖于这个列表。</p><p>玩家信息则存放的是该干员的部署费用、名字等元素。</p><h2 id="ui相关">UI相关</h2><p>有很多按钮的OnClick事件和一些与数值有关的事件委托。</p><p>其中最复杂的地方莫过于拖拽实例化+放置玩家+设置朝向。我的思路大概是这样的：</p><p>点击玩家按钮列表，利用eventHandler的drag函数在鼠标的地方实例化出对应干员 à 拖的时候对应的地块颜色变成绿色（调整材质球的颜色） à 松开鼠标，如果在适合的位置就吸附到该格子中心 à 调整朝向，攻击范围也随之改变 à 放置完成</p><p>想法挺简单的，写起来有点复杂…相信有更快更简洁的实现方式</p><h1 id="回顾思考">回顾思考</h1><p>值得改进的地方有许多，比如从代码角度出发，我的代码还不够精简（尤其是拖拽放置的那个模块），还不够OOP（</p><p>此外，从可玩性的角度出发，如果地图和敌人能做到随机生成，那么游戏的可玩性和难度会大大提升的</p><p>最后，感谢阅读到这里的你！如果你对这个项目有什么意见和建议欢迎在评论区和我探讨</p><p>源码已上传GitHub：<a href="https://github.com/Guiny-Time/Arknights">https://github.com/Guiny-Time/Arknights</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏编程 </tag>
            
            <tag> 经验分享 </tag>
            
            <tag> 项目复盘 </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Unity简单实现合成大西瓜</title>
      <link href="/2021/01/30/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C/"/>
      <url>/2021/01/30/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近一款名叫“合成大西瓜”的游戏风靡空间，大家在真香之后都笑称自己为“西瓜人”，随后各种恶搞大西瓜的趣图、大西瓜bot更是接踵而至，甚至诞生了“合成大西瓜护肝版”、“合成小葡萄”、“合成大国家”等一系列衍生体…本文将主要探讨如何用Unity做一个“合成大西瓜”。</p><h1 id="素材搜集">素材搜集</h1><p>素材，或者说贴图展现了水果们的样貌。在这里如果把贴图替换成其他元素，比如说香蕉啦、波兰球啦一类的我们就能得到合成大国家等等的恶搞游戏。</p><p>这里为了简单（其实是我不会画）表现一下水果，笔者画了几个球，如图：</p><p><img src="/2021/01/30/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C/image.png" alt></p><p>从左到右分别表示的是葡萄、小番茄、橘子、柠檬、猕猴桃、西红柿、半个西瓜和西瓜。游戏规则是两个等级相同的水果可以合成更高一级的水果，合成出西瓜就算获得游戏胜利。</p><p>这里在合成路线上省略了椰子、土豆等中间部分的水果，因为道理是一样的嘛就不画了（说到底还是因为懒惰</p><h1 id="ui">UI</h1><p>笔者简单设计了一个UI，如图：</p><p><img src="/2021/01/30/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C/image-1.png" alt></p><p>可以看到这个UI主要由三个部分组成。第一个部分是顶端的白色图片，这张图片将用于显示下一个出现的水果的图案；第二部分是左上角的分数，用来统计玩家通过合成获得的分数；第三部分则是左部、右部和底端的边界，都加上了碰撞器，防止水果掉出界面。</p><p>这两部分准备好以后就可以开始构思程序了</p><h1 id="编程与实现">编程与实现</h1><p>基本思路：给每个水果加上2D刚体和2D球状碰撞器，在鼠标点击的位置的x方向上实例化出对应的“下一个水果”。在水果的碰撞事件中两个水果被摧毁的同时生成高等级的水果，得分增加。</p><p>所以第一步是让对应的下一个水果实例化在鼠标位置的x方向上。因为涉及到水果的摧毁，所以不能直接实例化水果本体，否则会导致元物体被摧毁而无法继续实例化。所以思路是创建一个元物体的备份，在备份上进行实例化和摧毁的操作。</p><p><img src="/2021/01/30/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C/image-2.png" alt><br><img src="/2021/01/30/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C/image-3.png" alt></p><p>可以从上面两张图片看到，带public访问修饰符的物体就是水果的本体，而下方隐式的物体则是相应水果的备份体。在鼠标点击后，从已经生成的随机数中选择出对应的水果并实例化在鼠标的世界坐标的x方向上。这里的5.0f是一个固定的y坐标，能够获得水果从屏幕顶端落下的效果。</p><p>第二步，实现相同水果撞击后摧毁并“合成”出更高一级的水果并加分，以葡萄为例（下图）：</p><p><img src="/2021/01/30/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C/image-4.png" alt></p><p>这里一共有四个操作：记录碰撞的布尔值变成true、积分增加10分、记录碰撞的位置和摧毁两个碰撞体。</p><p>你会注意到我没有直接在碰撞事件里生成下一等级的物体，而是将一个记录碰撞的布尔值改成了true。这是因为两个相互碰撞的水果都带有碰撞器，所以实际上这个方法是被执行了两次，执行的主体分别是碰撞的双方。如果在这个方法里直接实例化下一等级的水果的话，我们将直接得到两个紧贴在一块的水果，并直接到达合成路线的终点——大西瓜。</p><p>所以在这里采用了设布尔值的方式，在另一个类的LateUpdate方法里对布尔值进行检测并实例化下一等级的水果就能避免生成两个，如下图。</p><p><img src="/2021/01/30/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C/image-5.png" alt></p><p>最后一步的随机生成的“下一个水果”，这个比较简单，就是用一个随机数进行选择就可以了：</p><p><img src="/2021/01/30/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C/image-6.png" alt></p><p>以上就是一些基本的思路。这个大概200行代码的重制版的“合成大西瓜”已经能实现原版的大部分功能，但是还缺少了失败判定功能（可以用触发器+FixedUpdate计时）和一些激动人心（大雾）的音效，但是效果还是不如原版的好嘞~</p>]]></content>
      
      
      <categories>
          
          <category> 项目复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏编程 </tag>
            
            <tag> 经验分享 </tag>
            
            <tag> 项目复盘 </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
