<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在终面之后——更精确的战斗系统</title>
      <link href="/2024/11/23/%E5%9C%A8%E7%BB%88%E9%9D%A2%E4%B9%8B%E5%90%8E%E2%80%94%E2%80%94%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%88%98%E6%96%97%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/11/23/%E5%9C%A8%E7%BB%88%E9%9D%A2%E4%B9%8B%E5%90%8E%E2%80%94%E2%80%94%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%88%98%E6%96%97%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>十一月毕业典礼结束之后我终于算正式毕业了，随着腾讯 2024 游戏创作大赛颁奖典礼的结束，《终面/OneLastInterview》的开发到现在也算是告一段落了。《终面》能在众多参赛作品中突围进入决赛，这已经是大赛方对我们的努力和实力的认可了，很开心。</p><p>最近正值秋招时节，经常被问到简历上的项目，《终面》作为我最新的项目自然是被经常提及的，经过面试官们的点拨，我也认为项目中的关卡系统和战斗系统需要结合业内做法更进一步的改进。本文将重点讨论战斗系统方面的优化，探讨如何实现更好的战斗系统。</p><p>首先介绍一下《终面》中 Boss 战斗相关逻辑的策划案。对于Boss从巡逻到发起攻击，其中的逻辑是：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  pie  </pre></div><pre class="mermaid">graph LR巡逻 -- 无玩家 --> 巡逻巡逻 -- 发现玩家 --> 警觉计时警觉计时 -- 无玩家 --> 巡逻警觉计时 -- 玩家在视野内 --> 计时结束触发攻击警觉计时 -- 被弹反 --> 硬直硬直 -- 硬直计时结束 --> 巡逻</pre><blockquote><p>注：硬直时玩家的伤害倍率提升为2倍。</p></blockquote><p>对于boss所使用的具体攻击招式，则分为了两个阶段：</p><ul><li><p><strong>一阶段</strong>（血量大于1500）</p><ul><li>攻击1（远程）<br>玩家距离boss较远时，boss向玩家方向进行连续远程攻击，连续 3 次，每次间隔 1 秒，每次瞄准当前玩家位置发射，飞行道具可弹反。</li><li>攻击2（近战）<br>主动靠近玩家，向玩家挥出 3 连击，每击都有感叹号提示，任意一击被弹反即打断此次攻击，使boss硬直 2 秒</li><li>攻击3（远程）<br>朝向玩家所在位置的水平方向（正左/正右）进行蓄力，完成后有感叹号，随后朝玩家冲刺，弹反成功boss眩晕硬直 2 秒。</li><li>攻击4（近战）<br>玩家在boss身边时，短暂蓄力后对身边360度一圈挥舞武器，半径为 2 个玩家身位，蓄力完成后有感叹号，且有短暂红圈提示范围。</li></ul></li><li><p><strong>二阶段</strong>（血量小于1500）</p><ul><li>攻击4派生1：此次攻击如被弹反，则会接着向玩家位置方向施放<strong>攻击3</strong>。</li><li>攻击4派生2：此次攻击如未被弹反，则会蓄力释放一次半径为 4 个玩家身位的 360 度攻击，蓄力完成后有感叹号，且有短暂红圈提示范围，成功弹反此次攻击，boss眩晕硬直 5 秒。</li><li>攻击5：boss瞬移到场地中央，向天上抛洒炸弹，动作结束后场地上随机出现 6 处（boss左边右边各 3 个）半径为一个玩家身位的攻击预警红圈 + 一个固定出现在玩家当前位置的红圈，2 秒后红圈消失、炸弹落地。不可弹反。</li></ul></li></ul><p>由此我们可以看出，boss的出招是综合了血量和玩家距离两个因素考虑的，抽象成流程图如下所示。为了提升游戏的体验，策划同学在一种情况下设置了多种攻击方式，具体使用哪种是完全随机的。</p><pre class="mermaid">graph TD  血量大于1500 -- 是 --> 一阶段  血量大于1500 -- 否 --> 二阶段  一阶段 --> 距离大于5个单位  距离大于5个单位 -- 是 --> 攻击1或攻击3  距离大于5个单位 -- 否 --> 攻击2或攻击4  二阶段 --> 含二阶的攻击4或攻击5</pre><h1 id="基于状态机的做法">基于状态机的做法</h1><p>我是怎么实现战斗系统的呢？其实战斗系统需要考虑的核心主要有三点：</p><ol><li><p>boss是否能释放此技能<br>根据配置获取技能能释放的条件，比如血量是否大于1500、距离是否大于5个单位等。</p></li><li><p>播放技能的动画和音频等特效<br>加载动画和特效的资源素材，并播放动画，做好动画状态机切换等</p></li><li><p>计算技能对目标照成的伤害<br>每个技能放出后，设置一个时间点来计算攻击与伤害，比如有一个技能动画3秒，当播放到2秒的时候计算伤害</p></li></ol><p>由于我们的开发时间有限，在毕设开发阶段我们直接使用了 Unity Asset Store 上的 Corgi Engine 进行开发。Corgi Engine 内部集成了常用怪物 AI 的相关功能（例如射击、切换武器、检查玩家是否在视野内、跟随玩家、计时器等等），同时提供了一个名为 AI Brain 的脚本，方便用户设置敌人 AI 的逻辑。</p><p>AI Brain 实际上是一个<strong>状态机</strong>，下面是boss战中出现的所有状态。在做本科毕设的时候我发布过一篇介绍<a href="https://cattyhouse-guiny.xyz/2023/05/10/%E6%B8%B8%E6%88%8Fai-%E7%8A%B6%E6%80%81%E6%9C%BA%E4%B8%8E%E8%A1%8C%E4%B8%BA%E6%A0%91/">状态机与行为树</a>的文章，其中提到状态机很容易出现<u>状态爆炸</u>的问题，下图就足以体现了：</p><img src="/2024/11/23/%E5%9C%A8%E7%BB%88%E9%9D%A2%E4%B9%8B%E5%90%8E%E2%80%94%E2%80%94%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%88%98%E6%96%97%E7%B3%BB%E7%BB%9F/Clipboard_2024-11-27-21-19-22.png" width="300"><p>每个状态包含了所执行的逻辑和状态转移的条件。以巡逻（不要在意我为什么写成了Idle）和预攻击判断（Pre-Attack）为例，巡逻过程中boss会不断检测玩家是否位于视野内，如果发现玩家就进入预攻击判断的状态。在预攻击判断状态中，根据boss当前血量决定选择阶段1还是阶段2，其他状态类似。</p><img src="/2024/11/23/%E5%9C%A8%E7%BB%88%E9%9D%A2%E4%B9%8B%E5%90%8E%E2%80%94%E2%80%94%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%88%98%E6%96%97%E7%B3%BB%E7%BB%9F/Clipboard_2024-11-27-21-19-13.png" width="300"><p>以攻击3为例，在具体的战斗状态中，相关逻辑是直接通过一个装载了实现了AIAction接口的功能性脚本（例如下图中的移速增加、攻击3逻辑）数组的方式去执行的（脚本会执行每个实现该接口类的PerformAction()方法）。</p><blockquote><p>我的攻击 3 逻辑包括了朝玩家冲刺的逻辑、设置动画机参数和音频触发等等。实际上这样耦合度有点高，可以为设置动画机参数和音频专门写一个 AIAction，这样方便复用逻辑。</p></blockquote><p>由于每个攻击存在动画时长，必须为状态设置一个匹配时长的退出时间（例如下图中的冲刺时长），以免出现攻击一触发就秒退状态或者状态和动画时长不匹配的问题。</p><img src="/2024/11/23/%E5%9C%A8%E7%BB%88%E9%9D%A2%E4%B9%8B%E5%90%8E%E2%80%94%E2%80%94%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%88%98%E6%96%97%E7%B3%BB%E7%BB%9F/Clipboard_2024-11-27-23-44-16.png" width="350"><p>采用状态机实现战斗系统的缺点十分明显，那就是如果要做到精确的帧控制需要颇费一番功夫。同时存在状态爆炸等问题，代码维护起来较为痛苦。我们也可以用行为树去优化状态机下的战斗系统，虽然可以简化代码但仍无法避免对效果的精确控制上的问题。通过状态机/行为树实现的战斗系统比较适用于一些状态同步的项目，例如 Moba 类游戏。</p><h1 id="基于timeline的优化">基于Timeline的优化</h1><img src="https://europe1.discourse-cdn.com/unity/original/4X/f/6/a/f6a804ac213b2633a44b7097537b99dc2d9530fa.png"><p>Timeline 是 unity 自带的时间线插件，可以很好的实现 cg、动效等内容。同时扩展简单，是游戏开发不可或缺的一个重要组件。我个人使用 Timeline 的场景不多，在本科期间某节课的结课项目中有用它制作过影片，当时只感觉它很适合用来做过场动画，没有深入挖掘过 Timeline 的强大功能。</p><p>上图展示了一个用 Timeline 制作的攻击序列，其中包含了：</p><ul><li><p><strong>Track Group</strong></p><ul><li>轨道组，可以放多个 track，用来按组分类划分</li><li>没有实际功能，只是用来帮助开发者进行分类的（就像文件夹）</li></ul></li><li><p><strong>Activation Track</strong></p><ul><li>激活轨道，用来控制物体是否激活（显示或隐藏）的轨道，颜色为<font color="green"><strong>绿色</strong></font></li><li>Active 时对象可见，非 Active（无内容）时对象不可见</li><li>例：上图中 Squad Car 轨道组里的三个轨道</li></ul></li><li><p><strong>Animation Track</strong></p><ul><li>动画轨道，用来控制 Animation 的播放，颜色为<font color="blue"><strong>蓝色</strong></font></li><li>可以直接在动画轨道中 k 帧（例如上图中的 Main Camera）</li><li>也可以直接使用 Clip 组合动画效果（例如上图中的Attacker1）</li></ul></li><li><p><strong>Audio Track</strong></p><ul><li>音频轨道，用来控制Audio的播放，颜色为<font color="orange"><strong>橙色</strong></font></li><li>可以将音频 Clip 添加到该轨道</li></ul></li><li><p><strong>Control Track</strong></p><ul><li>控制轨道，用来控制预制件、特效、游戏对象等，颜色为<font color="cyan"><strong>青色</strong></font></li><li>在 Clip 外会被自动销毁（如上图中的Explosion）</li></ul></li><li><p><strong>Signal Track</strong></p><ul><li>信号轨道，用来发射信号（触发事件）</li><li>可以精确控制信号在哪一帧发出（类似动画事件）</li><li>实际上开发者可以在任意一种轨道的任意一阵插入信号。独立的Signal轨道只是起到了方便管理的作用。<br><img src="/2024/11/23/%E5%9C%A8%E7%BB%88%E9%9D%A2%E4%B9%8B%E5%90%8E%E2%80%94%E2%80%94%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%88%98%E6%96%97%E7%B3%BB%E7%BB%9F/Clipboard_2024-11-28-16-30-54.png" alt></li></ul></li><li><p><strong>Playable Track</strong></p><ul><li>用户自定义轨道，通过脚本控制，颜色为<strong>白色</strong></li><li>例如上图中的 LookAt ，用于实现逻辑</li></ul></li></ul><p>借助Timeline，我们可以将攻击动画、音效等攻击效果通过可视化界面实现精确的帧控制，它也天然适合帧同步类型的游戏。前文中，我们提到战斗系统的三要素是：</p><ol><li><p><strong>判断</strong>：boss是否能释放此技能</p></li><li><p><strong>效果</strong>：播放技能的动画和音频等特效</p></li><li><p><strong>伤害</strong>：计算技能对目标照成的伤害</p></li></ol><p>很显然，Timeline 自身的特性非常适合做<strong>效果</strong>，通过 <strong>Signal</strong> 也可以实现在某一帧触发<strong>伤害</strong>计算，一些其他的特殊战斗逻辑（例如面朝玩家、锁定玩家、向玩家移动等）则可以通过 <strong>Playable Track</strong> 实现。</p><p>结合前面的状态机思想，可以将每个状态中 boss 的行为替换成播放对应的 Timeline 资产。当然我们也可以考虑采用行为树或行为树+状态机（当一个AI足够复杂时，可以在行为树中嵌套状态机，避免行为树的遍历开销）的方式实现战斗系统。</p><p>当然，我的想法还有很多幼稚的地方，欢迎各位在评论区交流看法！</p><h1 id="参考资料">参考资料</h1><p><a href="https://www.zhihu.com/question/441024228/answer/1696249544">https://www.zhihu.com/question/441024228/answer/1696249544</a><br><a href="https://www.zhihu.com/question/459078412/answer/1953550596">https://www.zhihu.com/question/459078412/answer/1953550596</a><br><a href="https://zhuanlan.zhihu.com/p/513872343">https://zhuanlan.zhihu.com/p/513872343</a><br><a href="https://unity.com/blog/engine-platform/how-to-use-timeline-signals">https://unity.com/blog/engine-platform/how-to-use-timeline-signals</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏编程 </tag>
            
            <tag> 经验分享 </tag>
            
            <tag> 项目复盘 </tag>
            
            <tag> Unity </tag>
            
            <tag> 系统 </tag>
            
            <tag> Gameplay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#内存管理</title>
      <link href="/2024/09/16/CSharp%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/2024/09/16/CSharp%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="在c-应用的背后">在C#应用的背后…</h1><blockquote><p>C#是微软推出的一种基于.NET框架和后来的.NET的、面向对象的高级编程语言。C#衍伸自C和C++，继承了C和C++的强大功能，同时去掉了一些复杂特性，使其成为C语言家族中高效强大的编程语言。C#以.NET框架类库作为基础，拥有类似Visual Basic的快速开发能力。微软在2000年发布了这种语言，希望借助这种语言来取代Java。</p></blockquote><p><img src="https://celestialsys.com/wp-content/uploads/2020/02/NET-LANGUAGES.png" alt></p><p>.NET 框架中有一些但看缩写非常类似的概念，例如：CLI/CIL/CLR/CTS/CLS/JIT/GC 等等。</p><p>在<strong>通用语言基础架构</strong> (Common Language Infrastructure) 中，C# 在构建时会被编译为 <strong>CIL</strong> (Common Intermediate Language)，即<strong>通用中间语言</strong>（在一些地方也被称为<strong>字节码</strong>/ByteCode）。在.Net开发平台下，所有语言（C#、<a href="http://VB.NET">VB.NET</a>、J#、C++/CLI）都会被编译为通用中间语言，再由 <strong>CLR</strong> (Common Language Runtime)，即<strong>通用语言运行时</strong>负责运行。</p><p>在 CLR 中，CLR 通过 <strong>JIT</strong> (Just In - Time Compiler)，即<strong>即时编译器</strong>在运行时将中间语言转换成存储在内存中的<strong>机器码</strong>（native code），因为转换是在程序执行的过程中逐渐进行而不是一次性完成的因此被称为“即时”。由于机器码被存储，因此不需要多次转换。</p><p>CLR 还包含了<strong>公共语言规范</strong> (CLS，负责将各种 .NET 编程语言语法规则和规定转换为 CLR 可理解的格式)、<strong>通用类型系统</strong>（CTS，负责理解 .NET 编程语言的数据类型并将其转换为 CLR 可理解的格式，即值类型和引用类型）和<strong>垃圾收集</strong>（GC，提供自动内存管理功能）。</p><h1 id="c-的内存是什么样的">C#的内存是什么样的</h1><h2 id="内存分区">内存分区</h2><p>在C#中，内存分成5个区，他们分别是：</p><ul><li><p><strong>堆</strong><br>用于动态分配内存，<strong>存放引用类型</strong>对象本身。在 C# 中由 .NET 平台的垃圾回收机制（GC）管理，容量大但分配和释放速度相对较慢。栈、堆都属于动态存储区，可以实现动态分配。</p></li><li><p><strong>栈</strong><br>由编译器自动分配释放，通常容量较小，速度快。存放：</p><ul><li><strong>值类型</strong>的<strong>对象本身</strong></li><li>引用类型的<strong>引用地址</strong>（指针）</li><li>静态区对象的<strong>引用地址</strong>（指针）</li><li>常量区对象的<strong>引用地址</strong>（指针）等。</li></ul></li><li><p><strong>全局/静态存储区</strong><br>用于存储静态成员（静态变量和静态方法）、静态类、全局变量等，它们在整个程序生命周期中一直存在，直到程序运行结束时才会被释放和回收。</p></li><li><p><strong>常量存储区</strong><br>存储程序中的常量值的对象本身，通常是<strong>只读</strong>的，编译时已确定，存储在程序的数据段中。</p></li><li><p><strong>代码段</strong><br>用于存储存放编译后的程序指令，通常是只读的，在程序运行时被执行。</p></li></ul><blockquote><p><strong>为什么要在内存中对堆(Heap)和栈(Stack)进行区分？</strong><br>将内存划分为堆和栈是为了<strong>更高效地管理内存</strong>，并针对不同类型的数据进行优化处理。</p><ul><li>栈用于存储值类型和函数调用的局部变量，分配<strong>快</strong>但<strong>内存空间有限</strong>。栈的内存分配是<strong>自动且快速</strong>的，基于LIFO（后进先出）结构，分配和释放内存效率高。栈上分配的数据<strong>生命周期短</strong>，作用范围仅限于当前作用域。</li><li>堆用于存储引用类型，适合更大的对象，内存分配更灵活、管理更复杂，访问速度<strong>慢</strong>。能够支持<strong>长生命周期</strong>的数据。在堆上分配的对象需要手动或通过垃圾回收器来释放，避免内存泄漏。</li></ul></blockquote><h2 id="值类型和引用类型">值类型和引用类型</h2><p>C#中有且只存在两种变量类型：<strong>值类型</strong>(value type)和<strong>引用类型</strong>(reference type)，它们都隐式继承自万物之源 System.Object 类（不过几乎所有的引用类型都是直接从 Systerm.Object 继承，而值类型则是继承 Systerm.Object 的子类 Systerm.ValueType 类），区别在于拷贝方式的不同。</p><img src="https://eamonkeane.dev/content/images/2021/02/Frame-1-1.png" width="400/"><ul><li><strong>值类型</strong><ul><li>包含了常见的简单类型（如int、double、float、char、bool）、结构体 struct 和枚举 enum。</li><li>拷贝的是值本身（深拷贝）</li><li>不可以被派生，不支持多态。</li><li>大小最好不要超过64字节（可能与 CPU 缓存行通常是 64 字节，如果 CPU 缓存行不能装下一个完整的值类型数据可能会有性能问题有关），适合作为存储数据的载体。</li><li><u><strong>通常来说</strong></u>存储在栈上，可以被自动释放，内存管理上高效。为什么说“通常来说”呢？因为如果一个值类型的变量被一个引用类型所封装，那么这个值类型变量也会被存放在<strong>堆</strong>上。</li></ul></li></ul><img src="https://eamonkeane.dev/content/images/2021/02/Frame-2.png" width="400/"><ul><li><strong>引用类型</strong><ul><li>包含了类、接口、string和各种类型的数组。</li><li>拷贝的是值的引用，指向的是同一个地址里的值（浅拷贝）</li><li>可以派生，支持多态。</li><li>大小可以很大，适合定义应用程序的行为。</li><li>存储在堆上，需要GC或手动释放，相对低效。</li></ul></li></ul><h3 id="装箱与拆箱">装箱与拆箱</h3><p>从值类型转换到引用类型的过程就是“<strong>装箱</strong>”，反过来就是“<strong>拆箱</strong>”。相对于简单的赋值而言，装箱和取消装箱过程需要进行大量的计算，因此需要避免频繁发生装箱/拆箱的操作。</p><h4 id="装箱">装箱</h4><p><img src="https://learn.microsoft.com/zh-cn/dotnet/csharp/programming-guide/types/media/boxing-and-unboxing/boxing-operation-i-o-variables.gif" alt="在这里，o在栈中存放的是i在堆中的地址1"></p><p>装箱是将值类型转换为 object 类型或由此值类型实现的任何<strong>接口类型</strong>的过程。常见语言运行时 (CLR) 对值类型进行装箱时，会将值包装在 System.Object 实例中并将其存储在<strong>托管堆</strong>中，装箱是<strong>隐式</strong>的。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> i = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// The following line boxes i.</span></span><br><span class="line"><span class="built_in">object</span> o = i;</span><br></pre></td></tr></table></figure><h4 id="拆箱">拆箱</h4><p><img src="https://learn.microsoft.com/zh-cn/dotnet/csharp/programming-guide/types/media/boxing-and-unboxing/unboxing-conversion-operation.gif" alt></p><p>拆箱将从对象中提取值类型，是从 object 类型到值类型或从接口类型到实现该接口的值类型的<strong>显式转换</strong>。拆箱操作包括：</p><ul><li>检查对象实例，以确保它是给定值类型的装箱值。</li><li>将该值从实例复制到值类型变量中。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> i = <span class="number">123</span>;      <span class="comment">// a value type</span></span><br><span class="line"><span class="built_in">object</span> o = i;     <span class="comment">// boxing</span></span><br><span class="line"><span class="built_in">int</span> j = (<span class="built_in">int</span>)o;   <span class="comment">// unboxing</span></span><br></pre></td></tr></table></figure><p>要在运行时成功拆箱值类型，被取消装箱的项（例如上面代码中的 o ）必须是对一个对象的<strong>引用</strong>，该对象是先前通过装箱该值类型的实例创建的。尝试取消装箱 null 会导致 NullReferenceException。尝试拆箱对不兼容值类型的引用会导致 InvalidCastException。</p><h1 id="托管与非托管">托管与非托管</h1><p>在上文中提到了“<strong>托管堆</strong>”的概念，那么这里的“托管”是什么意思呢？是否还存在“非托管堆”呢？</p><p>托管堆也被称之为<strong>托管内存</strong>，是被 CLR（公共语言运行时）所托管的内存。存在<strong>非托管内存</strong> (unmanaged memory)的说法，它也被称之为<strong>原生内存</strong> (native memory)。</p><p>在这里我们还要引入<strong>托管资源</strong>和<strong>非托管资源</strong>的概念。</p><ul><li><p>托管资源<br>这是指托管堆上分配的内存资源，由 CLR 在适当的时候调用 GC 进行回收。比如我们对类或者委托等引用类型使用 new 关键字，那么创建的对象就被分配在托管内存中。</p></li><li><p>非托管资源<br>指的是 CLR 不知道如何回收的内存资源。最常见的一类非托管资源如文件、窗口、网络连接、数据库连接、笔刷、图标等。对非托管资源需要编写代码手动回收（如实现 IDisposable 接口），因此不会产生 GC。</p></li></ul><h1 id="垃圾回收-gc-garbage-collection">垃圾回收/GC(Garbage Collection)</h1><p>在前文中我们反复提到了 GC 的概念，这究竟是什么呢？</p><blockquote><p>在计算机科学中，垃圾回收（英语：Garbage Collection，缩写为GC）是指一种自动的存储器管理机制。当某个程序占用的一部分内存空间不再被这个程序访问时，这个程序会借助垃圾回收算法向操作系统归还这部分内存空间。垃圾回收器可以减轻程序员的负担，也减少程序中的错误。</p></blockquote><h2 id="net中的gc">.NET中的GC</h2><p>C# 中堆区内存由 GC 负责清理，当对象超出作用域范围或者对象失去指向的引用地址，就会在一定时间内进行统一的处理，无需程序员手动处理。为什么要使用GC呢？也可以说是为什么要使用内存自动管理？有下面的几个原因：</p><ol><li><p>提高了软件开发的抽象度；</p></li><li><p>程序员可以将精力集中在实际的问题上而不用分心来管理内存的问题；</p></li><li><p>可以使模块的接口更加的清晰，减小模块间的偶合；</p></li><li><p>大大减少了内存人为管理不当所带来的Bug；</p></li><li><p>使内存管理更加高效。</p></li></ol><p>.NET 的 GC 分为两个阶段：标记和压缩。在GC的过程中，还会用到代数算法的概念，尽可能的减少GC的开销。</p><h3 id="代数算法">代数算法</h3><img src="https://pic4.zhimg.com/v2-8b089380d3908280fd621838a8d5e8d5_r.jpg"><p>GC 的代数（Generational）算法指将托管堆分成 0 代、1 代和 2 代（这里的“<strong>代</strong>”可以理解成“<strong>辈分</strong>”，比如 0 / 1 / 2 代分别指儿子、父亲和爷爷）。该算法基于以下几个考虑因素：</p><ol><li><p>压缩托管堆的一部分内存要比压缩整个托管堆速度快。</p></li><li><p>较新的对象生存期较短，而较旧的对象生存期则较长。</p></li><li><p>较新的对象趋向于相互关联，并且大致同时由应用程序访问。</p></li></ol><p>垃圾回收主要在回收<strong>短生存期对象</strong>时发生。分代使 .NET 可以单独处理长生存期和短生存期对象。当 0 代托管堆内存满了或者没有足够的空间分配内存时就会触发 0 代GC，此时 0 代中幸存的对象将会进入 1 代（大多数对象通过第 0 代 GC 被回收，不会保留到下一代）。</p><p>如果第 0 代托管堆的回收没有回收足够的内存供应用程序创建新对象就会触发 1 代 GC，对 0 代和 1 代内存进行标记-压缩，幸存的对象将会进入 2 代。2 代 GC 也称为完整垃圾回收（full GC），因为它回收所有代中的对象（即，托管堆中的所有对象），开销较大。</p><p>对于标记-压缩算法来说，0 代 GC 和 1 代 GC 的压缩速度是很快的，因为这两个代龄加起来总是保持在 16M 左右，而 2 代就很大了（可能达到几个G）。0 / 1 代 GC 的耗时可能在几毫秒到几十毫秒，而 2 代 GC 可以达到几秒。</p><p>通常来说新分配的对象都属于 0 代，但如果新对象是大型对象，它们将延续到大型对象堆 (LOH)，这有时称为第 3 代。 第 3 代是在第 2 代中逻辑收集的物理生成。</p><p>0 代 / 1 代 / 2 代触发 GC 的频率比为 100：10：1，由此可见代数越低生存周期越短，代数越高生存周期越长。</p><blockquote><p>将代数算法的基本思想与社会学中的某些想法相关联也不是不行，我甚至觉得这非常地狱笑话。</p></blockquote><h3 id="标记-压缩算法">标记-压缩算法</h3><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/03/Table-based_heap_compaction_flattened.svg/280px-Table-based_heap_compaction_flattened.svg.png"><p>C# 的 GC 算法通常采用标记-压缩（Mark-Compact）算法。该算法分为三个阶段：</p><ol><li><p><strong>标记清除</strong>（Mark-Sweep）阶段，找到并创建所有活动对象的列表。<br>C# GC 采用可达性判断而不是引用计数的方式进行标记（避免了循环引用的问题）。假设托管堆中所有对象都可以回收，然后从根（静态、全局、局部、函数调用参数、当前CPU寄存器中的对象指针、finalization queue等）出发找出能到达的对象并标记。最后托管堆中没有打标记的对象都是不可达、没有引用的对象，可以被回收。</p></li><li><p><strong>重定位</strong>阶段，用于更新对将要压缩的对象的引用。<br>这一步是因为接下来的压缩过程将会移动托管堆中的对象，对象地址发生变化，需要修复所有引用指针，包括 stack、CPU register 中的指针以及托管堆中其他对象的引用指针。</p></li><li><p><strong>压缩</strong>（Compact）阶段，用于回收由死对象占用的空间。<br>由于对象回收之后托管堆内存空间变得不连续，需要压缩幸存的对象（类似于磁盘空间的碎片整理）。<br>压缩阶段将垃圾回收中幸存下来的对象移至段中时间较早的一端。由于复制大型对象会造成性能下降，通常不会压缩大型对象堆 (LOH)。</p></li></ol><h3 id="finalization-queue和freachable-queue">Finalization Queue和Freachable Queue</h3><p>这两个队列和 .NET 对象所提供的 Finalize 方法有关，这两个队列并不用于存储真正的对象，而是存储一组指向对象的指针。如果一个对象含有 Finalize 方法，则在 Finalization Queue 中添加一个指向该对象的指针。</p><p>在GC被启动以后，经过标记阶段分辨出哪些是垃圾。再在垃圾中搜索，如果发现垃圾中有被 Finalization Queue 中的指针所指向的对象，则将这个对象从垃圾中分离出来，并将指向它的指针移动到 Freachable Queue 中。这个过程被称为是对象的复生（Resurrection），因为这个对象的 Finalize 方法还没有被执行，所以不能让它直接被销毁，而是等待 Freachable Queue 去触发所指对象的 Finalize 方法执行，之后将这个指针从队列中剔除，这时对象才真正被销毁。</p><blockquote><p><strong>题外话</strong><br>.NET Framework 的 System.GC 类提供了控制 Finalize 的两个方法，ReRegisterForFinalize 和 SuppressFinalize。前者是请求系统完成对象的 Finalize 方法，后者是请求系统不要完成对象的 Finalize 方法。ReRegisterForFinalize 方法其实就是将指向对象的指针重新添加到 Finalization Queue 中。这就出现了一个很有趣的现象：</p><ul><li>在 Finalization Queue 中的对象可以复生到 Freachable Queue 中</li><li>对象的 Finalize 方法中调用 ReRegisterForFinalize 方法</li><li>对象回到 Finalization Queue 中<br>这样就形成了一个在堆上永远不会死去的对象，像凤凰涅槃一样每次死的时候都可以复生。</li></ul></blockquote><h2 id="unity中的gc">Unity中的GC</h2><p>虽然 Unity 的脚本采用 C# 编写，但 Unity 的 GC 不等同于 C# 的 GC，二者不能混为一谈。Unity 的内存管理是由脚本运行时（Mono 或 IL2CPP）处理的，并不是 CLR。</p><p>Unity 使用保守的 Boehm-Demers-Weiser (BDW) 垃圾收集器，在触发 GC 时它会停止程序的执行，并仅在完成其工作后恢复正常执行。BDW的工作算法可以描述如下：</p><ol><li><p>垃圾收集器<strong>暂停程序执行</strong>以进行 GC。</p></li><li><p>根扫描：扫描根，确定所有可达的活动对象，创建可访问对象的图表。</p></li><li><p>引用计数：计算每个对象的引用数量。</p></li><li><p>内存回收：垃圾收集器释放没有引用的对象（死对象）占用的内存。</p></li><li><p>垃圾收集完成后，程序继续执行。</p></li></ol><p>可以看出BDW存在两大弊端，一是执行时会暂停程序导致游戏卡住（而且因为没有代数算法，每次GC都需要扫描所有对象），二是标记清除后没有进一步的压缩和指针修复，产生大量内存碎片。</p><p>为了解决第一个问题，从 Unity 2019.1 开始，BDW 默认以<strong>增量模式</strong>使用。这意味着垃圾收集器将其工作负载分布在多个帧上，而不是停止主 CPU 线程来处理托管堆中的所有对象。增量模式整体上不会加速垃圾收集，但由于它将工作负载分布在多个帧上，因此减少了与 GC 相关的性能峰值。</p><p>因此行业内有时会有这样的说法：与其触发 GC 产生大量碎片，不如直接滥用对象池。除此之外，一些优化方式还包括：</p><ul><li>将值类型装箱，避免传递值类型变量而不是引用类型变量（一些方法的输入参数类型可能是object）</li><li>采用 StringBuilder 处理字符串操作（字符串不可变性）</li><li>在协程中警惕创建新的 WaitForSeconds 变量，而是复用</li><li>避免闭包和匿名函数</li><li>避免 LINQ 和正则表达式</li><li>使用不会产生垃圾的函数。例如使用 GameObject.CompareTag 而不是将字符串与 GameObject.tag 进行比较，因为返回新字符串会产生垃圾</li><li>在一些场合使用结构体而不是类</li></ul><p>在实际开发中，可以使用 Profiler 等性能分析工具具体分析。</p><p><img src="https://unity-connect-prd.storage.googleapis.com/20201231/learn/images/858bbe75-86a4-482b-af7e-82b46f2683e9_image4.png" alt></p><h1 id="参考资料">参考资料</h1><p><a href="https://zhuanlan.zhihu.com/p/38799766">https://zhuanlan.zhihu.com/p/38799766</a><br><a href="https://medium.com/my-games-company/memory-mastery-comparing-unity-and-net-garbage-collection-4c23e693d3a5">https://medium.com/my-games-company/memory-mastery-comparing-unity-and-net-garbage-collection-4c23e693d3a5</a><br><a href="https://www.youtube.com/watch?v=RM5N_p28d8c&amp;list=PLs0ItJ2M3S9oebJ4hx6Vk32grry0XSHf8">https://www.youtube.com/watch?v=RM5N_p28d8c&amp;list=PLs0ItJ2M3S9oebJ4hx6Vk32grry0XSHf8</a><br><a href="https://celestialsys.com/blogs/an-introduction-to-net-framework/">https://celestialsys.com/blogs/an-introduction-to-net-framework/</a><br><a href="https://zhuanlan.zhihu.com/p/113513147">https://zhuanlan.zhihu.com/p/113513147</a><br><a href="https://blog.yusong.me/dotnet/memory#%E6%95%B0%E6%8D%AE%E4%B8%8E%E5%9C%B0%E5%9D%80">https://blog.yusong.me/dotnet/memory#数据与地址</a><br><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/programming-guide/types/boxing-and-unboxing">https://learn.microsoft.com/zh-cn/dotnet/csharp/programming-guide/types/boxing-and-unboxing</a><br><a href="https://learn.microsoft.com/zh-cn/dotnet/standard/garbage-collection/fundamentals">https://learn.microsoft.com/zh-cn/dotnet/standard/garbage-collection/fundamentals</a><br><a href="https://www.bilibili.com/video/BV1oq4y1H7wz/">https://www.bilibili.com/video/BV1oq4y1H7wz/</a><br>有关于结构体实现接口：<a href="https://blog.csdn.net/snakorse/article/details/28889611">https://blog.csdn.net/snakorse/article/details/28889611</a></p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> C# </tag>
            
            <tag> 语言基础 </tag>
            
            <tag> .NET </tag>
            
            <tag> GC </tag>
            
            <tag> 内存管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECS设计模式</title>
      <link href="/2024/08/09/ECS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/08/09/ECS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://miro.medium.com/v2/resize:fit:795/1*u4_kgaIkyGWY5r0ijLazeQ.png" alt></p><h1 id="什么是ecs？为什么我们需要它？">什么是ECS？为什么我们需要它？</h1><p>在传统游戏开发中，开发者习惯于将每个功能写成一个class，例如玩家控制器（PlayerController）。在这个脚本中不但包含了玩家自身的<strong>数据</strong>（data，例如速度、血量等），还包含了针对这些数据的处理<strong>逻辑</strong>（behavior）。</p><p>有时作为开发者，我们需要在极短时间完成原型发开来验证玩法的可行性（或者我们只是打了个game jam），一些能够被重复利用的“轮子”是相当重要的。我们前面所提到的每个功能一个 class 的做法其实很不适合拓展，因为数据和行为是耦合的，不便于修改。</p><p>有没有更好的设计模式呢？接下来让我们隆重推出本文的主角——<strong>ECS设计模式</strong>！本文将参照轻量级 ECS 解决方案 <strong>Entitas</strong> 对该设计模式从源码层面进行介绍。首先，什么是<em>ECS</em> ？ECS 即 <strong>Entity-Component-System</strong>，指“<strong>实体-组件-系统</strong>”设计模式，是一种有别于传统 <strong>OOP</strong>（面向对象）类型的设计模式，它是 <strong>DOP</strong>（面向数据）的。</p><ul><li><strong>E</strong>ntity/实体<br>实体类似于 GameObject，可以简单理解为“游戏对象”。</li><li><strong>C</strong>omponent/组件<br>组件包含了实体的数据（Data）。组件有且仅有数据，不包含任何逻辑，如：位置组件（记录位置信息）、运动组件（记录速度/加速度等）等等。</li><li><strong>S</strong>ystem/系统<br>系统包含了游戏逻辑，比如运动系统负责计算速度变化等等。</li></ul><p>同时，为了便于管理，Entitas中有以下概念：</p><ul><li>Context/上下文环境<br>上下文环境包含了所有实体，开发者可以往其中添加/移除实体。同时，Context 还存储了一些全局状态（例如关卡进度、唯一玩家等等）。</li><li>Group/组<br>组可以视为 context 的子集，如果说 context 是一个数据库，group 就是通过 SELECT 从 context 中筛选出的特定类型的实体。我们可以把一类对象归为一个组（例如玩家组、子弹组），这有助于提高查询速度。</li></ul><p>ECS 把数据和逻辑解耦，各个实体上的组件中只保留了数据。逻辑运算由一个系统负责，在特定的时间点对每个它旗下的所有组件执行，那么理所当然的，每个实体上的组件里的数据不同，逻辑运算后的结果也就不同了。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+-----------------+                                            +------------+</span><br><span class="line">|<span class="string">     Context     </span>|<span class="string">                                            </span>|<span class="string"> ComponentA </span>|</span><br><span class="line">|<span class="string">-----------------</span>|<span class="string">                                            </span>|<span class="string">------------</span>|</span><br><span class="line">|<span class="string">    e       e    </span>|<span class="string">      +------------+                        </span>|<span class="string">    Data    </span>|</span><br><span class="line">|<span class="string">       e      e--</span>|<span class="string">----&gt; </span>|<span class="string">   Entity   </span>|<span class="string">                        +------------+          </span></span><br><span class="line"><span class="string"></span>|<span class="string">  e        e     </span>|<span class="string">      </span>|<span class="string">------------</span>|<span class="string">                               ^</span></span><br><span class="line"><span class="string"></span>|<span class="string">     e  e     e  </span>|<span class="string">      </span>|<span class="string"> ComponentA </span>|<span class="string">                               </span>|</span><br><span class="line">|<span class="string"> e          e    </span>|<span class="string">      </span>|<span class="string">            </span>|<span class="string">      +------------+      +---------+       +------------+</span></span><br><span class="line"><span class="string"></span>|<span class="string">    e     e      </span>|<span class="string">      </span>|<span class="string"> ComponentB-</span>|<span class="string">----&gt; </span>|<span class="string"> ComponentA </span>|<span class="string">&lt;---- </span>|<span class="string"> ASystem </span>|<span class="string"> ----&gt; </span>|<span class="string"> ComponentA </span>|</span><br><span class="line">|<span class="string">  e    e    e    </span>|<span class="string">      </span>|<span class="string">            </span>|<span class="string">      </span>|<span class="string">------------</span>|<span class="string">      +---------+       </span>|<span class="string">------------</span>|</span><br><span class="line">|<span class="string">    e    e     e </span>|<span class="string">      </span>|<span class="string"> ComponentC </span>|<span class="string">      </span>|<span class="string">    Data    </span>|<span class="string">   calculate behavior   </span>|<span class="string">    Data    </span>|</span><br><span class="line">+-----------------+      +------------+      +------------+                        +------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>区分后，代码的可读性和可维护性上得到了提升，这样一来我们可以为每个系统编写各类行为（函数）的轮子，提升开发效率了。当然，ECS的优点并不只有这么些，它真正的优点是：当面对<strong>大量游戏对象</strong>（例如1000个）时，采用ECS架构比传统的架构开销更小。为什么？</p><h2 id="针对大量游戏对象的优化">针对大量游戏对象的优化</h2><p><img src="https://cdn.mos.cms.futurecdn.net/mz2NU5EYiqXGEKzm9ejTF.jpg" alt></p><p>在RTS等类型的一些游戏中，场景内有时会同时存在大量的游戏对象。如果我们为每个游戏对象的prefab都添加了脚本Enemy，假设我们需要在脚本的 Update 函数中更新游戏对象的信息，会发生什么事呢？答案是：游戏的<strong>帧率可能出现严重下滑</strong>，特别是对于处理器性能较差的低端机型来说。</p><p>Unity 生命周期函数是基于类反射实现的，并且这一过程会在运行时不停对所有MonoBehaviour遍历进行。反射在这种情况下允许 Unity 在运行时动态调用对象的特定方法（如 Start、Update 等），而不需要编译时确定。这种方法灵活，但性能上可能稍有影响，因为反射操作通常比直接调用<strong>慢</strong>。这导致当场景中存在 1000 个游戏对象时，执行 1000 次 Update 将严重拖垮游戏帧率。</p><p>而在 ECS 中，我们只需要通过执行一次旋转<strong>系统</strong>中的 Update 函数对所有存在旋转<strong>组件</strong>的<strong>实体</strong>进行更新就可以了，不需要执行 1000 次 Update。ECS 主要的开销集中在查询和提取包含特定组件的实体上，我们可以用 pool（Entitas 中的 group） 的思想来优化这一过程。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">+-----------------+</span><br><span class="line">|<span class="string">     Context     </span>|</span><br><span class="line">|<span class="string">-----------------</span>|</span><br><span class="line">|<span class="string">    e       e    </span>|</span><br><span class="line">|<span class="string">       e      e  </span>|</span><br><span class="line">|<span class="string">  e        e     </span>|</span><br><span class="line">|<span class="string">     e  e     e  </span>|</span><br><span class="line">|<span class="string"> e          e    </span>|</span><br><span class="line">|<span class="string">    e     e      </span>|</span><br><span class="line">|<span class="string">  e    e    e    </span>|</span><br><span class="line">|<span class="string">    e    e     e </span>|</span><br><span class="line">+-----------------+</span><br><span class="line">  |<span class="string"></span></span><br><span class="line"><span class="string">  </span>|<span class="string">     +-------------+  Groups:</span></span><br><span class="line"><span class="string">  </span>|<span class="string">     </span>|<span class="string">      e      </span>|<span class="string">  Subsets of entities in the context</span></span><br><span class="line"><span class="string">  </span>|<span class="string">     </span>|<span class="string">   e     e   </span>|<span class="string">  for blazing fast querying</span></span><br><span class="line"><span class="string">  +---&gt; </span>|<span class="string">        +------------+</span></span><br><span class="line"><span class="string">        </span>|<span class="string">     e  </span>|<span class="string">    </span>|<span class="string">       </span>|</span><br><span class="line">        |<span class="string">  e     </span>|<span class="string"> e  </span>|<span class="string">  e    </span>|</span><br><span class="line">        +--------|<span class="string">----+    e  </span>|</span><br><span class="line">                 |<span class="string">     e      </span>|</span><br><span class="line">                 |<span class="string">  e     e   </span>|</span><br><span class="line">                 +------------+</span><br></pre></td></tr></table></figure><blockquote><p><strong>生命周期函数居然是基于反射实现的？</strong><br>Uniy 引擎整体是架设在 mono IDE 基础上的，支持通过 string 来查找方法，且和真正的反射一样是能够查找调用<strong>私有方法</strong>，当找到这些方法后会存下函数指针待之后使用。在 Unity 内部存在一张表，这张表的形成是通过在场景中查找全部 MonoBehaviour 类型脚本然后遍历里面的方法，将需要的调用的方法全部记录下来然后再进行调用，防止那些不需要调用的 MonoBehaviour 中的方法占用空间，节省资源开耗。</p></blockquote><blockquote><p><strong>为什么不采用多态？</strong><br>反射实际上是开销非常大的调用方式，比虚方法来说要高得多。Unity 使用这种事件机制的根本原因是出于对灵活性的考虑，因为并非所有的 MonoBehaviour 都需要 Update（或 Start，Awake 等等）。Unity 会维护一个需要 Update 的 Behaviour 列表，藉此避免进行空的虚函数调用，提高性能。Unity 采用组件式设计，触发一个事件，需要通知到相应 gameobject 的所有组件。如果使用多态来实现，则必须假设所有组件都派生自包含此事件的基类，或者筛选出派生自此基类的组件逐一通知。这样一来是麻烦，二来则容易带来复杂的继承关系，与组件式这种倡导用聚合代替继承的设计从理念上就是相悖的。</p></blockquote><h2 id="在ecs中实现事件系统">在ECS中实现事件系统</h2><p>为了严格贯彻 ECS 思想，我们需要分离数据和行为，因此我们无法采取传统的组件思想。</p><h3 id="如果我们直接遍历所有实体">如果我们直接遍历所有实体</h3><p>如何在 ECS 中触发事件呢？例如，当一个游戏对象的 y 值超出游戏可视边界（屏幕）的 y 值时，我们希望该对象被销毁，此时应该怎么办？或许我们可以直接在 system 中遍历某类 group 下的所有实体并进行检查。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span>&#123;</span><br><span class="line">  Execute();  <span class="comment">// 执行逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Execute</span>()</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> edgePos = pool.edgeEntity.position;   <span class="comment">// 获取边缘位置</span></span><br><span class="line">  <span class="keyword">foreach</span>(<span class="keyword">var</span> entity <span class="keyword">in</span> positionGroup.GetEntities())&#123; <span class="comment">// 对所有具有位置组件的实体</span></span><br><span class="line">    <span class="keyword">if</span>(entity.position.y &gt;= edgePos.y)&#123;  <span class="comment">//超出边界</span></span><br><span class="line">      entity.isDestory = <span class="literal">true</span>;  <span class="comment">// 销毁</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设存在一个针对子弹的系统 BullteSystem，在执行过程中会不断遍历所有存活的子弹 group，那么我们可以在 update 中对每个子弹的位置和每个敌人的位置进行判断，如果子弹的位置与敌人重合（举个例子）则认为子弹击中敌人。这样想想，如果不采取四叉树/八叉树缩小检索范围，开销还是很大的。</p><h3 id="如果我们专门为事件拟定一个系统">如果我们专门为事件拟定一个系统</h3><p>假设我们不愿意逐帧判断，而是仅在某些变化发生的时候对事件进行响应呢？这便是 ReactiveSystem（响应系统），它会对 context 的变化（例如全局状态上的改变）做出反应，而不是类似于一般系统那样在 Update 中逐帧执行。</p><p>举个例子，当玩家到达出口的位置时，当前关卡 + 1的实现逻辑如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触发器，用于标记玩家和玩家的位置组件</span></span><br><span class="line">TriggerOnEvent IReactiveSystem.trigger&#123;</span><br><span class="line">  <span class="keyword">get</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Matcher.AllOf(Matcher.Player, Matcher.Position).OnEntityAdded();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当玩家位置改变时，遍历所有 exitGroup 中出口的位置进行检查</span></span><br><span class="line"><span class="keyword">void</span> IReactiveExecuteSystem.Excute(List&lt;Entity&gt; entities)&#123;</span><br><span class="line">  <span class="keyword">var</span> playerPos = context.playerEntity.position;</span><br><span class="line">  <span class="keyword">foreach</span>(<span class="keyword">var</span> exit <span class="keyword">in</span> exitGroup.GetEntities())&#123;</span><br><span class="line">    <span class="keyword">if</span>(playerPos.Equals(exit.position))&#123;</span><br><span class="line">      <span class="built_in">int</span> curLevel = context.level.level;</span><br><span class="line">      context.ReplaceLevel(curLevel + <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="entitas源码学习">Entitas源码学习</h1><h2 id="核心模块">核心模块</h2><p>在Entitas源码的核心组成中，我们可以找到以下八个模块：</p><ol><li><strong>Collector</strong><br>Collector可以根据特定的组事件（groupEvent）观察并收集同一个上下文环境中一个或多个组的变化实体，用于实现ECS的事件系统。<br>上文中提到的TriggerOnEvent就归属于Collector模块。</li><li><strong>Context</strong><br>上下文环境，在一些关于Entitas的早期文档中被称为池子（pool），管理实体和组的生命周期。<br>可以创建和销毁实体，并获取实体组。<br>创建上下文的首选方法是使用代码生成器（code generator，我会在下文介绍）生成的方法，例如 var context = new GameContext()；</li><li><strong>Entity</strong><br>实体，即游戏对象。程序员可以通过 context.CreateEntity / entity.Destory 的方式创建 / 销毁实体。用户可以增加/替换/移除实体上的组件。</li><li><strong>EntityIndex</strong><br>为实体创建一个基于键值对的索引，目的是加速实体查询。它将实体与某个键（如组件中的某个值）关联起来，允许通过键快速找到相关实体集。EntityIndex 支持单个键或多个键的映射，并提供增删实体的操作。这对于大规模实体管理场景下的高效查询非常有用，特别是在需要频繁根据某个属性查找实体时。<ul><li>为实体建立索引。</li><li>提供高效的查找机制。</li><li>实体的增删操作自动更新索引。</li></ul></li><li><strong>Extentions</strong><br>工具类，包含移除字符串后缀（用于异常）和单一实体收集器。</li><li><strong>Group</strong><br>使用 context.GetGroup(matcher) 获取与指定匹配器匹配的实体组。使用相同的匹配器调用 context.GetGroup(matcher) 将始终返回相同的组实例。<br>创建的组由上下文管理，并且始终是最新的。<br>它会自动添加与匹配器匹配的实体，或者在实体不再与匹配器匹配时立即将其删除。</li><li><strong>Matcher</strong><br>匹配器，用于匹配实体组件的工具，它的作用是通过<strong>组件索引</strong>匹配实体，来判断某个实体是否具备特定条件。它的主要功能包括：<ul><li>AllOf: 匹配具有指定所有组件的实体。</li><li>AnyOf: 匹配具有指定任意组件的实体。</li><li>NoneOf: 匹配不具备指定组件的实体。</li></ul></li><li><strong>Systems</strong><br>系统模块为系统分组提供了一种便捷的方式。<br>开发者可以添加 IInitializeSystem、IExecuteSystem、ICleanupSystem、ITearDownSystem、ReactiveSystem 和其他嵌套系统实例，所有系统都将按照开发者添加的顺序进行初始化和执行。</li></ol><h3 id="context">Context</h3><blockquote><p>A context manages the lifecycle of entities and groups.<br>You can create and destroy entities and get groups of entities.<br>The preferred way to create a context is to use the generated methods from the code generator, e.g. var context = new GameContext();<br>上下文管理实体和组的生命周期。<br>您可以创建和销毁实体，并获取实体组。<br>创建上下文的首选方法是使用代码生成器生成的方法，例如 var context = new GameContext()；</p></blockquote><h4 id="context-cs"><strong>Context.cs</strong></h4><ul><li>包含了两类（实体与组）的 4 个事件<ul><li>实体创建</li><li>实体将被销毁</li><li>实体销毁</li><li>组创建</li></ul></li><li>规定了实体的相关设置<ul><li>实体所能搭载的最大组件数量</li><li>管理组件池（这是针对每一种类型的组件而言的 stack 结构的池，用于组件的复用）</li></ul></li><li>管理实体与组<ul><li>维护 context 中的实体、可复用实体（位于对象池中）、被其他对象（如 group、collector、ReactiveSystem）保留的实体数量</li><li>创建实体<ol><li>检查是否存在可复用的实体，如果不存在再创建新实体并根据相关设置进行初始化</li><li>加入 context 维护的实体列表，保留实体。保留/释放是 AERC（自动实体参照计数）的一部分，内部用于防止将保留的实体集中起来。如果手动使用保留，也必须在某些时候手动释放。</li><li>清空缓存（entitiesCache）。这是一个泛型实体数组 TEntity[]，用于居埃苏返回当前 context 中的所有实体。由于数组的特性，每次创建新的实体时需要清空缓存，并在需要的时候重新创建一次。</li><li>增加实体相关事件的委托（组件添加/组件移除/组件替换/释放实体/实体销毁）</li><li>触发实体创建事件，返回实体对象</li></ol></li><li>销毁所有实体<ol><li>获取 context 中的所有实体（TEntity[]）</li><li>逐个 Destroy，最后清空维护的实体表</li><li>如果存在被保留的实体，则返回报错</li></ol></li><li>检查上下文是否包含某个特定实体</li><li>获取所有实体（如果不存在缓存，则将实体表转成 TEntity[] 返回）</li><li>获取所有符合匹配器条件的实体（其实就是返回一个组里的实体）</li><li>获取所有符合匹配器条件的组（采用相同的匹配器返回的组是同一个）</li><li>添加 EntityIndex 名称</li><li>获取 EntityIndex 名称</li><li>重置实体 id 编号（creationIndex）</li><li>清空特定id的组件的组件池</li><li>清空所有组件池</li></ul></li><li>上下文手动创建方法<br>Entitas的作者并不建议我们通过手动方式进行创建，而是建议我们使用代码生成器。如果采用手动方式，我们需要人为</li><li>重置上下文<ul><li>摧毁所有实体</li><li>重置实体 id 编号（creationIndex）</li></ul></li><li>移除所有事件监听</li></ul><h4 id="contextinfo-cs"><strong>ContextInfo.cs</strong></h4><ul><li>包含了上下文的信息，主要用途是提供更好的报错信息。<ol><li>上下文名称 Name</li><li>组件名称数组 ComponentNames</li><li>组件类型数组 ComponentTypes</li></ol></li></ul><h3 id="entity">Entity</h3><blockquote><p>Use context.CreateEntity() to create a new entity and entity.Destroy() to destroy it.<br>You can add, replace and remove IComponent to an entity.<br>使用 context.CreateEntity() 创建新实体，使用 entity.Destroy() 销毁实体。<br>您可以在实体中添加、替换和删除 IComponent。</p></blockquote><h4 id="entity-cs">Entity.cs</h4><ul><li>包含了 5 个事件（组建添加/组件移除/组件替换/实体释放/实体摧毁）</li><li>实体属性<ul><li>实体所能搭载的最大组件数量</li><li>id（是唯一的，在context中创建实体时被设置）</li><li>isEnable（表示实体的生存状态）</li><li>RetainCount / 引用计数（保留此实体的对象数量）</li></ul></li><li>组件方法<ul><li>根据组件 id 添加组件</li><li>根据组件 id 移除组件</li><li>根据组件 id 替换组件</li><li>根据组件 id 获取组件</li><li>获取实体挂载的所有组件</li><li>获取实体挂载的所有组件的 id 组成的数组</li><li>判断是否挂载了对应组件 id 的组件</li><li>判断是否挂载了所有存在于对应一系列（int[]）组件 id 的组件</li><li>判断是否挂载了任意一个存在于对应一系列（int[]）组件 id 的组件</li><li>判断是否挂载了组件（挂在组件是否为空）</li><li>移除所有组件</li><li>根据组件 id 获取对应的组件池中的组件（如果不存在就创建一个）</li></ul></li><li>AERC管理方法<ul><li>保留该实体。一个所有者（owner）只能保留一次同一实体</li><li>释放该实体</li><li>摧毁实体</li></ul></li></ul><h4 id="entityequalitycomparer-cs">EntityEqualityComparer.cs</h4><p>实现了 IEqualityComparer&lt;TEntity&gt; 接口，用于</p><ul><li>比较两个 Entity 对象的相等性。它重写了 Equals 方法来判断两个实体对象是否相等（直接比较引用）</li><li>重写了 GetHashCode 方法返回实体的 ID 作为哈希码</li></ul><h4 id="aerc-automatic-entity-reference-counting">AERC（Automatic Entity Reference Counting）</h4><p>实体模块里最有趣的一个功能是AERC（自动实体引用计数），是一个在内部执行的有助于调试和优化性能的功能。<br>在Entitas框架中，自动实体引用计数（AERC）的作用是跟踪实体的<strong>引用数量</strong>，以防止实体在被使用时被错误回收、在计数为0时将实体返回到对象池中以释放资源。具体而言，引用计数通过 Retain 和 Release 方法来管理：</p><ol><li><strong>Retain</strong>：增加实体的引用计数，表示该实体被某个系统或对象“保留”。</li><li><strong>Release</strong>：减少引用计数，表示系统或对象不再使用该实体。 当引用计数为零时，实体才会被回收到对象池中，从而避免使用中的实体被错误回收。</li></ol><p>AERC 在实现思路上参考了 CG 的引用计数机制，分为 SafeAERC 和 UnsafeAERC 两种实现方式。SafeAERC 额外记录了谁保留了实体，提供更安全的管理，而 UnsafeAERC 只维护计数，不追踪具体的所有者。</p><ul><li><strong>SafeAERC</strong><br>SafeAERC 会检查实体是否已被保留或释放。它比 UnsafeAERC 慢，但可以保留所有者的信息。<br>每个实体在被保留（Retain）或释放（Release）时，SafeAERC 会记录和跟踪拥有它的对象。SafeAERC 通过一个哈希集合_owners 存储了所有保留实体的对象；Retain 方法会检查实体是否已经被当前对象保留，防止重复保留，而 Release 则确保只能由已保留该实体的对象进行释放。</li><li><strong>UnsafeAERC</strong><br>UnsafeAERC 不会检查实体是否已被保留或释放。它比 SafeAERC 快，但会丢失有关所有者的信息。<br>UnsafeAERC 只管理引用计数，Retain 和 Release 操作会简单增加或减少计数，不检查是否已被保留或释放，也不记录哪个对象在保留实体。因此，它更快，但无法追踪所有者。</li></ul><h3 id="system">System</h3><blockquote><p>Systems provide a convenient way to group systems.<br>You can add IInitializeSystem, IExecuteSystem, ICleanupSystem, ITearDownSystem, ReactiveSystem and other nested Systems instances.<br>All systems will be initialized and executed based on the order you added them.<br>系统为系统分组提供了一种便捷的方式。<br>您可以添加 IInitializeSystem、IExecuteSystem、ICleanupSystem、ITearDownSystem、ReactiveSystem 和其他嵌套系统实例。<br>所有系统都将按照您添加的顺序进行初始化和执行。</p></blockquote><h4 id="system-cs">System.cs</h4><p>System.cs 方便管理和执行四种类型的系统，分别是：初始化/执行/清理和终止。</p><ul><li>初始化系统<br>顾名思义，包含一个Initialize方法，可以实现各类“初始化”功能，例如“在上下文中创建一个玩家实体，并为其初始化生命值和位置”</li><li>执行系统</li><li>清理系统</li><li>终止系统</li></ul><p>代码中的每个函数在执行时，会遍历（因此是有序的）特定类型的系统列表，调用相应的初始化、执行、清理或终止操作。</p><ul><li>添加/移除系统到对应列表</li><li>按顺序执行所有特定类型系统的对应方法</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Initialize</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; _initializeSystems.Count; i++)</span><br><span class="line">    _initializeSystems[i].Initialize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>激活所有响应系统（ReactiveSystem）</li><li>停用所有响应系统</li><li>仅清除所有响应系统</li></ul><h4 id="reactivesystem-cs">ReactiveSystem.cs</h4><p>如果根据指定的收集器发生了变化，响应系统就会调用 Execute(entities)，并且只会传入发生变化的实体。<br>常见的用例是对变化做出反应，例如，实体位置发生变化时，会更新相关游戏对象的 gameObject.transform.position。</p><h4 id="parallelsystem-cs">ParallelSystem.cs</h4><p>并行系统使用实体子集调用 Execute(entities)，并将工作量分配给多个线程。<br>在 Entitas 中编写多线程代码时，不要使用 AddXyz() 和 ReplaceXyz() 等生成的方法。</p><h3 id="group">Group</h3><blockquote><p>Use context.GetGroup(matcher) to get a group of entities which match the specified matcher. Calling context.GetGroup(matcher) with the same matcher will always return the same instance of the group.<br>The created group is managed by the context and will always be up to date.<br>It will automatically add entities that match the matcher or remove entities as soon as they don’t match the matcher anymore.<br>使用 context.GetGroup(matcher) 可以获取与指定匹配器匹配的实体组。使用相同的匹配器调用 context.GetGroup(matcher) 将始终返回相同的组实例。<br>创建的组由上下文管理，并且始终是最新的。<br>它将自动添加与匹配器匹配的实体，或在实体不再与匹配器匹配时立即将其删除。</p></blockquote><p>Group 用于管理和跟踪符合特定 Matcher 的实体集合，实现动态管理实体的添加、移除和更新，并通过事件系统触发相关的回调。<br>主要功能和函数：</p><ol><li>事件系统<br>OnEntityAdded、OnEntityRemoved 和 OnEntityUpdated 事件分别在实体被添加、移除或更新时触发，通知订阅者发生的变化。</li><li>构造函数<br>Group(IMatcher<TEntity> matcher)：初始化时使用 matcher 匹配实体。<br>HandleEntity/UpdateEntity</TEntity></li><li>处理实体的添加、移除或更新逻辑，动态管理实体是否应该存在于组中。<br>AddEntity/RemoveEntity</li><li>添加或移除符合条件的实体，并触发相应事件。<br>GetEntities() / GetSingleEntity()：</li></ol><p>返回当前组内所有实体，或返回唯一的实体（如果组内只有一个实体）。</p><h3 id="matcher">Matcher</h3><h4 id="matcher-cs">Matcher.cs</h4><p>Matcher<TEntity> 类主要用于匹配实体的<strong>组件</strong>。它允许定义三个类型的组件条件：AllOf、AnyOf 和 NoneOf。</TEntity></p><p>属性：</p><ul><li>Indexes: 返回合并后的索引数组，使用 ??= 操作符进行初始化。</li><li>AllOfIndexes, AnyOfIndexes, NoneOfIndexes: 返回各自的组件索引。</li><li>构造函数</li><li>匹配方法<ul><li>AnyOf(params int[] indexes): 设置满足条件的任何组件的索引。</li><li>AnyOf(params IMatcher<TEntity>[] matchers): 允许使用其他匹配器的索引。</TEntity></li><li>NoneOf(params int[] indexes): 设置不满足条件的组件的索引。</li><li>NoneOf(params IMatcher<TEntity>[] matchers): 允许使用其他匹配器的索引。</TEntity></li><li>Matches(TEntity entity): 检查一个实体是否满足 AllOf、AnyOf 和 NoneOf 的条件。<br>总结<br>这个类通过提供灵活的组件匹配功能，支持复杂的实体查询和操作。</li></ul></li></ul><h3 id="collector">Collector</h3><blockquote><p>A Collector can observe one or more groups from the same context and collects changed entities based on the specified groupEvent.<br>收集器可观察同一上下文中的一个或多个组，并根据指定的 groupEvent 收集已更改的实体。</p></blockquote><p>作用是收集符合特定条件的<strong>组</strong>，并通过监听组的<strong>变化事件</strong>来进行实体的收集。每个 Collector 会关联一个或多个组和事件类型（如实体添加、移除或添加/移除），从而<strong>在这些事件发生时将实体收集到集合中</strong>。</p><p>主要函数解释：</p><ul><li>构造函数：创建一个 Collector，并根据传入的 Group 和 GroupEvent 来决定如何收集实体。它初始化了内部的集合和事件处理委托 _onEntityDelegate。</li><li>Activate()：激活 Collector，开始监听相关的 GroupEvent，并收集符合条件的实体。</li><li>Deactivate()：停止监听事件，并清空已收集的实体集合。</li><li>ClearCollectedEntities()：释放所有已收集的实体，并清空集合。</li></ul><h1 id="总结">总结</h1><p>总的来说，在游戏开发中的 ECS 设计模式有以下优点：</p><ol><li>性能优化：ECS将数据和逻辑分离，通过缓存友好的内存布局提高CPU缓存利用率，从而优化性能。</li><li>模块化和可扩展性：逻辑通过系统处理，数据通过组件管理，方便不同功能模块独立开发和调试。</li><li>数据驱动：实体仅是ID，组件存储数据，系统执行逻辑，可以轻松增加或移除组件来改变实体行为，灵活处理游戏状态。</li><li>并行处理：系统可独立处理各类组件，利于多线程优化（这指的是通过 Unity ECS 的 JobSystem 来进行多线程并发处理）。</li></ol><h1 id="参考资料">参考资料</h1><p><a href="https://github.com/sschmid/Entitas/wiki/Unity-Tutorial-Hello-World">https://github.com/sschmid/Entitas/wiki/Unity-Tutorial-Hello-World</a><br><a href="https://docs.unity3d.com/Packages/com.unity.entities@0.3/manual/index.html">https://docs.unity3d.com/Packages/com.unity.entities@0.3/manual/index.html</a><br><a href="https://github.com/sschmid/Entitas">https://github.com/sschmid/Entitas</a><br><a href="https://www.youtube.com/watch?v=jQEXETwgPDs">https://www.youtube.com/watch?v=jQEXETwgPDs</a><br><a href="https://www.cnblogs.com/morning-lee/p/7509018.html">https://www.cnblogs.com/morning-lee/p/7509018.html</a><br><a href="https://medium.com/%E9%81%8A%E6%88%B2%E9%96%8B%E7%99%BC%E9%9A%A8%E7%AD%86/unity-ecs-%E8%9C%BB%E8%9C%93%E9%BB%9E%E6%B0%B4-e259ccf02d09">https://medium.com/遊戲開發隨筆/unity-ecs-蜻蜓點水-e259ccf02d09</a><br><a href="https://paakmau.github.io/202002110101/">https://paakmau.github.io/202002110101/</a><br><a href="https://yimicgh.top/%E7%BF%BB%E8%AF%91/ECS-01-Core/">https://yimicgh.top/翻译/ECS-01-Core/</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 游戏开发 </tag>
            
            <tag> ECS </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络同步-可靠UDP</title>
      <link href="/2024/07/26/%E7%BD%91%E7%BB%9C%E5%90%8C%E6%AD%A5-%E5%8F%AF%E9%9D%A0UDP/"/>
      <url>/2024/07/26/%E7%BD%91%E7%BB%9C%E5%90%8C%E6%AD%A5-%E5%8F%AF%E9%9D%A0UDP/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="及时性的通用解决方案-可靠udp">及时性的通用解决方案-可靠UDP</h1><p>经过前两篇文章的学习，我们已经对网络同步中实现<strong>一致性</strong>的两种方式——帧同步和状态同步有了一定了解。现在我们需要考虑一下“<strong>及时性</strong>”，为同步算法选择一个恰当的网络协议了。传输层有两个协议：<code>TCP</code> 和 <code>UDP</code>。在能保证 UDP 传输可靠性的前提下，我们可以有“<strong>可靠UDP</strong>（RUDP）”。那么，该选择 <strong>TCP</strong> 还是 <strong>RUDP</strong> 呢？</p><center><img src="/2024/07/26/%E7%BD%91%E7%BB%9C%E5%90%8C%E6%AD%A5-%E5%8F%AF%E9%9D%A0UDP/Clipboard_2024-09-21-16-56-52.png" width="450"></center><p>可以看到，在不同的网络环境下，RUDP 的平均延迟都是要好于 TCP 的，这是为什么呢？</p><ol><li>TCP 虽然以稳定著称，但因为 TCP 的 Nagle 算法，默认情况下会收集尽量多的小包，然后再一次性发送。这样虽然这样可以减少带宽，但会导致及时性变差（不过我们可以通过 <code>TCP_NODELAY</code> 选项去关闭这个功能）。</li><li>TCP 具有超时重传机制。当客户端或服务端有一帧的包没有收到的话，直到这个包被重传到端之前，游戏的逻辑是无法正常执行的。即使使用 TCP 的快重传机制（即收到三个重复ACK时立马重传），产生的时延相比UDP来说还是太久了。</li><li>当出现丢包之后，TCP 的拥塞控制机制会触发慢启动和拥塞避免，这会限制发包的速度。</li></ol><p>因此在实际开发的过程中，一般选择 RUDP 作为传输层协议。那么，应该怎么实现可靠UDP呢？</p><h2 id="基于arq-自动重传请求">基于ARQ（自动重传请求）</h2><p>首先，我们需要了解以下几个概念：</p><ul><li><strong>RTT</strong>（Round Trip Time）<br>RTT指的是从客户端发送数据包到客户端收到服务端返回确认数据包（ACK包）的时间间隔，这段时间被称为<strong>往返时间</strong>（RTT）。</li></ul><center><img src="/2024/07/26/%E7%BD%91%E7%BB%9C%E5%90%8C%E6%AD%A5-%E5%8F%AF%E9%9D%A0UDP/Clipboard_2024-09-21-17-14-14.png" width="300"></center><ul><li><strong>RTO</strong>（Retransmission Timeout）<br>RTO指的是<strong>超时重传时间</strong>，即在客户端发送数据包后，在RTO时间内未收到服务端的ACK包，就会重新发送一个数据包过去。一般来说，RTO = 1.5RTT。</li></ul><center><img src="/2024/07/26/%E7%BD%91%E7%BB%9C%E5%90%8C%E6%AD%A5-%E5%8F%AF%E9%9D%A0UDP/Clipboard_2024-09-21-17-17-23.png" width="300"></center><ul><li><strong>最小丢包延时</strong><br>当丢包发生时，接收方最终收到发送的数据包的最小延时（也就是RTO后发送的包到达接收方的时间）。一般来说，<strong>最小丢包延时</strong> = 2RTT。</li></ul><center><img src="/2024/07/26/%E7%BD%91%E7%BB%9C%E5%90%8C%E6%AD%A5-%E5%8F%AF%E9%9D%A0UDP/Clipboard_2024-09-21-17-24-59.png" width="300"></center><p>基于上面的三个概念，我们可以发展出以下三种实现RUDP的方式：</p><ol><li><strong>等待式</strong><br>每次客户端发送一个包，都要等到收到服务端的ACK包后才发送下一个。这种实现模式对信道的浪费比较严重，大部分时间信道都很空闲。</li></ol><img src="/2024/07/26/%E7%BD%91%E7%BB%9C%E5%90%8C%E6%AD%A5-%E5%8F%AF%E9%9D%A0UDP/Clipboard_2024-09-21-17-50-11.png" width="300"><ol start="2"><li><strong>后退N步</strong><br>客户端每次发一堆包，收到服务器的一堆ACK包后检查有没有哪个漏了，有的话<strong>从漏掉的包开始重新发送</strong>（服务器会丢弃缺漏包后的所有包）。这种模式对流量的占用较大，导致信道繁忙。</li></ol><img src="/2024/07/26/%E7%BD%91%E7%BB%9C%E5%90%8C%E6%AD%A5-%E5%8F%AF%E9%9D%A0UDP/Clipboard_2024-09-21-17-50-28.png" width="300"><ol start="3"><li><strong>选择重发</strong><br>和后退N步类似，但只<strong>选择性地重发未收到</strong>ACK包的包，服务器不会丢弃其他包。</li></ol><img src="/2024/07/26/%E7%BD%91%E7%BB%9C%E5%90%8C%E6%AD%A5-%E5%8F%AF%E9%9D%A0UDP/Clipboard_2024-09-21-17-51-55.png" width="300"><p>在ARQ中，已经有了大量现成的解决方案（如KCP），但其 <u>最小丢包时延较高</u>。关于KCP有篇很好的文章：<a href="https://luyuhuang.tech/2020/12/09/kcp.html#%E5%8F%91%E9%80%81-%E6%8E%A5%E6%94%B6%E4%B8%8E%E9%87%8D%E4%BC%A0">https://luyuhuang.tech/2020/12/09/kcp.html#发送-接收与重传</a></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">KCP报文结构：</span><br><span class="line"><span class="section">0               4   5   6       8 (BYTE)</span></span><br><span class="line"><span class="section">+---------------+---+---+-------+</span></span><br><span class="line">|     conv      |cmd|frg|  wnd  |</span><br><span class="line"><span class="code">+---------------+</span>---<span class="code">+---+</span>-------+   8</span><br><span class="line">|     ts        |     sn        |</span><br><span class="line"><span class="code">+---------------+</span>---------------+  16</span><br><span class="line">|     una       |     len       |</span><br><span class="line"><span class="code">+---------------+</span>---------------+  24</span><br><span class="line">|                               |</span><br><span class="line">|        DATA (optional)        |</span><br><span class="line"><span class="section">|                               |</span></span><br><span class="line"><span class="section">+-------------------------------+</span></span><br></pre></td></tr></table></figure><ul><li>conv 4 字节: 连接标识.</li><li>cmd 1 字节: Command.</li><li>frg 1 字节: 分片数量，表示随后还有多少个报文属于同一个包.</li><li>wnd 2 字节: 发送方剩余<strong>接收窗口</strong>的大小，有助于对端控制发送速率.</li><li>ts 4 字节: 时间戳，可以用来估算 RTT 和 RTO.</li><li>sn 4 字节: 报文编号.</li><li>una 4 字节: 发送方的接收缓冲区中<strong>最小</strong>还未收到的报文段的编号. 也就是说, <strong>编号比它小的报文段都已全部接收</strong>.</li><li>len 4 字节: 数据段长度.</li><li>data: 数据段. 只有数据报文会有这个字段</li></ul><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VAe7614553a30e4477c20cfc11f919a868.png" alt="KCP示意图" width="500"><h2 id="基于fec-前向冗余纠错">基于FEC（前向冗余纠错）</h2><img src="/2024/07/26/%E7%BD%91%E7%BB%9C%E5%90%8C%E6%AD%A5-%E5%8F%AF%E9%9D%A0UDP/Clipboard_2024-09-21-17-53-45.png" width="500"><p>在FEC中，最小丢包延迟比ARQ的小，但它只适用于<strong>帧同步</strong>中，并且实现算法比较复杂、没有现成的实现方案（需要自己造轮子）。</p><h1 id="丢包时应该怎么办？">丢包时应该怎么办？</h1><p>丢包分为两种：相关性丢包和随机性丢包。</p><ol><li><strong>相关性丢包</strong><br>这种丢包通常是由链路拥塞、路由器负载过高、无线信号衰减、基站/场景切换等程序员无法干预的情况导致的。我们知道丢包的原因，但无法解决。</li><li><strong>随机性丢包</strong><br>这种丢包通常是由于二进制信道噪声产生的，完全是随机出现的，将近90%的丢包都属于这种类型。<br>基于吉尔伯特模型，我们可以计算出连续K次丢包的概率（随着k的增加，概率是会越来越低的）。因此，为了避免随机性丢包，我们可以连发2次同一个包（如果2次不够就发送3次）。</li></ol><blockquote><p><strong>UDP包与MTU</strong><br>由于网络信道存在MTU的概念，当一个UDP包的大小超过MTU时，打包就会被拆成IP分片小包，在收到时再重组成UDP大包。<br>但分成小包进行传输，其实是很容易遇到丢包的情况的。一旦IP分片中有一个包丢失了，系统就会丢弃整个UDP大包。<br>因此，我们有时候需要人为地将一个UDP大包拆成小包发送，并留意信道的MTU大小。经验MTU大小为<strong>470字节</strong>。</p></blockquote><h1 id="参考资料">参考资料</h1><p><a href="https://gameinstitute.qq.com/course/detail/10242">https://gameinstitute.qq.com/course/detail/10242</a><br><a href="https://www.youxituoluo.com/528021.html">https://www.youxituoluo.com/528021.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 探索发现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏编程 </tag>
            
            <tag> 经验分享 </tag>
            
            <tag> 网络 </tag>
            
            <tag> UDP </tag>
            
            <tag> TCP </tag>
            
            <tag> 可靠UDP </tag>
            
            <tag> KCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Portfolio</title>
      <link href="/2024/07/25/Portfolio-EN/"/>
      <url>/2024/07/25/Portfolio-EN/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>In this article, I will list all the works I have participated in or completed, as well as some related work!</p><h1 id="game-projects">Game Projects</h1><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2020">2020</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="2020-net-ease-high-school-minigame-competition-前世今生狩猎小队"><strong>2020 Net-Ease High School MiniGame Competition - 前世今生狩猎小队</strong></h3></div></div><div class="timeline-item-content"><div class="videos" col="2"><div class="video"><video controls preload><source src="https://academy.fp.ps.netease.com/file/5f97ef376f0494067ef191129iWlEcks02" type="video/mp4">Your browser does not support the video tag.</video></div></div><p><mark class="hl-label green">Art</mark><br><strong>Introduction</strong>：In <em>前世今生狩猎小队</em>, players take on the role of hunters hunting a giant monster. Each time a hunter dies, a new clone is created to replicate the player’s previous actions. After multiple deaths, a squad is formed, working together to finally defeat the monster.<br><strong>Main Work</strong>：This was my first game project, where I was responsible for creating game scenes, items, and other materials.</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="west-2-online-third-round-assessment-big-watermelon"><strong>West 2 Online Third Round Assessment - Big watermelon</strong></h3></div></div><div class="timeline-item-content"><p><mark class="hl-label green">Full-Stack</mark><br><a href="https://cattyhouse-guiny.xyz/2021/01/30/%E7%94%A8unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C/">Link to my previous post</a><br><strong>Introduction</strong>：This project was my work for the third round assessment of the Unity direction in the “West2Online Studio” computer-related club during my undergraduate studies. The assessment required completing a mini-game remake within a month, and I chose the popular mini-game “Big Watermelon.”<br><strong>Main Job</strong>：This was my first game project as a full stack developer, through which I became familiar with the basic functions of the Unity game engine.</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="west2online-fourth-round-assessment-arknights-remake"><strong>West2Online Fourth Round Assessment - Arknights Remake</strong></h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/25/Portfolio-EN/image.png" alt><br><mark class="hl-label green">Full-Stack</mark><br><a href="https://cattyhouse-guiny.xyz/2021/04/03/%E7%94%A8unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F/">Link to my previous post</a></p><p><strong>Introduction</strong>: This project was my work for the fourth round assessment of the Unity direction in the “West2Online Studio” computer-related club during my undergraduate studies. The task was to complete a remake of the tower defense gameplay of the mobile game “Arknights” within a month.<br><strong>Main Work</strong>：This was my second game project as a full stack developer, where I learned and used skeletal animation, A* pathfinding algorithm, UGUI, object pooling, and other functions.<br><strong>Source Code</strong>：<a href="https://github.com/Guiny-Time/Arknights">https://github.com/Guiny-Time/Arknights</a></p></div></div></div><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2021">2021</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="west2online-fifth-round-assessment-幽港疑云"><strong>West2Online Fifth Round Assessment - 幽港疑云</strong></h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/25/Portfolio-EN/%E5%B9%BD%E6%B8%AF%E7%96%91%E4%BA%91.jpg" alt><br><mark class="hl-label green">Art</mark> <mark class="hl-label green">UIUX</mark> <mark class="hl-label green">Programmer</mark><br><strong>Introduction</strong>: <em>幽港疑云</em> is a 2D narrative puzzle game developed with team members during the fifth round assessment of the Unity direction in the “West2Online Studio” computer-related club during my undergraduate studies.<br><strong>Main Work</strong>: In this project, my work included:</p><ul><li>Programming: I implemented a stack-based UI panel stacking system and related UI functions, and learned about the TextMeshPro component.</li><li>Art: Responsible for drawing all art assets, creating character skeletal animations, and using Unity URP’s 2D lighting assets to enhance the visual effects of the game.</li><li>Version Control: We used git + Github for version control and remote repository, and I learned version control-related skills.</li></ul><p><strong>Source Code</strong>:<a href="https://github.com/ludens-studio/ProjectW">https://github.com/ludens-studio/ProjectW</a></p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="2021-net-ease-high-school-minigame-competition-翻转剧场"><strong>2021 Net-Ease High School MiniGame Competition - 翻转剧场</strong></h3></div></div><div class="timeline-item-content"><div class="videos" col="2"><div class="video"><video controls preload><source src="https://academy.fp.ps.netease.com/file/617917fd2786fd3744134810wQQcdJJz03" type="video/mp4">Your browser does not support the video tag.</video></div></div><p><mark class="hl-label green">UIUX</mark> <mark class="hl-label green">Programmer</mark> <mark class="hl-label green">3DAnimation</mark><br><strong>Introdution</strong>：<em>翻转剧场</em> is a platform jumping puzzle game that tells a story about movies and dreams. This project participated in the 2021 NetEase Games College MINI-GAME Challenge but unfortunately did not make it to the finals.<br><strong>Main Work</strong>： In this project, I was mainly responsible for three aspects of work:</p><ul><li>Programming: I was responsible for the design and implementation of UI-related functions.</li><li>Art Assets: I modeled and rigged the main character using Blender and created the character’s 3D animations. I also designed the game’s UI.</li><li>Version Control: This time we used Unity’s PlasticSCM for version control, and I further learned version control-related skills.</li></ul></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="west2online-sixth-round-assessment-深网防线"><strong>West2Online Sixth Round Assessment - 深网防线</strong></h3></div></div><div class="timeline-item-content"><iframe frameborder="0" src="https://itch.io/embed/1343140" width="552" height="167"><a href="https://guinytime.itch.io/deep-web-defineline">Deep Web Defineline(深网防线) by Guinyの时光</a></iframe><p><mark class="hl-label green">Programmer</mark> <mark class="hl-label green">UIUX</mark> <mark class="hl-label green">VFX</mark><br><strong>Introduction</strong>: <em>深网防线</em> is a 3D tower defense game where players use antivirus tools to build defense towers, enhance their defense network with different upgrade cards, and fight against invading viruses. This project was developed with team members during the sixth round assessment of the Unity direction in the “West2Online Studio” computer-related club during my undergraduate studies.<br><strong>Main Work</strong>：In this project, my work included:</p><ul><li>Programming: Responsible for monster generation logic, UI assembly, and related functions.</li><li>Art: Responsible for the design of scenes, UI/UX.</li><li>Visual Effects: First exposure to engine rendering pipeline, using ShaderGraph to achieve some visual effects, such as the rotating effect of the background display screen in the opening scene.</li></ul></div></div></div><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2022">2022</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="ludum-dare-49-babel-blocks"><strong>Ludum Dare 49 - Babel Blocks</strong></h3></div></div><div class="timeline-item-content"><iframe frameborder="0" src="https://itch.io/embed/1224635" width="552" height="167"><a href="https://guinytime.itch.io/babel-blocks">Babel Blocks(绝地天通) by Guinyの时光</a></iframe><p><mark class="hl-label green">Art</mark> <mark class="hl-label green">Programmer</mark> <mark class="hl-label green">UIUX</mark><br><strong>Introduction</strong>: <em>Babel Blocks</em> is a mini-game about building and destruction. Players need to build their skyscraper by purchasing bricks and strive to protect their world in the face of relentless nature. This project participated in the 49th Ludum Dare extreme game development competition and achieved a total ranking of 1413 / 2500.<br><strong>Main Work</strong>：This was my first time participating in a jam-type extreme game development activity, and the 72-hour development time was a big challenge for me. After spending nearly a day determining the gameplay and division of labor, my work mainly focused on the following three aspects:</p><ul><li>Programming: Responsible for the implementation of the in-game store logic, UI-related functions, and the bottom broadcast system.</li><li>Art: Responsible for designing and drawing all art assets of the game, including the interface, brick materials, and logo.</li></ul><p><strong>Project Link</strong>：<a href="https://ldjam.com/events/ludum-dare/49/babel-blocks">https://ldjam.com/events/ludum-dare/49/babel-blocks</a></p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="douyin-game-type-video-effects-development-宅家舞蹈秀">Douyin Game-type Video Effects Development - 宅家舞蹈秀</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/25/Portfolio-EN/HomeShow.png" alt><br><mark class="hl-label green">Programmer</mark><br><strong>Introduction</strong>: <em>宅家舞蹈秀</em> is a mini-game type video effect on Douyin, which was produced during my internship in the ByteDance Intelligent Creation Department. This special effect was officially launched on Douyin during the May Day period in 2022 after verification.<br><strong>Main Work</strong>：In the initial exposure to the department’s self-developed engine and Lua programming, I successfully completed the video effect development based on the new algorithm model within two weeks, using the audio, sequence frame animation, UI framework, and other functions of the self-developed engine, and learned about the production process of video effects.</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="bytedance-ic-hackthon-2022-linsten-in-the-dark">Bytedance IC Hackthon 2022 - Linsten in the Dark</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/25/Portfolio-EN/listen_in_dark.png" alt><br><mark class="hl-label purple">Technical-Challenge-Award(Nomination)</mark> <mark class="hl-label purple">PicoAudioSDK-Best-User-Award</mark> <mark class="hl-label green">Tester</mark> <mark class="hl-label green">Programmer</mark><br><strong>Introduction</strong>: <em>Listen in the Dark</em> is a VR audio navigation game that blind people can play. This project participated in the 2022 ByteDance Intelligent Creation Department Hackathon competition and was developed within 48 hours. Our team developed a demo with three chapters and an initial tutorial level within two days, and the final work achieved a total score of 27/190, winning the PicoAudioSDK Best User Award and being nominated for the Technical Challenge Award.<br><strong>Main Work</strong>: In this project, as the main programmer, I learned about VR game development based on OpenXR + Pico.<br><strong>Source Code</strong>: <a href="https://github.com/yinhao21/hackathon2022">https://github.com/yinhao21/hackathon2022</a></p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="2022-china-college-computer-competition-wechat-mini-program-application-development-competition-话榕">2022 China College Computer Competition WeChat Mini Program Application Development Competition - 话榕</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/25/Portfolio-EN/%E7%99%BB%E9%99%86%E6%B3%A8%E5%86%8C.png" alt><br><mark class="hl-label purple">South-China-Region-Third-Prize</mark> <mark class="hl-label green">GUI</mark><br><strong>Introduction</strong>: <em>话榕</em> is a work that I and my undergraduate classmates participated in the 2022 China College Computer Competition WeChat Mini Program Application Development Competition, and the project finally won the third prize in the South China region.<br><strong>Main Work</strong>: In this project, I was responsible for completing the GUI design work of the mini program online with team members through Figma, learning and understanding the production process of application wireframes and prototypes, and strengthening the interaction design knowledge I had learned.</p></div></div></div><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2023">2023</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="undergraduate-fyp-starway">Undergraduate FYP - StarWay</h3></div></div><div class="timeline-item-content"><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=655699853&bvid=BV1La4y1G7RM&cid=1115071247&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><p><mark class="hl-label purple">College-Level-Outstanding-FYP</mark> <mark class="hl-label green">Full-Stack</mark><br><strong>Introduction</strong>: <em>Star Way</em> is a puzzle game project that I independently developed as my undergraduate FYP. I wrote my undergraduate essay based on this project and won the 2023 Fuzhou University College-Level Outstanding FYP.<br><strong>Main Work</strong>：</p><ul><li>Programming: Fully responsible for the entire development and version control of the game, using pathfinding algorithms, behavior trees, object pooling, and other algorithms for development, and achieving stylized water rendering in the project. During the project development, my computer hard drive broke, but thanks to the habit of using a remote repository, I did not have to start the thesis from scratch.</li><li>Design: Designed the core gameplay and three levels of the game (including the tutorial level).</li><li>Art: Determined the artistic style of the game, designed the game’s UIUX; used MagicVoxel for character modeling and animation production.</li></ul><p><strong>Source Code</strong>：<a href="https://github.com/Guiny-Time/StarWay">https://github.com/Guiny-Time/StarWay</a></p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="3rd-game-for-good-game-jam-hold-on">3rd Game for Good Game Jam - Hold On！</h3></div></div><div class="timeline-item-content"><iframe frameborder="0" src="https://itch.io/embed/2238172" width="552" height="167"><a href="https://guinytime.itch.io/hold-on-h5ver">Hold on- h5 version by Guinyの时光</a></iframe><p><mark class="hl-label purple">Public-Welfare-Certificate</mark> <mark class="hl-label green">Programmer</mark><br><strong>Introduction</strong>: <em>Hold On!</em> is a local two-player cooperative disaster rescue 3D game where players play as rescuers, rescuing patients with different injuries at the disaster site. This project participated in the third Game for Good Game Jam and won a public welfare certificate (top ten).<br><strong>Main Work</strong>:</p><ul><li>Programming: In this project, I was mainly responsible for constructing the level logic. The project used the Feel framework to achieve many effects, and I was responsible for managing them in the program.</li></ul></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="gcores-booom-game-jam-信徒">Gcores BOOOM Game Jam - 信徒</h3></div></div><div class="timeline-item-content"><iframe frameborder="0" src="https://itch.io/embed/2308752" width="552" height="167"><a href="https://guinytime.itch.io/believer">信徒 by Guinyの时光</a></iframe><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=747222751&bvid=BV1zC4y1G7Hg&cid=1298893261&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><p><mark class="hl-label green">Programmer</mark><br><strong>Introduction</strong>: <em>信徒</em> is a Cthulhu-style tower defense strategy game where players generate friendly units by rolling dice to kill invading enemies. This project participated in the 2023 Gcores BOOOM Game Jam.<br><strong>Main Work</strong>: In this project, as the only programmer, I completed all the programming-related work and version management of the project.</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="game-design-course-final-project-ape-evolution">Game Design Course Final Project - Ape Evolution</h3></div></div><div class="timeline-item-content"><iframe frameborder="0" src="https://itch.io/embed/2455630" width="552" height="167"><a href="https://guinytime.itch.io/ape-evolution">Ape Evolution by Guinyの时光</a></iframe><p><mark class="hl-label green">Full-Stack</mark><br><strong>Introduction</strong>: <em>Ape Evolution</em> is a 2D top-down view ape evolution simulator demo. This project was the final project for the school game design course. I designed 30 different gene types and 4 different natural selection mechanisms, allowing players to select apes on the planet and eventually evolve them into humans under suitable survival pressure.<br><strong>Main Work</strong>: This project was independently developed by me, taking nearly a month. In this project, I used JSON files to store gene types and assigned them to new apes based on heredity/mutation. In addition, I implemented the localization function of the project through configuration tables.<br><strong>Source Code</strong>: <a href="https://github.com/Guiny-Time/ApeEvolution">https://github.com/Guiny-Time/ApeEvolution</a></p></div></div></div><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2024">2024</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="global-game-jam-hongkong-2024-cluckcluck">Global Game Jam HongKong 2024 - CluckCluck</h3></div></div><div class="timeline-item-content"><iframe frameborder="0" src="https://itch.io/embed/2499917" width="552" height="167"><a href="https://guinytime.itch.io/cluckcluck">CluckCluck by Guinyの时光</a></iframe><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=454292809&bvid=BV1A541117LF&cid=1421716595&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><p><mark class="hl-label purple">Best-Competitive-Game-Award</mark> <mark class="hl-label green">Programmer</mark><br><a href="https://cattyhouse-guiny.xyz/2024/02/01/2024ggj%F0%9F%8C%8F%20-%20cluckcluck%E5%A4%8D%E7%9B%98%E2%80%94%E2%80%94%E6%96%B0%E8%BE%93%E5%85%A5%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%89%8B%E6%9F%84%E6%8E%A7%E5%88%B6/">Link to my previous post</a></p><p><strong>Introduction</strong>: <em>CluckCluck</em> is a local same-screen two-player controller competitive 2D game. This project participated in the 2024 Global Game Jam Hong Kong offline 48-hour development event and won the Best Competitive Game Award at GGJ Hong Kong.<br><strong>Main Work</strong>: Using Unity’s new input system combined with gamepads, I achieved the function of playing the game with two gamepads on one computer. This was also my first game using gamepads as input, which made me realize the many possibilities of gamepads.<br><strong>Source Code</strong>: <a href="https://github.com/GGJHK2024/GGJ2024Project">https://github.com/GGJHK2024/GGJ2024Project</a></p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="graduate-fyp-one-last-interview">Graduate FYP - One Last Interview</h3></div></div><div class="timeline-item-content"><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=1656089323&bvid=BV1yE421A76p&cid=1616495693&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><p><mark class="hl-label green">Programmer</mark><br><strong>Introduction</strong>: <em>One Last Interview</em> is a 2D side-scrolling game project, which is my graduate thesis project. I served as the sole programmer in this project. The project has been submitted to the 2024 Tencent Game Creation Competition College Track and indiePlay China 2024.<br><strong>Main Work</strong>: In the first two months of the project, I completed three prototype iterations, and finally, in two months, I used the 2D platform solution Corgi Engine as the core tool to complete all the development work in the demo. Many functions relied on components within the Corgi Engine, but most were modified and extended based on the original components to meet project needs (such as the “parry” function that the Corgi Engine does not have). I also took this opportunity to learn the architectural ideas of commercial engines.<br><strong>Source Code</strong>: <a href="https://github.com/GGJHK2024/ShadowWarrior">https://github.com/GGJHK2024/ShadowWarrior</a></p></div></div></div><h1 id="modules-functions">Modules/Functions</h1><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2022">2022</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="voice-recognition-facial-expression-change-based-on-unity">Voice Recognition + Facial Expression Change Based on Unity</h3></div></div><div class="timeline-item-content"><p><strong>Introduction</strong>: This is a basic demo that uses Unity’s voice recognizer PhraseRecognizer combined with 3D model animation to achieve the function of changing facial expressions based on keywords. Users can configure keywords themselves. In the demo, I used “Good morning,” “Good night,” “a,” “e,” “i,” “o,” and “u.”<br><strong>Main Work</strong>: Created model animations and completed the configuration of PhraseRecognizer.</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="3d-model-clipping-effect-based-on-depth-testing">3D Model Clipping Effect Based on Depth Testing</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/25/Portfolio-EN/aabb.png" alt><br><strong>Introduction</strong>: This was a task I received during my internship at ByteDance. In an app that scans real objects to generate 3D models, users may scan extra parts that need to be clipped and send the clipping data to the server.<br><strong>Main Work</strong>: I was responsible for implementing the model clipping effect, user interaction logic, and cross-end message transmission. I used the AABB bounding box information of the model to draw the clipping box and applied materials, combined with depth testing and other graphics knowledge to achieve the special clipping effect given by the designer, and implemented the chain of listening to client messages and sending clipping information.</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="water-rendering-and-interactive-water-implementation-based-on-unity">Water Rendering and Interactive Water Implementation Based on Unity</h3></div></div><div class="timeline-item-content"><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=562934403&bvid=BV1pv4y127nS&cid=899741090&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=730458751&bvid=BV1bD4y1q7s9&cid=831153018&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=303589905&bvid=BV15P411E7Ub&cid=846825486&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=775558915&bvid=BV1W14y1n7cv&cid=903231810&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><p><strong>Introduction</strong>: These are some rendering exercises I did while learning computer graphics and Unity’s Shader Graph. I tried basic normal disturbance water rendering, stylized water rendering, Gerstner Wave-based water rendering, and interactive water implementation.</p><p><a href="https://cattyhouse-guiny.xyz/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/">Link to my previous post</a><br><a href="https://cattyhouse-guiny.xyz/2022/09/29/%E5%9F%BA%E4%BA%8Egerstner%20wave%E7%AE%97%E6%B3%95%E7%9A%84%E6%B5%B7%E6%B4%8B%E5%AE%9E%E7%8E%B0/">Link to my previous post</a></p></div></div></div><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2023">2023</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="desktop-audio-application-based-on-unity">Desktop Audio Application Based on Unity</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/25/Portfolio-EN/audio.png" alt><br><strong>Introduction</strong>: This is a desktop application based on Unity that supports audio response and click-through. The audio response line drawing part is implemented using the LineRenderer component, and the click-through is achieved using Unity’s background running function and the user32.dll file.<br>This project can be used for wallpaper engines.</p></div></div></div><h1 id="others">Others</h1><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2024">2024</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="translation-of-the-shader-bible">Translation of “The Shader Bible”</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/25/Portfolio-EN/USB.png" alt></p><p><a href="https://zhuanlan.zhihu.com/p/645676077">[Translation] Unity Shader Bible/Unity Shader Bible Full Book Directory - Article by Geometric Glacier - Zhihu</a></p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="procedural-modeling-attempt-based-on-blender-geometry-nodes">Procedural Modeling Attempt Based on Blender Geometry Nodes</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/25/Portfolio-EN/flower.png" alt><br>This is a verification I did for a course final project. After fine-tuning the node parameters, I successfully obtained various types of flowers.<br>This is the final product↓<br><img src="/2024/07/25/Portfolio-EN/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240721183048.jpg" alt></p></div></div></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络同步-状态同步</title>
      <link href="/2024/07/24/%E7%BD%91%E7%BB%9C%E5%90%8C%E6%AD%A5-%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5/"/>
      <url>/2024/07/24/%E7%BD%91%E7%BB%9C%E5%90%8C%E6%AD%A5-%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是状态同步？">什么是状态同步？</h1><p>状态同步就类似于我们在网络同步系列的第一篇文章中说的直接同步用户的<strong>状态</strong>。客户端将指令发送给服务端，服务端计算出状态后广播给其他客户端，客户端收到后进行更新。这样虽然会加重服务端的运算负载，但可以有效避免客户端作弊的发生。</p><p>当然，我们还可以结合一下<strong>分布式</strong>运算的想法，将计算压力分摊到客户端上。在这种模式中，客户端将部分指令即时计算成状态之后，将状态发送给其他客户端（其他客户端同理），其他客户端收到后进行更新。</p><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VAdc904947446c8ac38954adf15226d176.png" width="500"><h2 id="状态同步的临界问题">状态同步的临界问题</h2><p>仔细观察下图所示的临界情况：</p><center><img src="/2024/07/24/%E7%BD%91%E7%BB%9C%E5%90%8C%E6%AD%A5-%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5/Clipboard_2024-09-20-16-21-17.png" width="400"></center><p>在这个情况中，假设：</p><ol><li>下方的玩家向上走了一步，向服务端发送“向上一步、夺旗”的状态；</li><li>上方的玩家在接收到这个状态之前向下走了一步，向服务端发送“向下一步、夺旗”的状态。</li><li>此时两个玩家的状态都变成了“夺旗”，到底谁获得了胜利呢？</li></ol><p>这就涉及到状态同步的<strong>仲裁权问题</strong>。两个玩家都在竞争“仲裁权”，我们需要结合具体的信息（例如状态更新的时间）进行公平公正的仲裁。有两种可行的思路：</p><h3 id="强一致性">强一致性</h3><p>服务器模式（由服务器计算指令）就是一种<strong>强一致性</strong>的方式，因为只存在一个逻辑仲裁点（服务器），这从根本上避免了冲突。两个用户把指令发送到服务器上，服务器根据指令发送的时间戳判断哪个玩家先夺得旗帜。</p><p>而在分布式模式中，不同客户端仅对单一状态进行仲裁，两个客户端不能仲裁同一个状态，这样就可以实现仲裁权的分割。只不过这个做法比较理想化，不符合联机游戏的特征、存在扩展风险。</p><h3 id="弱一致性">弱一致性</h3><p>在弱一致性方法中，我们首先要对所有一致性做一个区分：哪些是<strong>核心一致性</strong>，哪些是<strong>非核心一致性</strong>？</p><ul><li><p><strong>核心一致性</strong>：可能影响双方的状态采用单点仲裁处理、异步交互（如：fps游戏中是否命中、赛车游戏中的道具），这部分需要放在服务端上进行计算。</p><ul><li>单点逻辑仲裁<strong>对操作响应的延迟很敏感</strong>。</li><li>比较慢，因为需要服务器计算后合包再发送给各个客户端，这中间存在时延。因此更适合<strong>对核心仲裁延迟相对不敏感</strong>的情况（比如fps的命中判定并不是立刻判定完成的，但结合“子弹存在飞行时间”等ux因素，对玩家的体验影响并不太大）。</li><li>一致性有容错空间。</li></ul></li><li><p><strong>非核心一致性</strong>：仅对自身有影响的状态采用仲裁分割、延迟同步（如：赛车游戏中自身位置、fps游戏中的位置等），这部分可以分布式处理。</p><ul><li>对于<strong>物理</strong>、<strong>3D</strong>这些比较复杂的运算，如果全部交给服务端将对其造成较大的计算负荷，因此这部分状态判定可以交由客户端本身进行处理。</li></ul></li></ul><h2 id="fps的回溯判定">fps的回溯判定</h2><p>fps对于精度的判断要求很高，在存在服务器状态延迟、射击指令延迟的时候应该怎么准确的进行命中仲裁呢？此时服务器需要<strong>回溯</strong>射击发生当时的状态，进行判断。</p><center><img src="/2024/07/24/%E7%BD%91%E7%BB%9C%E5%90%8C%E6%AD%A5-%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5/Clipboard_2024-09-20-17-03-56.png" width="300"></center><p>在上图所示的例子中，蓝色玩家在射击时向服务器发送了射击指令，经过延迟服务器收到后计算出橙色玩家已经走到了下面的位置、子弹飞到了右侧的位置，此时子弹和橙色玩家并没有接触。</p><p>但这样我们就可以直接判断子弹没有命中橙色玩家吗？显然是不行的，因为我们不知道子弹飞行的过程中是否击中了橙色玩家，因此需要做“<strong>回溯判定</strong>”的操作。服务器会采用一些高效的逐帧检查，直到检测出命中/不命中。</p><center><img src="/2024/07/24/%E7%BD%91%E7%BB%9C%E5%90%8C%E6%AD%A5-%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5/Clipboard_2024-09-20-17-35-35.png" width="300"></center><h1 id="优点与缺点">优点与缺点</h1><h2 id="优点"><strong>优点</strong></h2><pre><code>- 支持更多玩家和更长时间的运行- 更安全（不容易作弊）- 断线重连更快- 实时性更好- 适合小规模状态/可划分子系统（适用于fps/赛车/三消等）- 较小的计算量- 输入延迟低，因为本地就计算好状态了</code></pre><h2 id="缺点"><strong>缺点</strong></h2><ul><li>大规模状态时同步的数据也大</li><li>流量大</li><li>分布式计算/复杂逻辑的一致性难以协调，导致后期维护成本高</li><li>不好实现回放</li><li>实现复杂</li></ul><h1 id="参考资料">参考资料</h1><p><a href="https://gameinstitute.qq.com/course/detail/10242">https://gameinstitute.qq.com/course/detail/10242</a><br><a href="https://www.youxituoluo.com/528021.html">https://www.youxituoluo.com/528021.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 探索发现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏编程 </tag>
            
            <tag> 经验分享 </tag>
            
            <tag> 网络 </tag>
            
            <tag> 网络同步 </tag>
            
            <tag> 状态同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络同步-帧同步</title>
      <link href="/2024/07/21/%E7%BD%91%E7%BB%9C%E5%90%8C%E6%AD%A5-%E5%B8%A7%E5%90%8C%E6%AD%A5/"/>
      <url>/2024/07/21/%E7%BD%91%E7%BB%9C%E5%90%8C%E6%AD%A5-%E5%B8%A7%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是帧同步？">什么是帧同步？</h1><div class="note info **古典帧同步** flat"><p><strong>古典帧同步</strong><br>古典帧同步又叫Lockstep Synchronization（<strong>锁步同步</strong>），其一大特色在于当一个人未同步完成时，其他人都必须等待直到其同步完成，然后再执行下一帧的同步。<br><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA4f3c1686defa68f43141388995e5ba6d.png" alt><br>上图有两个客户端。客户端 B 的网络比较差，A 和 B 都在 T0 时间点向服务器发送了用户输入，A 的请求在 T1 到达服务端，B 的请求在 T2 到达服务端，前面我们提到，服务器需要收集“所有用户”的请求后才开始工作，因此需要到 T2 时间点才开始生成 frame。</p><p>因为 Client B 比较慢，我们“惩罚”了所有的玩家。而且为了服务器能正常工作，即使客户端没有产生任何指令也需要往服务器发送<strong>心跳包</strong>，这造成了流量开销。锁步同步可以用在确实需要玩家等待的<strong>回合制游戏</strong>或者对延迟不敏感的慢节奏游戏。</p></div><p>帧同步就对应于我们在上文中说的同步用户的输入的<strong>操作</strong>、或者这些操作所产生的一系列<strong>事件</strong>，保证所有人在每一帧上都获得相同的输入，执行相同的逻辑，最后得到一致的表现和结果。之所以被称之为“<strong>帧</strong>”同步，是因为帧同步是以<strong>固定频率</strong>（比如60Hz）同步玩家的下一帧的操作的。从中我们也能看出，帧同步包含了两个同步，一个是<strong>时间同步</strong>，另一个是<strong>指令同步</strong>。</p><blockquote><p><strong>保证一致性逻辑的几种方法</strong></p><ul><li>保持客户端版本一致（相同的逻辑模块）</li><li>不要依赖不确定性的外部逻辑（如UI交互逻辑）</li><li>限制外部逻辑（如UI）对核心逻辑的调用</li><li>谨慎使用多线程</li></ul></blockquote><h2 id="时间同步"><strong>时间同步</strong></h2><p>多端的时间同步通常采用<strong>服务器时间</strong>为准。在客户端发送的包传入服务器的时候，我们就会请求服务器的时间并同时计算这次请求的 <code>ping</code> 值，也就是这个数据包从客户端到服务器然后再回来的时间。</p><p>通常情况下，我们利用<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E6%99%82%E9%96%93%E5%8D%94%E5%AE%9A#%E6%97%B6%E9%92%9F%E5%90%8C%E6%AD%A5%E7%AE%97%E6%B3%95">时钟同步算法</a>来对齐帧同步的时间轴。通过计算包从客户端到服务器的时间差和从服务器到客户端的时间差进行求和，我们可以得到 <code>ping</code>。通过 <code>ping</code> 值除以 <code>2</code> 就可以得到端到端的时间偏移量<code>θ</code>，此时再加上服务器的返回的时间，就可以得到一个相对准确的当前服务器的时间。接着，后面游戏过程中的同步，我们也可以根据更小的 <code>ping</code> 值来修正时间。</p><h2 id="指令同步"><strong>指令同步</strong></h2><p>在指令同步的过程中，客户端将指令发送给服务端，服务端只做指令转发的操作（指令-&gt;指令），其他客户端接收到服务端传来的指令后进行对应的计算。由于计算是在客户端本地完成的，容易造成客户端篡改计算结果实现作弊。有关防作弊的内容，我会在之后写一篇文章进行讨论。</p><p>正由于最终同步体现在各个服务端接收到指令后计算结果的一致性上，因此帧同步最核心的依赖就是“<strong>同样的程序对于同样的输入会产生完全一致的结果</strong>”。如果这一前提无法被保证，就无法达成一致性。然而由于硬件平台的不同，还真可能出现计算结果不一致的情况（例如用 ios 和 win / Android 计算 <code>sin(15)</code> 得到的值不同，这是因为 ios 的 FPU 位宽更大），这样的小误差累计起来就可能影响同步结果。我们需要想尽办法避免这种情况出现，例如对于浮点数计算精度的问题，可以采用更改 FPU 位宽或用<strong>定点数计算</strong>。</p><h3 id="客户端和解">客户端和解</h3><p><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA408ba66e8411f7597e2228fc6fdc81df.png" alt></p><p>通过上图，我们也会发现帧同步中的一些问题：Client1 在发送数据到接收到 Host 传回来的同步数据之前，中间的这段时间间隙该怎么表现同步呢？这就是我在前文中提到的“客户端障眼法”了。在还未获取玩家的状态或者帧的情况下，我们不能让玩家卡在某个地方（否则会带来很强的顿挫感），Client1 可以尝试用上一次同步时获得的数据模拟其他客户端（Client2）的行为。</p><p>因此，在预表现中，存在两个重要的算法：预测算法和插值算法。</p><ul><li><p><strong>预测算法</strong><br>根据当前的状态预测下一个状态。最经典的预测算法是“航位推测算法（Dead Reckoning）”，常用于交通技术层面，但容易收到误差积累的影响。</p><ul><li>规则（人为设置的规则，辅助预测）</li><li>无用户输入（硬直状态，根据状态机进行判断）</li><li>寻找积分导数（位移是速度积分算的，速度是加速度积分算的，…）</li><li>用户输入有限（一个用户就十个指头，手速有限）</li></ul></li><li><p><strong>插值算法</strong><br>根据两个状态，平滑地进行过度。插值其实是一个瘦时间影响的操作序列，主要起到视觉上的平滑效果，符合游戏规则。</p><ul><li>使用录像数据进行与训练</li><li>用户个性化样本训练</li></ul></li></ul><p>除了这两种方法之外，我们还可以寻找<strong>视觉掩饰</strong>，例如设置前摇与后摇，提供缓冲时间。</p><p>但问题在于， Client1 在模拟时并不知道 Client2 可能提交了什么操作，因此它的模拟结果很可能是错的，该怎么办呢？在下一帧收到数据包时，Client1 有机会对结果进行修正，这种修正错误的方式通常叫做 <strong>Reconcilation</strong> / <strong>和解</strong>。</p><p><strong>如何实现客户端和解？</strong></p><ol><li><p>客户端需要维护 2 个缓冲区，一个是用于预测的 <code>PredictionBuffer</code>，一个是用于用户输入的 <code>InputBuffer</code>。它们是预测这个行为所需要的上下文，想预测 Tn 时刻，需要 Tn-1 的状态和 Tn-1 时刻的用户输入。两个缓冲区一开始都为空。<br><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA57e1895570f7b2c4fa7e12decb8917e8.png" width="350"></p></li><li><p>玩家点击鼠标，移动游戏角色到下一个位置。此时，玩家输入的移动信息 <code>Input 0</code> 存储在 <code>InputBuffer</code> 中，客户端将生成预测 <code>Prediction 1</code>，存储在 <code>PredictionBuffer</code> 中，预测将展示在玩家画面中<br><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VAe7fb19fb4c56e7f126df530a9b477059.png" width="400"></p></li><li><p>客户端收到服务器响应的 <code>State 0</code> ，发现与客户端的预测不匹配，我们将 <code>Prediction 1</code> 替换为 <code>State 0</code>，并使用 <code>Input 0</code> 和 <code>State 0</code> 重新计算，得到 <code>Prediction 2</code>，这个重新计算的过程，就是和解<br><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA2cf61752e7f6d1f79c05ef7dff6e85c6.png" width="450"></p></li><li><p>和解后，从缓冲区中删除 <code>State 0</code> 和 <code>Input 0</code><br><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA77ce238cb4542fcba2544f2dcba56023.png" width="400"></p></li></ol><p>这种和解的方式有一个明显的缺点，如果服务器响应的游戏状态和客户端预测差异太大，则游戏画面可能会出现错误。例如我们预测敌人在 T0 时间点向南移动，但在 T3 时间点，我们意识到它在向北移动，然后通过使用服务器的响应进行和解，敌人将从北“飞到”正确的位置。可以考虑通过实体插值的方式优化预测效果。</p><h3 id="服务端和解">服务端和解</h3><p>同时我们需要考虑到一个情况，就是：由于网络延迟，一个原本应该在服务器 X 帧范围内到达的数据包延迟到了 X + 1 帧才到达。在游戏中，我们自然希望用户做出指定操作后所有客户端立即有反应，这种情况该怎么解决呢？这就涉及到服务端的<strong>和解</strong>。</p><p>服务端和解部分主要维护 3 个部分，如下：</p><ul><li>GameStateHistory，在一定时间范围内玩家在游戏中的状态</li><li>ProcessedUserInput，在一定时间范围内处理的用户输入的历史记录</li><li>UnprocessedUserInput，已收到但未处理的用户输入，也是在一定的时间内</li></ul><p><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VAf0262351f05a2236e0856ffeb3022165.png" alt></p><p>服务端和解过程如下：</p><ol><li>当服务端收到来自用户的输入时，首先将其放入 UnprocessedUserInput 中</li><li>等待服务端开始同步帧，检查 UnprocessedUserInput 中是否存在任何早于当前帧的用户输入</li><li>如果没有，只需要将最新的 GameState 更新为当前用户的输入，并执行游戏逻辑，然后广播到客户端</li><li>如果有，则表示之前生成的某些游戏状态由于缺少部分用户输入而出错，需要<strong>和解</strong>，也就是更正。首先需要找到<strong>最早未处理的用户输入</strong>，假设它在时间 N 上，我们需要从 GameStateHistory 中获取时间 N 对应的 GameState 以及从 ProcessedUserInput 获取时间 N 上用户的输入</li><li>使用这 3 条数据，就可以创建一个准确的游戏状态，然后将未处理的输入 N 移动到 ProcessingUserInput，用于之后的和解</li><li>更新 GameStateHistory 中的游戏状态</li><li>重复步骤 4 ~ 6，直到从 N 的时间点到最新的游戏状态</li><li>服务端将最新帧广播给所有玩家</li></ol><h1 id="帧同步的断线重连">帧同步的断线重连</h1><p>就像我们在第一篇文章中介绍的那样，有的时候因为突然的网络波动，客户端可能失去与服务端的连接，进入断线重连的状态。采用了帧同步技术的王者荣耀就支持多次重连尝试：</p><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA3866dfa7b1f793c231aff80325679ebc.png" alt="王者荣耀中的断线重连" width="500"><p>帧同步能够实现断线重连的基础在于<strong>指令队列</strong>。在帧同步中，所有的指令都不会直接作用到玩家或者玩家镜像本身，而是会先进入到一个<strong>队列</strong>里面，然后从这个队列里面去执行逻辑计算。</p><h2 id="追帧">追帧</h2><p>当遇到网络波动触发重连时，客户端可能在断线 5 秒后重新连接进入游戏。得益于指令队列的存在，客户端可以从队列中断线的那一帧一直执行到最新的一帧以获取所有玩家当前的信息。而之所以我们叫它<strong>追帧</strong>，是因为帧同步实际上是以固定帧率（例如10fps）进行同步的，现在一个新加的客户端要“追赶”上当前的同步，就需要以更高的帧率（例如60fps）加快计算到最新状态。</p><h2 id="重进游戏">重进游戏</h2><p>重进游戏也就是“大重连”，客户端可能在隔了很长的时间间隔后才重新加入游戏，这时帧同步会怎么处理呢？完整跑一遍所有指令吗？这样对客户端的计算量显然太大了。为了减小重连的计算开销，服务端每隔一段时间（例如 <code>5</code> s）会存储 GameStateHistory 的<strong>序列化</strong>文件，这样当客户端网络出现问题重连时，可以向服务端请求最新的序列化文件，再反序列化得到最近的正确状态，最后追帧到最新状态即可。</p><blockquote><p><strong>优化：减轻服务端压力</strong><br>如果战斗框架设计的合理，序列化的过程是很快的，因此我们也可以把序列化的逻辑放到客户端上执行。</p><ul><li><strong>关键帧</strong><br>当客户端收到一个正确的包时，我们会去做一次序列化，这就是关键帧。</li><li><strong>定时帧</strong><br>如果每隔10秒钟没有序列化的话，我们又可以做一次序列化，这就是定时帧。<br>我们最多保留3份定时帧和一份关键帧，当客户端需要回滚的时候，就从当前时间往前找到最近的一份可用的序列化数据，然后进行反序列化，拿着这个数据来恢复然后再追帧。<br>最后，我们会把这个序列化存到磁盘里面。当发生大重连的时候，即使内存里没有状态也可以从磁盘里面加载数据来做恢复。<br>但是也有一个极端情况：假设用户换了新的设备重连，新的手机内存和磁盘里没有存档，该怎么办？这时服务器也是可以给客户端现跑一份当前的状态，然后下发给客户端的。不过这种情况非常少见，因此采用这种方式整体的服务器成本可以降低非常多。</li></ul></blockquote><h1 id="优点与缺点">优点与缺点</h1><h2 id="优点"><strong>优点</strong></h2><ul><li>服务器逻辑简单，负载低，不需要做任何计算</li><li>项目研发周期缩短</li><li>表现一致性高（所有指令都来自服务端）</li><li>同步流量小，带宽成本低（一帧的输入量小）</li><li>天然支持观战、录像、回放（记录了所有指令，逐个执行就是回放了）</li><li>实时性表现好（适用于act/ftg/spg/rts/moba等）</li></ul><h2 id="缺点"><strong>缺点</strong></h2><ul><li>反外挂问题严峻（计算都在客户端上，容易被篡改）</li><li>网络延迟敏感度高（容易卡顿）</li><li>不同步问题较难定位和解决</li><li>单局规模受限（否则一帧内包含的指令太多），不适合中途加入角色的游戏</li><li>需要在客户端处理更多的状态和逻辑，比如我们前面提到的缓冲区和预测逻辑</li></ul><h1 id="参考资料">参考资料</h1><p><a href="https://gameinstitute.qq.com/course/detail/10242">https://gameinstitute.qq.com/course/detail/10242</a><br><a href="https://gwb.tencent.com/community/detail/133968">https://gwb.tencent.com/community/detail/133968</a><br><a href="https://www.youxituoluo.com/528021.html">https://www.youxituoluo.com/528021.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 探索发现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏编程 </tag>
            
            <tag> 经验分享 </tag>
            
            <tag> 网络 </tag>
            
            <tag> 网络同步 </tag>
            
            <tag> 帧同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目作品集汇总</title>
      <link href="/2024/07/20/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E6%B1%87%E6%80%BB/"/>
      <url>/2024/07/20/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在这篇文章里，我会罗列出所有我参与或独立完成的作品，以及一些相关的工作！</p><h1 id="参与制作的正式作品">参与制作的正式作品</h1><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2020">2020</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="2020网易游戏高校mini-game挑战赛-前世今生狩猎小队"><strong>2020网易游戏高校MINI-GAME挑战赛 - 前世今生狩猎小队</strong></h3></div></div><div class="timeline-item-content"><div class="videos" col="2"><div class="video"><video controls preload><source src="https://academy.fp.ps.netease.com/file/5f97ef376f0494067ef191129iWlEcks02" type="video/mp4">Your browser does not support the video tag.</video></div></div><p><mark class="hl-label green">游戏美术</mark><br><strong>项目介绍</strong>：在《前世今生狩猎小队》中，玩家扮演猎人狩猎一个巨型怪物，猎人每次死亡都会制造出一个新的克隆体来复刻玩家生前的操作，死亡多次以后就形成了一个小队，互相配合，最后击败怪物。<br><strong>主要工作</strong>：这是我接触的第一个游戏项目，在本项目中负责<s>给各位大佬端茶倒水</s>游戏场景、道具等素材的绘制。</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="西二在线第三轮考核-合成大西瓜"><strong>西二在线第三轮考核 - 合成大西瓜</strong></h3></div></div><div class="timeline-item-content"><p><mark class="hl-label green">全栈</mark><br><a href="https://cattyhouse-guiny.xyz/2021/01/30/%E7%94%A8unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C/">站内链接</a><br><strong>项目介绍</strong>：该项目是我参加本科计算机相关社团“西二在线工作室（West2Online）”Unity方向第三轮考核时的作品，考核内容为在一个月内完成一个小游戏的复刻，我所选择的是当时的热门小游戏《合成大西瓜》。<br><strong>主要工作</strong>：这是由我作为全栈实现的第一个游戏项目，通过该项目接触并熟悉了Unity游戏引擎的各项基础功能。</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="西二在线第四轮考核-复刻明日方舟"><strong>西二在线第四轮考核 - 复刻明日方舟</strong></h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E6%B1%87%E6%80%BB/image.png" alt><br><mark class="hl-label green">全栈</mark><br><a href="https://cattyhouse-guiny.xyz/2021/04/03/%E7%94%A8unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F/">站内链接</a><br><strong>项目介绍</strong>：该项目是我参加本科计算机相关社团“西二在线工作室”Unity方向第四轮考核时的作品，在一个月内完成手机游戏《明日方舟》的塔防玩法复刻。<br><strong>主要工作</strong>：这是由我作为全栈实现的第二个游戏项目，在该项目中我学习并使用了骨骼动画、A*寻路算法、UGUI、对象池等功能。<br><strong>项目链接</strong>：<a href="https://github.com/Guiny-Time/Arknights">https://github.com/Guiny-Time/Arknights</a></p></div></div></div><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2021">2021</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="西二在线第五轮考核-幽港疑云"><strong>西二在线第五轮考核 - 幽港疑云</strong></h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E6%B1%87%E6%80%BB/%E5%B9%BD%E6%B8%AF%E7%96%91%E4%BA%91.jpg" alt><br><mark class="hl-label green">游戏美术</mark> <mark class="hl-label green">UIUX</mark> <mark class="hl-label green">游戏程序</mark><br><strong>项目介绍</strong>：《幽港疑云》是一款2D剧情向解密游戏，是我参加本科计算机相关社团“西二在线工作室”Unity方向第五轮考核时与组员一同开发的作品。<br><strong>主要工作</strong>：在这个项目中，我的工作包括</p><ul><li>程序方面：我实现了UI面板基于栈的堆叠系统和UI相关的功能、接触并学习了 TextMeshPro 组件相关的功能。</li><li>美术方面：负责所有美术资产的绘制、制作了角色的骨骼动画、并使用Unity URP的2D灯光资产提升游戏画面的视觉效果。</li><li>版本控制：我们采用了git + Github作为版本控制工具和远端仓库，我也学习了版本控制相关的技能。</li></ul><p><strong>项目链接</strong>:<a href="https://github.com/ludens-studio/ProjectW">https://github.com/ludens-studio/ProjectW</a></p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="2021网易游戏高校mini-game挑战赛-翻转剧场"><strong>2021网易游戏高校MINI-GAME挑战赛 - 翻转剧场</strong></h3></div></div><div class="timeline-item-content"><div class="videos" col="2"><div class="video"><video controls preload><source src="https://academy.fp.ps.netease.com/file/617917fd2786fd3744134810wQQcdJJz03" type="video/mp4">Your browser does not support the video tag.</video></div></div><p><mark class="hl-label green">UIUX</mark> <mark class="hl-label green">游戏程序</mark> <mark class="hl-label green">3D动画</mark><br><strong>项目介绍</strong>：《翻转剧场》是一款平台跳跃解密游戏，讲述了一个关于电影和梦想的故事。该项目参加了2021网易游戏高校MINI-GAME挑战赛，可惜并未入选决赛。<br><strong>主要工作</strong>：在这个项目中，我主要负责了三个方面的工作：</p><ul><li>程序方面：我依然负责UI相关功能的设计和实现。</li><li>美术资产方面：我通过Blender为游戏主角进行了建模和骨骼绑定，并以此为基础制作了主角的3D动画。同时，我负责设计了游戏的UI。</li><li>版本控制：这一次我们采用了Unity的PlasticSCM作为版本控制工具，我也更进一步学习了版本控制相关的技能。</li></ul></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="西二在线第六轮考核-深网防线"><strong>西二在线第六轮考核 - 深网防线</strong></h3></div></div><div class="timeline-item-content"><iframe frameborder="0" src="https://itch.io/embed/1343140" width="552" height="167"><a href="https://guinytime.itch.io/deep-web-defineline">Deep Web Defineline(深网防线) by Guinyの时光</a></iframe><p><mark class="hl-label green">游戏程序</mark> <mark class="hl-label green">UIUX</mark> <mark class="hl-label green">视效渲染</mark><br><strong>项目介绍</strong>：《深网防线》是一款3D塔防游戏，玩家将使用杀毒工具筑造而成的防御塔，利用不同的升级卡牌增强你的防御网体系，与入侵的病毒们抗争。该项目是我参加本科计算机相关社团“西二在线工作室”Unity方向第六轮考核时与组员一同开发的作品。<br><strong>主要工作</strong>：在这个项目中，我的工作包括</p><ul><li>程序方面：负责怪物生成相关逻辑、UI组装以及相关功能</li><li>美术方面：负责了场景、UI/UX的设计</li><li>视觉效果：初次接触引擎渲染管线，采用ShaderGraph实现了部分视觉特效，如开场画面背景显示屏的旋转效果。</li></ul></div></div></div><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2022">2022</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="ludum-dare-49-绝地天通"><strong>Ludum Dare 49 - 绝地天通</strong></h3></div></div><div class="timeline-item-content"><iframe frameborder="0" src="https://itch.io/embed/1224635" width="552" height="167"><a href="https://guinytime.itch.io/babel-blocks">Babel Blocks(绝地天通) by Guinyの时光</a></iframe><p><mark class="hl-label green">游戏美术</mark> <mark class="hl-label green">游戏程序</mark> <mark class="hl-label green">UIUX</mark><br><strong>项目介绍</strong>：《绝地天通》是一款关于建造与破坏的迷你游戏。玩家需要通过购买砖块构筑起自己的大厦，争取在无情的大自然面前守护自己的天地。该项目参加了第49届Ludum Dare极限游戏开发大赛，取得了总排名 1413 / 2500 的成绩。<br><strong>主要工作</strong>：这是我第一次参与jam类极限游戏开发活动，只有72小时的开发时间对我来说是一个很大的挑战。在花费了近一天时间确定游戏玩法和分工后，我的工作主要集中在以下三个方面：</p><ul><li>程序方面：负责游戏内商城逻辑、UI相关功能的实现和底部广播系统。</li><li>美术方面：负责设计并绘制游戏的所有美术资产，包括界面、砖块素材和logo等。</li></ul><p><strong>作品链接</strong>：<a href="https://ldjam.com/events/ludum-dare/49/babel-blocks">https://ldjam.com/events/ludum-dare/49/babel-blocks</a></p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="抖音特效开发-宅家舞蹈秀">抖音特效开发 - 宅家舞蹈秀</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E6%B1%87%E6%80%BB/HomeShow.png" alt><br><mark class="hl-label green">程序开发</mark><br><strong>项目介绍</strong>：《宅家舞蹈秀》是抖音的一款小游戏类型的特效，是我在字节跳动智能创作部门实习期间的一件产出。该特效在经过验证后已于2022年五一期间上线抖音正式版。<br><strong>主要工作</strong>：在初次接触部门自研引擎与 Lua 编程的情况下，我于两周内顺利完成了基于新算法模型的特效开发，运用了自研引擎中音频、序列帧动画、UI 框架等功能，学习并了解了特效的生产流程。</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="字节跳动-智能创作-hackthon2022-linsten-in-the-dark">字节跳动 智能创作 Hackthon2022 - Linsten in the Dark</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E6%B1%87%E6%80%BB/listen_in_dark.png" alt><br><mark class="hl-label purple">技术挑战奖（提名）</mark> <mark class="hl-label purple">PicoAudioSDK最佳用户奖</mark> <mark class="hl-label green">GUI</mark> <mark class="hl-label green">GUI</mark> <mark class="hl-label green">游戏程序</mark><br><strong>项目介绍</strong>：《Listen in the Dark》是⼀款盲⼈可以玩的VR⾳频寻路游戏，该项目参加了2022年字节跳动智能创作部⻔举办的⿊客编程⻢拉松 (Hackathon 2022) ⽐赛，在48⼩时之内开发完成。我们团队在两天之内开发出了三个章节 + 初始教学关卡的 demo，最终作品获得了总分 27/190 名的成绩，获得PicoAudioSDK最佳用户奖并入围了技术挑战奖。<br><strong>主要工作</strong>：在该项目中，我作为主要程序接触并学习了基于 OpenXR + Pico 的 VR 游戏开发。<br><strong>项目链接</strong>：<a href="https://github.com/yinhao21/hackathon2022">https://github.com/yinhao21/hackathon2022</a></p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="2022年中国-校计算机-赛微信-程序应-开发赛-话榕">2022年中国⾼校计算机⼤赛微信⼩程序应⽤开发赛 - 话榕</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E6%B1%87%E6%80%BB/%E7%99%BB%E9%99%86%E6%B3%A8%E5%86%8C.png" alt><br><mark class="hl-label purple">华南赛区三等奖</mark> <mark class="hl-label green">交互设计</mark><br><strong>项目介绍</strong>：《话榕》是我与本科同学组队参加2022年中国⾼校计算机⼤赛微信⼩程序应⽤开发赛的作品，该项目最终获得华南赛区三等奖。<br><strong>主要工作</strong>：我在项目中负责通过 Figma 与团队成员在线上完成了⼩程序的 GUI 设计⼯作，学习并了解了应⽤线框图与原型的制作流程，强化了所学的交互设计知识。</p></div></div></div><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2023">2023</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="本科毕设-寻星之路">本科毕设 - 寻星之路</h3></div></div><div class="timeline-item-content"><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=655699853&bvid=BV1La4y1G7RM&cid=1115071247&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><p><mark class="hl-label purple">院级优秀毕设</mark> <mark class="hl-label green">全栈</mark><br><strong>项目介绍</strong>：《寻星之路》是我在本科阶段的毕业设计，为个⼈独立开发的解谜游戏项⽬。我以该项⽬为基础撰写了本科毕业论⽂，获得了2023届福州⼤学学院级优秀本科毕业设计。<br><strong>主要工作</strong>：</p><ul><li>程序方面：完整地负责了游戏的整个开发与版本控制，采用了寻路算法、行为树、对象池等算法进行开发、实现了项目中水的风格化渲染。在项目开发的过程中电脑硬盘坏了，得益于使用远程仓库的习惯没有让毕设重头再来。</li><li>策划方面：设计了游戏的核心玩法与三个关卡（包含游戏的引导教学关）</li><li>美术方面：确定游戏的艺术⻛格、设计游戏的UIUX；采用MagicVoxel进行⼈物建模及动画制作。</li></ul><p><strong>项目链接</strong>：<a href="https://github.com/Guiny-Time/StarWay">https://github.com/Guiny-Time/StarWay</a></p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="第三届-益-游未尽-游戏开发大赛-hold-on">第三届《益·游未尽》游戏开发大赛 - Hold On！</h3></div></div><div class="timeline-item-content"><iframe frameborder="0" src="https://itch.io/embed/2238172" width="552" height="167"><a href="https://guinytime.itch.io/hold-on-h5ver">Hold on- h5 version by Guinyの时光</a></iframe><p><mark class="hl-label purple">获得公益证书</mark> <mark class="hl-label green">游戏程序</mark><br><strong>项目介绍</strong>：《Hold On！》是一款本地双人合作的抗灾救援3D游戏，玩家将扮演救援人员，在灾害现场对病人不同的受伤情况基给予营救。该项目参与了第三届《益·游未尽》游戏开发大赛，并获得活动公益证书（前十名）。<br><strong>主要工作</strong>：</p><ul><li>程序方面：在该项目中，我主要负责了关卡逻辑的构建。项目采用Feel框架实现了很多特效，我负责在程序中管理它们。</li></ul></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="booom暴造-游戏创作挑战赛-信徒">「BOOOM暴造」游戏创作挑战赛 - 信徒</h3></div></div><div class="timeline-item-content"><iframe frameborder="0" src="https://itch.io/embed/2308752" width="552" height="167"><a href="https://guinytime.itch.io/believer">信徒 by Guinyの时光</a></iframe><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=747222751&bvid=BV1zC4y1G7Hg&cid=1298893261&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><p><mark class="hl-label green">游戏程序</mark><br><strong>项目介绍</strong>：《信徒》是一款克苏鲁风格的塔防策略游戏，玩家通过掷骰子生成友方单位击杀入侵的敌人。该项目参与了2023年机核「BOOOM暴造」游戏创作挑战赛。<br><strong>主要工作</strong>：在该项目中我作为唯一的程序，完成了项目的所有程序相关的工作以及版本管理。</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="game-design-结课作业-ape-evolution">Game Design 结课作业 - Ape Evolution</h3></div></div><div class="timeline-item-content"><iframe frameborder="0" src="https://itch.io/embed/2455630" width="552" height="167"><a href="https://guinytime.itch.io/ape-evolution">Ape Evolution by Guinyの时光</a></iframe><p><mark class="hl-label green">全栈</mark><br><strong>项目介绍</strong>：Ape Evolution是一款2D top-down视角的猿类进化模拟器demo。该项目是学校游戏设计课的结课作业，我设计了30种不同的基因类型和4种不同的优胜劣汰机制，让玩家筛选星球上的猿类并最终使它们在生存压力适宜的情况下进化为人。<br><strong>主要工作</strong>：该项目由我独立开发完成，用时将近一个月。在该项目中，我用JSON文件存储了基因类型，并根据遗传/基因突变等前提分配到新的猩猩身上。除此之外，我通过配表的方式实现了项目的本地化功能。<br><strong>项目链接</strong>：<a href="https://github.com/Guiny-Time/ApeEvolution">https://github.com/Guiny-Time/ApeEvolution</a></p></div></div></div><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2024">2024</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="global-game-jam-hongkong-2024-cluckcluck">Global Game Jam HongKong 2024 - CluckCluck</h3></div></div><div class="timeline-item-content"><iframe frameborder="0" src="https://itch.io/embed/2499917" width="552" height="167"><a href="https://guinytime.itch.io/cluckcluck">CluckCluck by Guinyの时光</a></iframe><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=454292809&bvid=BV1A541117LF&cid=1421716595&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><p><mark class="hl-label purple">最佳竞技游戏奖</mark> <mark class="hl-label green">游戏程序</mark><br><a href="https://cattyhouse-guiny.xyz/2024/02/01/2024ggj%F0%9F%8C%8F%20-%20cluckcluck%E5%A4%8D%E7%9B%98%E2%80%94%E2%80%94%E6%96%B0%E8%BE%93%E5%85%A5%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%89%8B%E6%9F%84%E6%8E%A7%E5%88%B6/">站内链接</a><br><strong>项目介绍</strong>：《CluckCluck》是⼀款本地同屏双⼈⼿柄联机的2D竞技游戏，该项目参与了2024年Global Game Jam⾹港站的线下48⼩时开发活动，获得GGJ⾹港站最佳竞技游戏奖。<br><strong>主要工作</strong>：通过Unity的新输⼊系统结合⼿柄，实现了⼀台电脑、两个⼿柄共同游玩游戏的功能。这也是我的第⼀款采⽤⼿柄作为输⼊控制的游戏，这让我意识到了控制器的许多可能性。<br><strong>项目链接</strong>：<a href="https://github.com/GGJHK2024/GGJ2024Project">https://github.com/GGJHK2024/GGJ2024Project</a></p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="研究生毕业设计-终面">研究生毕业设计 - 终面</h3></div></div><div class="timeline-item-content"><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=1656089323&bvid=BV1yE421A76p&cid=1616495693&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><p><mark class="hl-label green">游戏程序</mark><br><strong>项目介绍</strong>：《One Last Interview/终面》是一款2D横板卷轴游戏项⽬，是我在研究生阶段的毕业设计项目，我在该项目中担任唯一的程序。该项⽬前已投稿⾄ 2024 腾讯游戏创作⼤赛⾼校赛道和 indiePlay 中国独⽴游戏⼤赛。<br><strong>主要工作</strong>：我在项⽬最初的两个⽉中完成了三版原型迭代，最终在两个⽉的时间⾥采⽤2D平台解决⽅案Corgi Engine为核⼼⼯具完成了demo中的所有开发⼯作。许多功能依靠Corgi Engine内的组件实现，但大多在原生组件的基础上进行了针对项目需求的更改和拓展（如“弹反”等Corgi Engine不具有的功能），我也借此机会学习了商业引擎的架构思想。<br><strong>项目链接</strong>：<a href="https://github.com/GGJHK2024/ShadowWarrior">https://github.com/GGJHK2024/ShadowWarrior</a></p></div></div></div><h1 id="制作的模块-功能">制作的模块/功能</h1><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2022">2022</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="基于-unity-的语音识别-人物面部变化">基于 Unity 的语音识别 + 人物面部变化</h3></div></div><div class="timeline-item-content"><p><strong>模块介绍</strong>：这是一个采用 Unity 的语音识别器 PhraseRecognizer 结合 3D 模型动画所实现的关键词影响面部表情变化功能，是我验证 PhraseRecognizer 功能时做的基础 demo 。用户可以自行配置关键词，在demo中我使用的是“早上好”、“晚安”、“a”、“e”、“i”、“o”和“u”。<br><strong>主要工作</strong>：制作模型动画、完成了 PhraseRecognizer 的配置。</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="基于深度测试的-3d-模型裁剪效果">基于深度测试的 3D 模型裁剪效果</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E6%B1%87%E6%80%BB/aabb.png" alt><br><strong>模块介绍</strong>：这是我在字节跳动实习期间接到的一个任务。在一个扫描现实中的对象生成 3D 模型的 APP 中，用户可能扫描得到多余的部分，需要对其进行裁剪，并将裁剪数据发送给服务端。<br><strong>主要工作</strong>：我负责实现模型裁剪效果、用户交互逻辑和跨端消息传递。我利用模型的 AABB 包围盒信息绘制了裁剪盒并赋予了材质，结合深度测试等图形学知识实现了设计师给定的特殊裁剪效果，并实现了监听客户端消息-发送裁剪信息的链路。</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="基于-unity-的水体渲染与可交互水实现">基于 Unity 的水体渲染与可交互水实现</h3></div></div><div class="timeline-item-content"><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=562934403&bvid=BV1pv4y127nS&cid=899741090&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=730458751&bvid=BV1bD4y1q7s9&cid=831153018&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=303589905&bvid=BV15P411E7Ub&cid=846825486&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=775558915&bvid=BV1W14y1n7cv&cid=903231810&p=1" scrolling="no" border="0" width="552" height="300" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><p><strong>模块介绍</strong>：这是我在学习计算机图形学和 Unity 的 Shader Graph 时进行的一些渲染练习。我尝试了基础的法线扰动水体渲染、风格化水体渲染、基于Gerstner Wave的水体渲染与可交互水的实现。</p><p><a href="https://cattyhouse-guiny.xyz/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/">站内链接：水面、波浪、白沫和焦散</a><br><a href="https://cattyhouse-guiny.xyz/2022/09/29/%E5%9F%BA%E4%BA%8Egerstner%20wave%E7%AE%97%E6%B3%95%E7%9A%84%E6%B5%B7%E6%B4%8B%E5%AE%9E%E7%8E%B0/">站内链接：基于Gerstner Wave算法的海洋实现</a></p></div></div></div><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2023">2023</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="基于-unity-的桌面音频应用">基于 Unity 的桌面音频应用</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E6%B1%87%E6%80%BB/audio.png" alt><br><strong>模块介绍</strong>：这是一个基于 Unity 实现的可以点击穿透的、支持音频响应的音频桌面应用。音频响应的线条绘制部分采用 LineRenderer 组件实现，点击穿透则利用了 Unity 的后台运行功能和 user32.dll 文件。<br>这个项目可以用于壁纸引擎。</p></div></div></div><h1 id="其他">其他</h1><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><h2 id="2024">2024</h2></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="the-shader-bible-全书翻译">《The Shader Bible》全书翻译</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E6%B1%87%E6%80%BB/USB.png" alt></p><p><a href="https://zhuanlan.zhihu.com/p/645676077">【翻译】Unity Shader Bible/Unity着色器圣经 全书目录 - 几何冰川的文章 - 知乎</a></p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><h3 id="基于-blender-几何节点的程序化建模尝试">基于 Blender 几何节点的程序化建模尝试</h3></div></div><div class="timeline-item-content"><p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E6%B1%87%E6%80%BB/flower.png" alt><br>这是我为一门课程的结课作业所做的验证，在对节点参数进行微调后成功得到了多种花朵类型。<br>这是最终成品↓<br><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE%E4%BD%9C%E5%93%81%E9%9B%86%E6%B1%87%E6%80%BB/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240721183048.jpg" alt></p></div></div></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络同步-基本概念介绍</title>
      <link href="/2024/07/19/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5/"/>
      <url>/2024/07/19/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是网络同步">什么是网络同步</h1><p>网络同步是指通过网络将数据从一个系统或节点传输到另一个系统或节点，并保持两者之间的<strong>数据一致性</strong>。换句话说，游戏中的网络同步就是把我的状态同步给远程玩家看到的“我”的<strong>镜像</strong>，使双方在屏幕上看到的效果是<strong>一致</strong>（或接近一致）的。</p><p>在常见的多人联机游戏（例如下棋、格斗、fps等等）中，网络同步是非常重要的一项需求。游戏中的玩家需要时时刻刻了解其他玩家的状态或者行为，才能辅助自己做出下一步决策（例如是否开枪等）。</p><p>如何知道其他玩家的状态，又如何让其他玩家知道我的状态呢？这时候就需要<strong>网络同步技术</strong>了。</p><h1 id="同步设计目标">同步设计目标</h1><p>同步设计主要有两个目标，即 <strong>一致性</strong> 和 <strong>及时性</strong> 。一致性指多个客户端看到的效果是一致的，而及时性指能否及时完成网络同步。在实际工程中我们往往很难同时满足一致性和及时性，这是因为<strong>网络延迟</strong>始终存在，客户端在接收到最新状态前只能对其他玩家镜像的状态进行预测（通常会采用一些客户端障眼法，例如<strong>插值</strong>）。</p><p>在 <strong>一致性</strong> 和 <strong>及时性</strong> 这两个核心目标下，我们可以拆解出三个子设计要素（公平、体验和开销），根据实际情况进行优先级权衡。一般来说用户体验是位于首位的。</p><h2 id="公平性">公平性</h2><ul><li><p><strong>确定</strong><br>操作具有<strong>幂等性</strong>，即玩家执行一个操作所得的的结果是<strong>确定</strong>而非随机的。游戏存在明确的规则，玩家知道规则带来的确切的后果，这样才可以基于规则进行博弈。</p></li><li><p><strong>安全</strong><br>数据的安全性代表玩家的数据隐私不应该被第三方破坏或篡改。当计算放在客户端时，数据就很容易被篡改（作弊行为）。</p></li></ul><h2 id="用户体验">用户体验</h2><ul><li><p><strong>延迟</strong><br>由于网络原因，延迟很难避免。其中延迟又分为<strong>输入响应延迟</strong>和<strong>状态延迟</strong>。</p><ul><li><strong>输入响应延迟</strong><br>影响<strong>操作手感</strong>，输入响应延迟对存在QTE判定（例如格斗游戏）等输入敏感类游戏影响巨大。</li><li><strong>状态延迟</strong><br>影响<strong>判断</strong>，例如 fps 游戏中需要根据状态判断玩家是否成功击杀对方等。</li></ul></li><li><p><strong>稳定</strong><br>由于网络环境不稳定，可能发生<strong>抖动</strong>和<strong>丢包</strong>，这将引起游戏中的“顿挫感”与“拉扯感”（当然，这也可能是由于GC造成的）。网络环境中断时会引起游戏断线，这时客户端会触发断线重连的尝试，尝试一定次数后判断为连接服务器失败。<br><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA3866dfa7b1f793c231aff80325679ebc.png" alt="王者荣耀中的断线重连" width="500"></p></li></ul><h2 id="成本开销">成本开销</h2><ul><li><p><strong>流量</strong><br>流量代表客户端需要收发多少数据，流量越大越可能遇到网络问题（例如丢包），并对用户的话费造成影响（流量开销变大了，需要上传和下载的东西变多），同时造成运维成本上升。</p></li><li><p><strong>计算量</strong><br>计算量越大对客户端的负载越大（如果采用的是帧同步），越容易造成手机发烫、电池消耗大等问题。</p></li><li><p><strong>研发成本</strong><br>实现不同的同步算法的技术门槛和维护成本是不一样的，在下文中会详细说明。</p></li></ul><h1 id="网络同步方案">网络同步方案</h1><p>在网络同步中，我们一般要传输什么数据呢？在实际生活中，一款游戏可以被拆成“输入-逻辑处理-输出”三个部分：</p><ol><li>用户通过键鼠/触摸屏等设备对游戏产生输入；</li><li>输入经过游戏的核心逻辑处理模块处理；</li><li>处理完后将状态输出到屏幕上，最后呈现在用户面前。</li></ol><p>那么很明显，我们需要同步的就是用户的<strong>输入操作</strong>、或者这些操作所产生的一系列<strong>事件</strong>，并将这些事件同步到其他玩家的客户端上，这样其他玩家的客户端就可以根据同步过来的输入事件类型计算出对应用户的状态并呈现在其他玩家的游戏中。这个思路实际上就是<strong>帧同步</strong>的思想。</p><p>当然，我们也可以直接同步用户的输入操作经过计算后得到的<strong>状态</strong>，这样就省去了其他玩家客户端上对输入事件的计算工作。这个思路实际上就是<strong>状态同步</strong>的思想。</p><p>帧同步和状态同步都是保持网络同步中“<strong>一致性</strong>”的方法，让我们在之后的文章中展开说说吧。</p><h1 id="方案对比">方案对比</h1><p>回到前文的“同步算法设计七大要素”，我们可以先对比一下帧同步与状态同步在这七大要素中的表现情况：</p><h2 id="公平"><strong>公平</strong></h2><ul><li>确定<ul><li>帧同步：具有强一致性</li><li>状态同步：非本地仲裁的数据有延迟或需要修正</li></ul></li><li>安全<ul><li>帧同步：输入数据和状态数据可能被篡改，拥有所有玩家的状态，隐私问题难以保障。<br>在这种情况下，服务器需要进行完整逻辑校验，并对关键状态进行校验（投票）。</li><li>状态同步：<strong>本地</strong>的输入数据和状态数据可能被篡改，远端的状态数据是隐私的。<br>对延迟敏感的项目，可以本地维护状态、服务器后校验；对延迟不敏感的项目，可以直接通过服务器维护状态。</li></ul></li></ul><h2 id="体验"><strong>体验</strong></h2><ul><li>延迟<ul><li>帧同步：网络优化，采用RUDP</li><li>状态同步：对网络抖动不敏感，可用RUDP也可用TCP</li></ul></li><li>稳定<ul><li>帧同步：断线重连非常复杂，需要服务器缓存所有帧数据，发回给客户端，从断线处开始播放到当前帧</li><li>状态同步：可以由服务器保存当前状态，重连时使用该状态即可</li></ul></li></ul><h2 id="开销"><strong>开销</strong></h2><ul><li>流量<ul><li>帧同步：同步指令，同步流量小</li><li>状态同步：同步状态，同步流量大<br>可以通过优化编码格式、设置电平触发/边沿触发（是每秒发送按键，还是在按键变化时发送？）、区分重要/不重要数据的方式优化流量开销。</li></ul></li><li>计算量<ul><li>帧同步：计算量全部集中在客户端（因此无法维护大规模的游戏）</li><li>状态同步：部分计算量在客户端（本地状态），部分计算量在服务端</li></ul></li><li>研发成本<ul><li>帧同步：技术门槛高、维护成本高、研发周期短</li><li>状态同步：技术门槛低、维护成本高（随着状态复杂而复杂化）、研发周期长</li></ul></li></ul><h1 id="参考资料">参考资料</h1><p><a href="https://gameinstitute.qq.com/course/detail/10242">https://gameinstitute.qq.com/course/detail/10242</a></p>]]></content>
      
      
      <categories>
          
          <category> 探索发现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏编程 </tag>
            
            <tag> 经验分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024GGJ🌏 - CluckCluck复盘——新输入系统与手柄控制</title>
      <link href="/2024/02/01/2024GGJ%F0%9F%8C%8F%20-%20CluckCluck%E5%A4%8D%E7%9B%98%E2%80%94%E2%80%94%E6%96%B0%E8%BE%93%E5%85%A5%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%89%8B%E6%9F%84%E6%8E%A7%E5%88%B6/"/>
      <url>/2024/02/01/2024GGJ%F0%9F%8C%8F%20-%20CluckCluck%E5%A4%8D%E7%9B%98%E2%80%94%E2%80%94%E6%96%B0%E8%BE%93%E5%85%A5%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%89%8B%E6%9F%84%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="新输入系统-input-system">新输入系统(Input System)</h1><p>Unity的新输入系统是一个基于事件的新系统，它在编辑器里提供了一个中间层（Input Action Asset），用户可以在其中自定义一系列玩家动作和其对应的操作。例如在CluckCluck中，我设定了移动（left joystick）、冲刺（B）、拾取道具（right trigger）三个控制：</p><p><img src="/2024/02/01/2024GGJ%F0%9F%8C%8F%20-%20CluckCluck%E5%A4%8D%E7%9B%98%E2%80%94%E2%80%94%E6%96%B0%E8%BE%93%E5%85%A5%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%89%8B%E6%9F%84%E6%8E%A7%E5%88%B6/image0.png" alt></p><p>完成操作设置之后，保存Input Action资产，在其检查器中可以点击生成对应的C#类，接下来就可以在代码中通过事件绑定的方法使用这些操作监听。</p><p><img src="/2024/02/01/2024GGJ%F0%9F%8C%8F%20-%20CluckCluck%E5%A4%8D%E7%9B%98%E2%80%94%E2%80%94%E6%96%B0%E8%BE%93%E5%85%A5%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%89%8B%E6%9F%84%E6%8E%A7%E5%88%B6/image.png" alt="这里已经生成过C#类了，所以没有generate C# class的选项"></p><h1 id="同屏双手柄-1p2p">同屏双手柄（1p2p）</h1><p>由于我们做的是一个比较欢脱的双人派对竞技游戏，这次jam还有一个重要的需求是同屏双手柄控制。我不想像懂哥一样用“PlayerController1.cs”和“PlayerController2.cs”来区分不同玩家（因为如果采取这种模式，如果玩家数量增多，需要维护的脚本就会变多），所以如何在一个脚本中为不同玩家绑定不同的控制器尤为重要。<br>首先是声明p1/p2，它们都用了同一套InputAction “Player2”（之所以是这个命名是因为Player1是键盘控制）。通过游戏对象的名称是否包含“1”来判断玩家是否是p1，如果是则为该玩家绑定全部游戏控制器列表的第一个控制器；否则绑定第二个控制器。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">p1 = <span class="keyword">new</span> Player2();</span><br><span class="line">p2 = <span class="keyword">new</span> Player2();</span><br><span class="line"><span class="keyword">var</span> allGamepads = Gamepad.all;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.gameObject.name.Contains(<span class="string">&quot;1&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> user1 = InputUser.PerformPairingWithDevice(allGamepads[<span class="number">0</span>]);</span><br><span class="line">    user1.AssociateActionsWithUser(p1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> user2 = InputUser.PerformPairingWithDevice(allGamepads[<span class="number">1</span>]);</span><br><span class="line">    user2.AssociateActionsWithUser(p2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考资料">参考资料</h1><p><a href="https://docs.unity3d.com/Packages/com.unity.inputsystem@1.2/api/UnityEngine.InputSystem.IInputActionCollection2.html">https://docs.unity3d.com/Packages/com.unity.inputsystem@1.2/api/UnityEngine.InputSystem.IInputActionCollection2.html</a><br><a href="https://learn.microsoft.com/en-us/dotnet/api/system.idisposable?view=net-8.0">https://learn.microsoft.com/en-us/dotnet/api/system.idisposable?view=net-8.0</a><br><a href="https://zhuanlan.zhihu.com/p/106396562">https://zhuanlan.zhihu.com/p/106396562</a><br><a href="https://www.reddit.com/r/Unity3D/comments/eqq07o/multiple_controllers_through_input_action_system/">https://www.reddit.com/r/Unity3D/comments/eqq07o/multiple_controllers_through_input_action_system/</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏编程 </tag>
            
            <tag> 经验分享 </tag>
            
            <tag> 项目复盘 </tag>
            
            <tag> 新输入系统 </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnityUI程序设计与UI性能优化（二）：UI系统的程序设计</title>
      <link href="/2023/07/03/UnityUI%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%8EUI%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AUI%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
      <url>/2023/07/03/UnityUI%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%8EUI%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AUI%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>聊完了什么是 UGUI，现在可以看看作为开发者的我们应该如何设计 UI 系统的整体框架了。我在大二的时候曾经基于<strong>栈</strong>写过一个 <a href="https://github.com/Honghonglin/GameUsualFunction/pull/1">UIManager</a> ，原理很简单：一层一层打开的 UI 面板天然符合栈的数据结构思想，所以通过一个栈来维护打开的面板就可以了。这个模块由于和 hhl 学长的 UI 模块重复了所以没有合并进仓库，当然我的想法也并没有考虑到太多商业化场景中的复杂情况，因此在这里就不详细展开让大家见笑了。</p><p>本篇文章将聊聊 hhl 学长的 UI 模块和更商业化项目中的 UI 模块的设计思路。</p><h1 id="projectbase-ui分析">ProjectBase-UI分析</h1><p>学长的代码在 <a href="https://github.com/Honghonglin/BaseProject/tree/main/Assets/Scripts/ProjectBase/UI">github</a> 仓库里，我对其中的UI部分拆开做了一张思维导图：</p><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VAd19ef10810f30e729f3dfa8870670dc6.png"><p>整个 UI 管理器是一个单例的管理器，可以通过 UIManager 开启或关闭面板，也可以通过 UIManager 查找指定的开启的面板并调用其中 BasePanel 的方法。单例很好用，但它也存在增加耦合的风险，具体可以看我之前写的<a href="https://cattyhouse-guiny.xyz/2022/01/02/chapter1-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/">关于单例模式的文章</a>。</p><p>这个模块用起来很方便，但问题也很明显，比如说 UIManager 中隐藏面板的地方：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HidePanel</span>(<span class="params"><span class="built_in">string</span> panelName</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(panelDic.ContainsKey(panelName)) &#123;</span><br><span class="line">        panelDic[panelName].HideMe();</span><br><span class="line">        GameObject.Destroy(panelDic[panelName].gameObject);</span><br><span class="line">        panelDic.Remove(panelName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HideMe()由继承了 BasePanel 的 XXPanel 类具体实现，一般用于关闭面板时的数据复位等回调操作。在这里代码直接将面板对象标记为销毁（Destory）并从字典中移除，实际上造成了潜在的 GC 开销，可能在未来导致大量内存碎片产生（由于 Unity 的 GC 特性，GC 只会标记清除而不会压缩空间）。</p><p>代码中实际上已经有了不同层级的 UI 根对象，实际上可以通过<strong>对象池</strong>的方式管理面板。</p><p>在 Panel 代码中实现 OnClick 和 OnValueChanged 略有些不必要，既然已经为不同面板实现了对应的 XXPanel 脚本，可以直接在脚本中实现相关的功能函数并在 Unity 的 Inspector 中添加绑定。一些开发者忌讳直接在检查器中绑定方法的行为，那么通过哈希表记录按钮名称与其对应的事件回调再动态调用也是没问题的。</p><h1 id="复杂-ui-模块构思">复杂 UI 模块构思</h1><img src="https://assetstorev1-prd-cdn.unity3d.com/key-image/4514fb70-4b0b-4493-b7c7-dd5247d5b5be.jpg" alt="手机游戏的UI界面" width="400/"><p>在实际项目中，我们可能会碰到非常复杂的 UI 嵌套（比如一些微信小游戏或手机游戏），甚至可能有的游戏是完全基于 UI 的。如果我们使用前文中的 UI 模块，就很容易因为频繁创建/销毁面板造成 GC，使游戏变得卡顿。</p><p>我们依然可以考虑建立一个全局的UIManager负责管理所有面板，但UIManager需要避免产生前文提到的问题。</p><h2 id="面板对象池与永久缓存">面板对象池与永久缓存</h2><p>我们可以考虑为面板设置一个<strong>缓存对象池</strong> CachePanels，有了对象池就可以优化内存使用和性能、避免直接频繁地创建和销毁。对于手机游戏或者微信小游戏来说，缓存池太大会导致内存占用，所以我们可以设置一个对象池大小上限（从经验角度出发可以是3），当对象池满时，移除<strong>最早</strong>加入对象池的面板（因此可以考虑用<strong>队列</strong>的数据结构）。</p><p>有一些面板可能<strong>经常被打开</strong>检视（比如个人信息、背包），如果只是把它们简单的加入 CachePanels 可能对性能优化没多大帮助（因为可能需要不停挤出和载入对象池）。对于这些常用 UI  面板，可以额外增设一个 ForeverCachePanels 列表永久缓存它们。</p><blockquote><p>这里说“永久”有些绝对，我们仍然可以通过代码设置将某个属性将“永久缓存面板”从 ForeverCachePanels 中移除</p></blockquote><h2 id="避免频繁操作">避免频繁操作</h2><img src="https://www.lifewire.com/thmb/sFSPR9f4HURmYarl8AKsNbRWVvc=/540x405/filters:no_upscale():max_bytes(150000):strip_icc()/GettyImages-2178782978-f4ed9e8f47b64c7b9ed4b7d0db58a292.jpg" width="300"><p>有的时候由于卡顿或者某些无法避免的神秘原因，用户点击一次开启面板按钮后游戏并没有反应，此时一些心急的玩家可能就会疯狂点击按钮试图打开某个面板。如果按照学长的 UI 模块，就可能因为在按钮点击回调中不停关闭自身而导致空指针异常。</p><p>为了避免暴躁用户高频点击导致出错，我们可以考虑维护一个等待开启列表 WaitOpenList 和开启列表 OpeningPanels。</p><ul><li>等待开启列表：当面板被请求打开，且不在开启列表/缓存池时，存入等待开启列表中</li><li>开启列表：所有被打开的面板都在这个列表中</li></ul><p>也就是说当我们打开一个面板时，</p><ol><li>先判断该面板<strong>是否存在</strong>（避免不小心打开非法面板导致空指针异常）</li><li>判断该面板是否存在于<strong>等待开启列表/开启列表/缓存池中</strong>，如果在后两个那就直接打开</li><li>如果都不存在，则将面板加入等待开启列表</li><li>在下一帧对所有存在于等待开启列表中的面板执行<strong>打开</strong>操作，加入开启面板中</li></ol><p>关闭面板就比较简单粗暴了，如果面板是打开或等待打开状态那就将其移除出当前结构并加入 Cache 中。</p><h2 id="对所有面板的管理">对所有面板的管理</h2><p>学长的模块中只有对于指定面板的 Show 与 Hide 操作。实际上，在过场景或者某些特定条件下我们可能需要：</p><ul><li>关闭当前所有打开的面板</li><li>关闭一系列不需要的面板</li><li>释放所有缓存</li></ul><p>有了前面提到的几种数据结构，对于实现这三个功能就不是什么大问题了，可能需要用一些属性标注面板类型。</p><h2 id="生命周期">生命周期</h2><p>在生命周期中，UIManager做的事情：</p><ol><li><p><strong>Start</strong><br>类似学长的代码，我们仍需对UI进行分层，这样可以方便不同类型的UI的管理。<br>初始化前文提到的数据结构。</p></li><li><p><strong>Update</strong><br>遍历开启列表 OpeningPanels，Update 里面的面板</p></li><li><p><strong>LateUpdate</strong><br>当缓存池满时，释放超过上限的面板<br>LateUpdate 开启面板中的 Panel</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 探索发现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> 框架 </tag>
            
            <tag> UI </tag>
            
            <tag> 系统 </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnityUI程序设计与UI性能优化（一）：基本概念</title>
      <link href="/2023/06/30/UnityUI%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%8EUI%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2023/06/30/UnityUI%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%8EUI%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>NGUI</strong>、<strong>UGUI</strong>、<strong>FGUI</strong>，这些“GUI”都是什么？GUI 通常指 graphic user interface（图形用户接口），是指采用图形方式显示的计算机操作用户界面。在这篇文章中我将简单介绍一下这几个常见名词，而在之后的章节中，笔者将从 UGUI 源码剖析、UI 框架的程序设计以及 UGUI 性能优化三个方面详细展开。</p><h1 id="ugui-unity-graphic-user-interface">UGUI (Unity Graphic User Interface)</h1><p>这是我们最常听说的 GUI，也是 Unity 内置的用户界面系统，从 Unity 4.6 版本开始推出，可以在Github上找到它的<a href="https://github.com/Unity-Technologies/uGUI">开源仓库</a>。UGUI 以 Canvas 为核心，提供了丰富的 UI 组件（比如我们常用的button、slicer、text等）和可视化编辑工具，操作简单直观。</p><ul><li><p><strong>优点</strong></p><ul><li>Unity 原生的 GUI 系统，和 Unity 的其他模块（例如事件、渲染、动画）深度集成，并且由<strong>官方</strong>更新和维护。</li><li>社区中存在大量的教程和文档。</li></ul></li><li><p><strong>缺点</strong></p><ul><li>由于 Canvas 的重绘机制（特别是复杂或动态的 UI 元素）可能导致性能瓶颈，这部分会在 UI 性能优化的章节详细展开。</li><li>开发效率不如第三方工具。</li></ul></li></ul><p>虽然存在上述缺点，但 UGUI 仍然是大多数中小型 Unity 项目开发者的首选（或者UI系统很简单时），主要是因为方便而且有官方支持。</p><h1 id="ngui-next-gen-ui">NGUI (Next-Gen UI)</h1><img src="https://cgioo-1310123335.cos.ap-nanjing.myqcloud.com/forum/201805/08/152829fonnwbjjobgklhmk.jpg" alt="好贵的嘞"><p><a href="https://assetstore.unity.com/packages/tools/gui/ngui-next-gen-ui-2413?srsltid=AfmBOorqdbt7YL9hQ7KFk3llxbkMS_t3klqmKq-sY8iPN41StOG4MJWj">NGUI</a> 是 Unity 上最早的第三方 UI 框架之一。NGUI 诞生于 UGUI 之前，是早期 Unity UI 开发的主流解决方案，因为早期 Unity 并不存在 GUI，想配置 UI 必须通过脚本的方式实现，非常麻烦。NGUI 就是在这样的契机下诞生的插件，它比 UGUI 更早支持复杂 UI 功能。</p><p>渲染优化方面，NGUI 把 UIPanel 中的 Widget（UI元素的基类）按<strong>深度</strong>进行排序，然后将相同材质的元素（例如使用相同图集的图片或者文字）的 Mesh 合并。网格合并的优点是合并后这些元素就只产生一个 drawcall（类似于 Unity 的合批）。但这个合并过程需要计算所有 UI 元素坐标相对于 Panel 的变换，而且如果 UI 元素的行为改变（例如平移，缩放等）都会触发网格重新合并，这会带来一定的 CPU 消耗。开发者需要谨慎组织 UI 元素到各个 UIPanel 上，并且对深度需要细致安排，否则达不到减少 drawcall 效果的同时更可能带来比较大的 CPU 消耗。</p><ul><li><p><strong>优点</strong></p><ul><li>性能优越：相比 UGUI NGUI 的 UI 元素使用独立的渲染方式，整个 UI 只有一个 drawcall，性能更好。</li><li>开发效率高：提供直观的 UI 层级管理和编辑器扩展。</li><li>功能齐全：拥有许多开箱即用的功能（如拖拽、动态布局等）。</li></ul></li><li><p><strong>缺点</strong></p><ul><li>付费工具，而且不便宜。</li><li>自 UGUI 推出后，使用 NGUI 的开发者逐渐减少，官方维护也不如过去频繁（最近一次版本更新在2018年）。</li><li>学习成本稍高，部分机制与 Unity 自带系统不一致。</li></ul></li></ul><p>从 NGUI 的优点出发，它适合那些对性能要求极高的项目（因为只有一个 drawcall）。</p><h1 id="fgui-fairygui">FGUI (FairyGUI)</h1><img src="https://www.fairygui.com/img/brand-logo-full.3e1cebcf.svg"><p>FGUI 是一款<strong>跨平台</strong>的 UI 框架，它不仅支持 Unity，还支持诸如 Cocos Creater、Laya 等其他引擎。FGUI 提供了一个独立的 UI 编辑器（FairyGUI Editor），以数据驱动 UI 的方式，便于跨平台和资源管理。</p><p>FGUI 能在不改变最终显示效果的前提下，尽可能的把相同材质的物体调整到连续的 RenderingOrder 值上，以促使他们能够被Unity 的动态合批优化。有关于FGUI更详细的渲染优化原理，可以看检查<a href="https://www.fairygui.com/docs/unity/drawcall">官方文档</a>。</p><ul><li><p><strong>优点</strong></p><ul><li>轻量高效，内存占用低，渲染效率高，适合移动端游戏。</li><li>多平台支持，FairyGUI Editor 可以快速创建复杂 UI，提升开发效率。</li><li>功能丰富，内置的动画、动效支持强大，便于快速制作精美 UI。</li></ul></li><li><p><strong>缺点</strong></p></li><li><p>额外的学习成本。</p></li></ul><p>FGUI 适合跨平台（尤其是 Web 和移动端游戏）或对 UI 动效需求高的项目，例如需要独立的 UI 工作流（减轻程序拼 UI 的工作负担）或更高效资源管理的团队。</p><h1 id="参考资料">参考资料</h1><p><a href="https://www.cg.com.tw/NGUI/">https://www.cg.com.tw/NGUI/</a><br><a href="https://www.tasharen.com/?page_id=140">https://www.tasharen.com/?page_id=140</a><br><a href="https://www.fairygui.com/docs/unity/drawcall">https://www.fairygui.com/docs/unity/drawcall</a><br><a href="https://www.bilibili.com/opus/479970364929118811">https://www.bilibili.com/opus/479970364929118811</a></p>]]></content>
      
      
      <categories>
          
          <category> 探索发现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> UI </tag>
            
            <tag> UGUI </tag>
            
            <tag> NGUI </tag>
            
            <tag> FGUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两个经典的容器：C++ map与C# Dictionary</title>
      <link href="/2023/06/24/C-map%E4%B8%8EC-dictionary%E7%9A%84%E5%BC%82%E5%90%8C/"/>
      <url>/2023/06/24/C-map%E4%B8%8EC-dictionary%E7%9A%84%E5%BC%82%E5%90%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>为什么要单独说说map和Dictionary呢？因为这两个容器非常经典也很常使用到。对于一个开发者来说，了解它们如何实现是有必要的，官方文档中对二者的定义如下：</p><div class="note success **map** flat"><p><code>map</code>用于存储和检索集合中的数据，此集合中的每个元素均为包含<strong>数据值</strong>和<strong>排序键</strong>的元素对，大小可变。<br>键的值是<strong>唯一</strong>的，用于<strong>自动排序数据</strong>。可以直接更改映射中的元素值。键值是常量，不能更改。<br>必须先删除与旧元素关联的键值，才能为新元素插入新键值。<br>map是可逆的，因为提供了双向迭代器来访问其元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Key</span>,</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Type</span>,</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Traits</span> = less&lt;Key&gt;,</span><br><span class="line">    <span class="keyword">class</span> Allocator=allocator&lt;pair &lt;<span class="type">const</span> Key, Type&gt;&gt;&gt;</span><br><span class="line"><span class="keyword">class</span> map;</span><br></pre></td></tr></table></figure><p>其中<code>Traits</code>代表了自动排序的规则（默认为less），<code>Allocator</code>则是一种表示存储的分配器对象的类型（默认对，pair）。</p></div><div class="note info **dictionary** flat"><p><code>dictionary</code>表示键和值的集合，是一个泛型集合，它以<strong>不特定的顺序</strong>存储键值对。<br>字典不能包含重复键 或 null键，而值可以是重复键或null键。键必须是唯一的，否则将引发运行时异常。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dictionary</span>&lt;<span class="title">TKey</span>,<span class="title">TValue</span>&gt; : </span><br><span class="line"><span class="title">System.Collections.Generic.ICollection</span>&lt;<span class="title">System.Collections.Generic.KeyValuePair</span>&lt;<span class="title">TKey</span>,<span class="title">TValue</span>&gt;&gt;, </span><br><span class="line"><span class="title">System.Collections.Generic.IDictionary</span>&lt;<span class="title">TKey</span>,<span class="title">TValue</span>&gt;, </span><br><span class="line"><span class="title">System.Collections.Generic.IEnumerable</span>&lt;<span class="title">System.Collections.Generic.KeyValuePair</span>&lt;<span class="title">TKey</span>,<span class="title">TValue</span>&gt;&gt;, </span><br><span class="line"><span class="title">System.Collections.Generic.IReadOnlyCollection</span>&lt;<span class="title">System.Collections.Generic.KeyValuePair</span>&lt;<span class="title">TKey</span>,<span class="title">TValue</span>&gt;&gt;, </span><br><span class="line"><span class="title">System.Collections.Generic.IReadOnlyDictionary</span>&lt;<span class="title">TKey</span>,<span class="title">TValue</span>&gt;, <span class="title">System.Collections.IDictionary</span>, </span><br><span class="line"><span class="title">System.Runtime.Serialization.IDeserializationCallback</span>, </span><br><span class="line"><span class="title">System.Runtime.Serialization.ISerializable</span></span><br></pre></td></tr></table></figure></div><p>从文档的介绍来看，<code>map</code> 和 <code>dictionary</code> 都是存放键值对的大小可变的容器，不同的是 <code>map</code> 是有序的而 <code>dictionary</code> 是无序的。为什么一个容器有序而一个无序呢？这要从这两种容器底层的数据结构说起。</p><h1 id="底层数据结构">底层数据结构</h1><p>map的底层是<strong>红黑树</strong>，这是一种特殊的自平衡二叉搜索树（Balanced Binary Search Tree），其中插入、删除、搜索的时间复杂度均为指数级的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，且由于其特殊规则而不会像普通的二叉搜索树（BST）那样退化成链表，是一种效率极高（特别是插入和删除）的二叉树。</p><p>dictionary的底层则是耳熟能详的<strong>哈希表</strong>，是一种散列表，通过哈希函数来计算键的哈希值并决定将键值对存放在哪个位置。</p><h2 id="红黑树">红黑树</h2><img src="https://upload.wikimedia.org/wikipedia/commons/6/66/Red-black_tree_example.svg"><p>红黑树是具有以下性质的特殊二叉树：</p><ul><li>节点只有两种颜色，红色和黑色</li><li>根节点一定是黑色的</li><li>红色节点的父节点和子节点必须是黑色的</li><li>从当前节点(包括它本身)出发走到nil，不论哪条路径所经过的黑色节点数目相同</li></ul><p>在数据量庞大的时候，红黑树依然能快速搜索出想要寻找的元素，而且它是自平衡的二叉搜索树。在规则被打破时，红黑树通过<strong>重新着色</strong>和<strong>旋转</strong>（分为左旋、右旋、左右旋、右左旋）的方式实现自平衡。红黑树插入和删除效率更高的原因是<strong>旋转的次数更少</strong>。AVL树是“<strong>严格平衡</strong>”的二叉搜索树，需要更多的旋转来调整；红黑树只保证了“<strong>黑平衡</strong>”（从任意节点出发到叶子节点经过的黑点数量相同，但经过的红节点数量不确定，最差的情况下经过的红节点和黑节点一样多），是以牺牲部分搜索性能换取增删性能的折中方案，用非严格的平衡换取旋转次数的减少。</p><p>在C++中，std库底层默认通过less than（＜）比较各个元素，将节点落于红黑树中的正确位置。开发者也可以自定义比较器（比如改成＞）更改键的排序规则。对于一颗二叉搜索树，其<strong>中序遍历</strong>的结果就是<strong>有序</strong>的。</p><blockquote><p>对于C++中的string，由于默认的string是系统的xstring对象没有定义 <code>＜</code> 操作符，因此需要开发者自行定义一个。</p></blockquote><p>因为map的迭代总是有序的，所以它适合需要有序存储或按范围查询的场景。在实际使用中，如果所维护的树需要频繁增删节点，红黑树会更加合适。在频繁按键查找元素的场景下，map并没有dictionary优秀，原因会在下一小节给出。</p><h2 id="哈希表">哈希表</h2><p>在介绍C# Dictionary方面有一篇非常好的<a href="https://www.cnblogs.com/InCerry/p/10325290.html">文章</a>，我在此仅作一些归纳总结。</p><p>哈希表是一种散列表，其中的数据是无序的。在将一个数据（键值对，即entry）存入哈希表时，会发生下面的步骤：</p><ul><li>将键（key）输入<strong>哈希函数</strong>中，计算出<strong>哈希值</strong>（hash value）</li><li>根据哈希值和<strong>哈希桶算法</strong>确定键值对应该被放入哪个<strong>桶</strong>（bucket）中</li><li>如果桶中已经有元素了，利用<strong>碰撞处理方法</strong>解决碰撞（冲突）</li><li>当频繁碰撞或桶满了，需要对哈希表进行扩容，执行<strong>rehash</strong></li></ul><p>哈希表搜索的时间复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，因为每个元素都有对应的key值，直接抓出key值就是对应元素了。</p><blockquote><p>entry<br>Entry是一个结构体，它的定义如下代码所示。这是Dictionary种存放数据的最小单位，调用Add(Key,Value)方法添加的元素都会被封装在这样的一个结构体中。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">struct</span> Entry &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> hashCode;    <span class="comment">// 除符号位以外的31位hashCode值, 如果该Entry没有被使用，那么为-1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> next;        <span class="comment">// 下一个元素的下标索引，如果没有下一个就为-1</span></span><br><span class="line">    <span class="keyword">public</span> TKey key;        <span class="comment">// 存放元素的键</span></span><br><span class="line">    <span class="keyword">public</span> TValue <span class="keyword">value</span>;    <span class="comment">// 存放元素的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VAba9d3b928b246c98dc8269b8f0587c20.png" alt="keys经过哈希函数计算得到哈希值，每个哈希值对应一个bucket，bucket里装的是具体的键值对"><p>我们遇到了不少名词，下面将详细介绍一下。</p><h3 id="哈希函数">哈希函数</h3><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA9968a2b599269a0ace58dc0c36431311.png" width="480"><p>哈希函数是一种摘要算法（把消息或数据压缩成摘要，使得数据量变小），具有<strong>幂等性</strong>，且不可逆（无法通过哈希值逆推键），不同的键通过哈希函数可能计算出相同的哈希值，这也为之后的冲突埋下了伏笔。一个好的hash function应该具有以下几种功能：</p><ol><li>容易计算</li><li>均匀分布</li><li>减少碰撞</li></ol><p>常见的哈希函数有直接寻址法、平方取中法、折叠法、随机数法、除留余数法（这也是常在题目中出现的哈希函数）等。</p><h3 id="哈希桶算法">哈希桶算法</h3><p>经过哈希函数计算出的哈希值可能非常大，而实际上哈希表并没有那么多桶和这些哈希值一一对应。为了能把哈希值映射到桶里，哈希桶算法会对哈希值取余数。</p><blockquote><p>桶的数量和哈希表的容量有关，未指定具体初始大小时C#默认的哈希表大小为4。</p></blockquote><h3 id="哈希冲突与解决方法">哈希冲突与解决方法</h3><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA8763e6a459949d3c7ab9afdd05740b9c.png"><p>当两个不同的键通过哈希函数与哈希桶函数的计算后得到的结果一样时，就代表发生了碰撞，两个键值对被指向了同一个桶，这就是<strong>哈希冲突</strong>。常见的解决方法有拉链法(这也是Dictionary采用的)、开放定址法、再Hash法等。</p><p>拉链法也叫链式冲突解决法，这种方法的思路是将产生冲突的元素建立一个<strong>单链表</strong>，并将头指针地址存储至Hash表对应桶的位置。这样定位到Hash表桶的位置后可通过遍历单链表的形式来查找元素。</p><h3 id="满表扩容">满表扩容</h3><p>当哈希碰撞次数到达一个阈值（100次）或者哈希表满了的时候会触发扩容操作。在C# dictionary的扩容中，</p><ol><li>申请两倍于现在大小的buckets、entries</li><li>将现有的元素拷贝到新的entries</li><li>如果是因为达到碰撞阈值扩容，使用新哈希函数重新计算Hash值</li></ol><p>虽然换了新的哈希函数，但仍可能发生大量哈希碰撞。在JDK中，HashMap如果碰撞的次数太多了，那么会将单链表转换为<strong>红黑树</strong>提升查找性能。<a href="http://xn--ihq86hzy5b70u.Net">不过目前.Net</a> Framwork中还没有这样的优化。</p><h2 id="unordered-map？sorteddictionary？">unordered_map？SortedDictionary？</h2><p>C++中对于键值对的存储还有一种实现—— <code>unordered_map</code>。它与C#的 <code>dictionary</code> 类似，是通过哈希表实现的。<br><code>unordered_map</code> 相较于 <code>dictionary</code> 的一些区别是：</p><ul><li>哈希碰撞时采用开地址法</li><li>不同编译器下的扩容规则不同，有8/2.x倍扩容的</li></ul><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA8b3e2608f29456618c4432c4999ebdf1.png" alt="8倍扩容" width="550"><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VAfd0bf623006340966b5f28a41ed504f1.png" alt="2.x倍扩容"><p>SortedDictionary是C#中对map的方案，底层同样也用了红黑树。由于排序的存在，它的各项性能其实并不如Dictionary。</p><h1 id="参考资料">参考资料</h1><p><a href="https://learn.microsoft.com/zh-cn/cpp/standard-library/map-class?view=msvc-170">https://learn.microsoft.com/zh-cn/cpp/standard-library/map-class?view=msvc-170</a><br><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic.dictionary-2?view=net-9.0">https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic.dictionary-2?view=net-9.0</a><br><a href="https://www.cainiaoplus.com/csharp/csharp-dictionary.html">https://www.cainiaoplus.com/csharp/csharp-dictionary.html</a><br><a href="https://www.cnblogs.com/InCerry/p/10325290.html">https://www.cnblogs.com/InCerry/p/10325290.html</a><br><a href="https://blog.csdn.net/jingyi130705008/article/details/82633778">https://blog.csdn.net/jingyi130705008/article/details/82633778</a><br><a href="https://zhuanlan.zhihu.com/p/95892351">https://zhuanlan.zhihu.com/p/95892351</a></p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> C++ </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> map </tag>
            
            <tag> hashmap </tag>
            
            <tag> 语言基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寻星之路复盘——A*寻路算法及其优化</title>
      <link href="/2023/05/27/A-%E5%AF%BB%E8%B7%AF%E7%AE%97%E6%B3%95%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/"/>
      <url>/2023/05/27/A-%E5%AF%BB%E8%B7%AF%E7%AE%97%E6%B3%95%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA0195589361ae367159b03ad6a9c16866.png" alt="我们的主角真是太帅了！"></p><p>论文答辩、送审等七七八八的事情终于结束了，相关评审也告一段落。感谢王宝土老师和学校电脑店的大力相助，毕设《寻星之路》demo终于是有惊无险地完成了它的使命。说实话我对这个作品可能不是太满意，因为它比我最开始设想的“三个章节、25个关卡、精妙绝伦的故事”相差甚远，仅两个月的独立开发时间，构思就浪费了小半个月，可叹。</p><p>在毕业答辩的技术部分中，占比相当大的就是接下来要介绍的 <strong>A*</strong> 了（另一部分是<strong>行为树</strong>，可以看看我的上一篇文章）。作为毕设的复盘，我将在这篇文章里聊聊我是怎么实现A*的，以及A*可以有哪方面的一些优化。</p><h1 id="什么是a-？">什么是A*？</h1><p>A*是一种<strong>启发式</strong>搜索算法，是一种在平面上有多个节点的路径，求出最低通过成本的算法。该算法综合了最良优先搜索和 <code>Dijkstra</code> 算法的优点：在进行启发式搜索提高算法效率的同时，可以保证找到一条最优路径。</p><div class="note info flat"><p><strong>Dijkstra算法</strong><br>Dijkstra算法使用类似<strong>广度优先搜索</strong>的方法解决赋权图（只能用在权重为正的图中）中的<strong>单源最短路径问题</strong>，其思想如下：</p><ol><li>从源节点（起点）出发，寻找它与图中所有其它节点之间的<strong>最短路径</strong>。</li><li>记录当前已知的最短路径，并在寻找到更短的路径时更新。</li><li>一旦找到源节点与其他节点之间的最短路径，那个节点会被标记为“已访问”并添加到路径中。</li><li>重复寻找过程，直到图中<strong>所有节点都已经添加到路径中</strong>。这样，就可以得到从源节点出发访问所有其他节点的最短路径方案。</li></ol><p>Dijkstra 对于查找起点到任意点的最短路径很有用，但对于点到点的路径查找就很浪费了。</p></div><p>之所以说A*是启发式的，是因为它基于启发式函数和节点优先级的。这里有一个用于确定节点优先级的公式：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n) = g(n) + h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span></p><p>其中,</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 是节点 <code>n</code> 距离<strong>起点</strong>的代价。</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 是节点 <code>n</code> 距离终点的预计代价，这也就是A*算法的启发函数。</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 是节点 <code>n</code> 的<strong>综合优先级</strong>。当我们选择下一个要遍历的节点时，我们总会选取综合优先级最高（ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 值最小）的节点。</li></ul><p>如果有多个节点的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 相同该怎么办？它们可能都会被搜索，尽管我们只需要搜索其中的一条路径。为了解决这个问题，我们可以考虑在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 相同时选择 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 最小的节点进行搜索。</p><p>当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 也相同时，可以为启发函数添加一个附加值（附加值对于结点必须是确定性的，不能是随机的），而且它必须让 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 体现区别，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> *= (1 + p)。选择因子 <code>p</code> 使得 <code>p</code> &lt; 移动一步的最小代价 / 期望的最长路径长度。假设你不希望你的路径超过1000步（step），你可以使p = 1 / 1000。添加这个附加值的结果是，A*比以前搜索的结点更少了.</p><h2 id="启发式函数h-n">启发式函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></h2><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n) = g(n) + h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span></p><p>启发式函数可以控制A*的行为，控制算法的速度和精确度。在一些情况下，我们可能未必需要最短路径，而是希望能够尽快找到一个路径即可，这也是A*算法比较灵活的地方：</p><ol><li>一种极端情况，如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 很小或者是0，则只有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 起作用，此时A*演变成 <code>Dijkstra</code> 算法，这保证能找到最短路径</li><li>如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 经常都比从 <code>n</code> 移动到目标的实际代价小（或者相等），则A*保证能找到一条最短路径。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 越小，A*扩展的结点越多，运行就得越慢</li><li>如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 精确地等于从 <code>n</code> 移动到目标的代价，则A*将会仅仅寻找最佳路径而不扩展别的任何结点，这会运行得非常快。尽管这不可能在所有情况下发生，你仍可以在一些特殊情况下让它们精确地相等</li><li>如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 有时比从 <code>n</code> 移动到目标的实际代价高，则A*不能保证找到一条最短路径，但它运行得更快</li><li>另一种极端情况，如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 大很多，则只有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 起作用，A*演变成 <code>BFS</code> 算法</li></ol><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA0feaac7c819c0950bb46f1a05fffbe77.png"><p>那么我们应该怎么定义 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 呢？在《寻星之路》中，我使用的是二维网格地图，而对于网格形式的图有以下这些启发函数可以使用：</p><ul><li>如果图形中只允许朝上下左右四个方向移动，则可以使用<strong>曼哈顿距离</strong>（Manhattan distance）。</li><li>如果图形中允许朝八个方向移动，则可以使用<strong>对角距离</strong>。</li><li>如果图形中允许朝任何方向移动，则可以使用<strong>欧几里得距离</strong>（Euclidean distance）。</li></ul><h3 id="曼哈顿距离">曼哈顿距离</h3><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VAbcabed6488a7e16a23ec88ccd9aa9190.png" width="400"><p>如果图形中只允许朝上下左右四个方向移动，则启发函数可以使用曼哈顿距离，它的计算方法如下图所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">CalDis</span>(<span class="params">Vector2 start, Vector2 end, <span class="built_in">int</span> d</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> dx = Math.abs(start.x - end.x);</span><br><span class="line">    <span class="built_in">int</span> dy = Math.abs(start.y - end.y);</span><br><span class="line">    <span class="comment">// d是两个相邻节点之间的移动代价，通常是一个固定的常数。</span></span><br><span class="line">    <span class="keyword">return</span> d * (dx + dy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对角距离">对角距离</h3><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA6df7a7d1f349cd7d06431be3e27de2df.png" width="400"><p>如果图形中允许斜着朝邻近的节点移动，则启发函数可以使用对角距离。它的计算方法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">CalDis</span>(<span class="params">Vector2 start, Vector2 end, <span class="built_in">int</span> d, <span class="built_in">int</span> d2</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> dx = Math.abs(start.x - end.x);</span><br><span class="line">    <span class="built_in">int</span> dy = Math.abs(start.y - end.y);</span><br><span class="line">    <span class="comment">// d是两个相邻节点之间的移动代价，d2指的是两个斜角节点之间的移动代价，对于正方形格子来说是根号二d</span></span><br><span class="line">    <span class="keyword">return</span> d * (dx + dy) + (d2 - <span class="number">2</span> * d) * Math.min(dx, dy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="欧几里得距离">欧几里得距离</h3><p>如果图形中允许朝任意方向移动，则可以使用欧几里得距离。欧几里得距离是指两个节点之间的直线距离，因此其计算方法也是我们比较熟悉的：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mrow><mo stretchy="false">(</mo><mi>p</mi><mn>2.</mn><mi>x</mi><mo>−</mo><mi>p</mi><mn>1.</mn><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><mi>p</mi><mn>2.</mn><mi>y</mi><mo>−</mo><mi>p</mi><mn>1.</mn><mi>y</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{(p2.x - p1.x)^{2} + (p2.y - p1.y)^{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.25612499999999994em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.983875em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord">2</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mord">1</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord">2</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mord">1</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.9438750000000002em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width="400em" height="1.28em" viewbox="0 0 400000 1296" preserveaspectratio="xMinYMin slice"><path d="M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25612499999999994em;"><span></span></span></span></span></span></span></span></span></span></p><p>其函数表示如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">CalDis</span>(<span class="params">Vector2 start, Vector2 end, <span class="built_in">int</span> d, <span class="built_in">int</span> d2</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> dx = Math.abs(start.x - end.x);</span><br><span class="line">    <span class="built_in">int</span> dy = Math.abs(start.y - end.y);</span><br><span class="line">    <span class="comment">// d是两个相邻节点之间的移动代价，d2指的是两个斜角节点之间的移动代价，对于正方形格子来说是根号二d</span></span><br><span class="line">    <span class="keyword">return</span> Math.sqrt(dx * dx + dy * dy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现">实现</h2><p>A*的具体实现依靠两个列表：<strong>开启列表</strong>和<strong>关闭列表</strong>。步骤如下：</p><ol><li>把起点加入开启列表（按该点到E点的距离排序+走过的步数从小到大排序）</li><li>如果开启列表不为空，则从开启列表中选取优先级最高的节点n：<ol><li>如果节点 <code>n</code> 为终点，则：<ul><li>从终点开始逐步追踪 <code>parent</code> 节点，一直达到起点；</li><li>返回找到的结果路径，算法结束；</li></ul></li><li>如果节点 <code>n</code> 不是终点，则：<ul><li>将节点 <code>n</code> 从开启列表中删除，并加入关闭列表中；</li><li>遍历节点 <code>n</code> 所有的邻近节点：<ul><li>如果邻近节点 <code>m</code> 在关闭列表中，则跳过</li><li>如果邻近节点 <code>m</code> 不在开启列表中，则：<ul><li>设置节点 <code>m</code> 的 <code>parent</code> 为节点 <code>n</code></li><li>计算节点 <code>m</code> 的优先级</li><li>将节点 <code>m</code> 加入开启列表中</li></ul></li></ul></li></ul></li></ol></li><li>反复执行第二步直到终点被添加进关闭列表（找到路径）或开启列表为空（无法到达）。</li></ol><h1 id="a-优化">A*优化</h1><h2 id="优先队列-堆">优先队列（堆）</h2><p>我们每次都需要从开启列表中找到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 最小的节点，如果用列表存储节点的话，难免会在每次检索时都遍历一次列表，造成性能上的开销。我们可以考虑用优先队列（小顶堆）实现开启列表，这样每次开启队列的顶端都是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 最小的节点。</p><p>通过优先队列，往开启队列中添加、删除的时间复杂度均为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span>。</p><p>另外，开启列表选择的排序算法的稳定与否会影响寻路的结果，因为存在多个节点的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 相同的情况。如果排序是稳定的，那么每次得到的路径都相同。</p><h2 id="获取邻居的方式">获取邻居的方式</h2><p>这个问题可能是很多人没有考虑到的，那就是我们在获取一个节点 <code>n</code> 的所有邻居节点 <code>m</code> 时，可能是按照某个固定顺序（例如上下左右）遍历的。在这个顺序下，A*就会优先向上试探邻居节点，这无意中导致“向上走”这一策略变成了优先级最高的策略，接着才是向下、向左、向右。</p><p>为了打散固定的遍历模式，得到更多潜在的路径，我们可以在获取邻居这一步操作时添加获得某种排序方式的概率，例如上下左右、上左下右、右上左下几种顺序的概率各不相同。</p><h3 id="jps-跳点搜索">JPS（跳点搜索）</h3><p>JPS 是 A* 在邻居搜索这一步操作上的优化，但它只允许使用在能走斜线的情况下。JPS的寻路速度比A*快非常多，因为JPS减少了邻居的数量，不需要像A*一样搜索所有邻居，而是去搜索<strong>跳点</strong>，对跳点进行择优选择。要了解JPS，我们需要先理解几个概念：</p><ol><li><strong>强迫邻居</strong><br>当节点 <code>x</code> 的八个节点中存在障碍，且节点 <code>x</code> 的父节点 <code>p</code> 经过节点 <code>x</code> 到达节点 <code>n</code> 的距离代价总是小于不经过节点 <code>x</code> 到达节点 <code>n</code> 的任意路径的距离代价，则称节点 <code>n</code> 为节点 <code>x</code> 的强迫邻居。<br>也就是说，节点 <code>x</code> 是最短路径的必经节点。<br><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VAe7a15e8a233b500acf2ee44524f23867.png" width="400"></li></ol><p>为什么上面右图中的节点 <code>5</code> 不是节点 <code>x</code> 的强迫邻居呢？这就涉及到了第二个概念：</p><ol start="2"><li><p><strong>邻居裁剪</strong><br>邻居裁剪的目的是避免相邻父子节点处理到共同邻居，从而不会产生多条等价的路径。<br>对于节点 <code>x</code> ，它的八个节点其实分为<strong>劣性节点</strong>和<strong>自然节点</strong>。</p><ul><li><strong>劣性邻居</strong>：从父节点 <code>p</code> 出发且不经过节点 <code>x</code>，所到达的节点的代价<strong>小于等于</strong>从父节点 <code>p</code> 出发经过节点 <code>x</code> 再到达该节点的代价</li><li><strong>自然邻居</strong>：除了劣性邻居之外的节点（包括节点 <code>x</code> 本身）。<br>强迫邻居必然由劣性邻居进化而来（不理解可以看看劣性邻居的定义），我们不需要考虑自然邻居，这一步就是邻居裁剪。<br><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VAae284bf85fffb82d494eca1317ece791.png" alt="灰色为劣性邻居，白色为自然邻居" width="400"></li></ul></li><li><p><strong>跳点</strong><br>对于一个节点，只要它满足以下三条规则<strong>之一</strong>就可以被称之为“<strong>跳点</strong>”：</p></li></ol><ul><li>节点 <code>x</code> 是起点或终点</li><li>节点 <code>x</code> 至少有一个强迫邻居</li><li>节点 <code>x</code> 的父节点 <code>p</code> 在斜线方向，并且节点 <code>x</code> 的直线方向（水平或垂直）上存在满足条件一或条件二的节点</li></ul><p>有了跳点，按照“先直线再斜线”的规则搜索跳点即可找到路径，具体流程如下：</p><ol><li>若节点 <code>x</code> 当前搜索方向是直线方向：<ul><li>如果current左后方不可走且左方可走（即左方是强迫邻居），则沿current左前方和左方寻找不在关闭列表的跳点；</li><li>如果current当前方向可走，则沿current当前方向寻找不在关闭列表的跳点；</li><li>如果current右后方不可走且右方可走（右方是强迫邻居），则沿current右前方和右方寻找不在关闭列表的跳点；</li></ul></li><li>若current当前方向为对角线方向：<ul><li>如果current当前方向的水平分量可走（例如current当前为东北方向，则水平分量为东，垂直分量为北），则沿current当前方向的水平分量寻找不在closedset的跳点；</li><li>如果current当前方向可走，则沿current当前方向寻找不在关闭列表的跳点；</li><li>如果current当前方向的垂直分量可走（例如current当前为东北方向，则水平分量为东，垂直分量为北），则沿current当前方向的垂直分量寻找不在关闭列表的跳点。</li></ul></li><li>回溯所有跳点，我们就得到了一条路径</li></ol><p>我们不难发现JPS主要的开销在“寻找跳点”上，需要遍历大量节点。但如果我们采用预处理提前找好地图中的所有跳点，这样就能避免浪费时间在搜索所有跳点上了，这样的JPS也被称为JPS+算法。这种以空间换时间的优化思路，速度最高可达A/*算法的273倍。</p><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VAfcd3a91547292812ac6963f0c50a17f2.png" alt="A*和JPS的对比"><h2 id="减少拐点">减少拐点</h2><p>减少拐点是什么意思呢？就比如说下图中的两条路径，路径2（红色）的拐点数量为1，显著小于拐点数量为5的路径1（黑色）。<br><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VAaa78b0d58868b07b3784f7ccf0197d69.png" width="300"></p><p>要达到这个效果，我们需要修改A*的启发函数：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n) = g(n) + h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span></p><p>我们可以为其加上一个额外的权重 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> ，用来控制 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 的结果：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">f(n) = g(n) + h(n) + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></span></p><p>当一个节点 <code>x</code> 为父节点 <code>p</code> 的拐点时，增大其 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 值，降低拐点的权重。</p><h2 id="超大地图？">超大地图？</h2><p>可以采用JPS+算法或层次A*。JPS+前文已经介绍过了，我们来聊聊层次（分层）A*。在处理超大地图（例如一个10000 * 10000的二维地图）时，我们如果直接在起点和终点之间采用A*寻路，这个计算量是很可怕的，玩家需要等待一定时间才能得到算法返回的路径，无法保证超大地图下寻路的实时性。</p><p>分层A*的想法基于将大地图拆分成多个小的子<strong>地图区块</strong>，并预先计算出每个小地图区块与周围四个地图区块在边界上的<strong>互通点</strong>，然后在小地图区块内使用A*对找出的互通点做连通性测试并将结果保存下来，这就是<strong>预处理</strong>，有了这些“低级别的路径”，我们可以以更低的成本在更高级别上有效地进行寻路。预处理在小地图区块发送阻挡物变更时执行。</p><p>如果起点和终点相隔几个小地图，那么寻路流程如下：</p><ol><li>根据起点和终点的方向算出走出<strong>当前小地图出口点</strong>，当前小地图出口点也就是要经过的下一个小地图的入口点</li><li>若下一个小地图不是终点所在的地图，那么把这个入口点作为起点重复第一步</li><li>若一个小地图是终点所在小地图那么就再用A*从当前小地图的入口点寻路到终点即可。</li></ol><p>然而，考虑到我们通过预定的边界节点从一个地图区块移动到另一个地图区块，这种方法产生的路径可能比直接的 A* 不太理想（由于区块间的互通点固定），因此被称为“近乎最优”。</p><h1 id="参考资料">参考资料</h1><p><a href="https://www.freecodecamp.org/chinese/news/dijkstras-shortest-path-algorithm-visual-introduction/">https://www.freecodecamp.org/chinese/news/dijkstras-shortest-path-algorithm-visual-introduction/</a><br><a href="https://paul.pub/a-star-algorithm/">https://paul.pub/a-star-algorithm/</a><br><a href="https://vslam.net/2021/03/20/route_planning/%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92%EF%BC%88%E4%BA%94%EF%BC%89-A-Star%E7%AE%97%E6%B3%95/">https://vslam.net/2021/03/20/route_planning/路径规划（五）-A-Star算法/</a><br><a href="https://blog.51cto.com/wonderking/6252361">https://blog.51cto.com/wonderking/6252361</a><br><a href="https://runzhiwang.github.io/2019/06/21/jps/">https://runzhiwang.github.io/2019/06/21/jps/</a><br><a href="https://www.bilibili.com/video/BV18z421i7s8/">https://www.bilibili.com/video/BV18z421i7s8/</a><br><a href="https://github.com/hugoscurti/hierarchical-pathfinding">https://github.com/hugoscurti/hierarchical-pathfinding</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏编程 </tag>
            
            <tag> 经验分享 </tag>
            
            <tag> 项目复盘 </tag>
            
            <tag> Unity </tag>
            
            <tag> 寻路算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏AI-状态机与行为树</title>
      <link href="/2023/05/10/%E6%B8%B8%E6%88%8FAI-%E7%8A%B6%E6%80%81%E6%9C%BA%E4%B8%8E%E8%A1%8C%E4%B8%BA%E6%A0%91/"/>
      <url>/2023/05/10/%E6%B8%B8%E6%88%8FAI-%E7%8A%B6%E6%80%81%E6%9C%BA%E4%B8%8E%E8%A1%8C%E4%B8%BA%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>假设我们需要设计一个敌人 AI，它存在“<strong>按照路线巡逻</strong>”、“<strong>警觉</strong>”、“<strong>追击玩家</strong>”三种状态，它们之间的关系如下：</p><ul><li>AI 默认处于“按照路线巡逻”状态</li><li>在“按照路线巡逻”中，如果发现了玩家，就进入“警觉”状态</li><li>在警觉状态中，如果玩家持续存在，经过两秒后进入“追击玩家”状态</li><li>在“警觉”和“追击玩家”状态中，如果玩家逃脱巡查范围或死亡，则回到“按照路线巡逻”状态</li></ul><p>对初学者来说，我们很容易会想到为每个状态设置一个bool值，用来判断对象是否处于某个状态中，例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> isPatrol = <span class="literal">true</span>; <span class="comment">// 初始处于巡逻状态</span></span><br><span class="line"><span class="built_in">bool</span> isAlert = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">bool</span> isChase = <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(isPatrol)&#123;</span><br><span class="line">    <span class="keyword">if</span>(playerTarget)&#123;</span><br><span class="line">      isAlert = <span class="literal">true</span>;</span><br><span class="line">      isPartol = <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">// 巡逻</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(isAlert)&#123;</span><br><span class="line">    <span class="keyword">if</span>(playerTarget)&#123;</span><br><span class="line">      <span class="comment">// 启用某种计时器，结束之后有：</span></span><br><span class="line">      <span class="comment">// isChase = true;</span></span><br><span class="line">      <span class="comment">// isAlert = false;</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      isProtal = <span class="literal">true</span>;</span><br><span class="line">      isAlert = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(isChase)&#123;</span><br><span class="line">    <span class="keyword">if</span>(playerTarget)&#123;</span><br><span class="line">      <span class="comment">// 追击玩家</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      isProtal = <span class="literal">true</span>;</span><br><span class="line">      isChase = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际在开发的过程中，我们可能因为策划的需要而为敌人 AI 加入新的状态，例如追击一段时间后开始奔跑等等。为了实现这个新的状态，我们就需要加入一个新的 bool 值 isRunning 来判断敌人是否处于奔跑状态。当状态越来越多，需要维护的 bool 值也越来越多，复杂的分支和状态导致代码的可读性降低，非常容易出 bug。</p><p>那么，有什么能拯救敌人 AI 的方法吗？</p><h1 id="状态机-state-machine-与状态模式">状态机(State Machine)与状态模式</h1><h2 id="有限状态机-fsm">有限状态机(FSM)</h2><p>如果把刚才的三种状态抽象成一张图：<br><img src="/2023/05/10/%E6%B8%B8%E6%88%8FAI-%E7%8A%B6%E6%80%81%E6%9C%BA%E4%B8%8E%E8%A1%8C%E4%B8%BA%E6%A0%91/Clipboard_2024-10-17-12-05-25.png" alt><br>恭喜，你成功创建了一个<strong>有限状态机</strong>（FSM）。FSM 是一种基于状态转换的行为模型。它将对象的行为建模为一系列状态，通过定义状态之间的转换条件和动作来控制对象的行为。状态机由多个状态组成，每个状态表示对象在特定情况下的行为。当特定条件满足时，状态之间会进行切换，从而驱动对象执行相应的动作。</p><blockquote><p>有限状态机借鉴了计算机科学里的自动机理论（automata theory）中的一种数据结构（图灵机）思想。有限状态机可以看作是最简单的图灵机。</p></blockquote><p>在状态机中，整个状态机由状态、事件和转换组成。展开来说：</p><ul><li>状态机拥有一组状态，可以在这些状态之间进行切换，但同一时间只能处于一种状态中；</li><li>状态机会接受到一组事件（可能由输入等造成）作为转换条件；</li><li>每个状态之间有一组转换，每个转换都关联着一个事件并指向另一个状态。状态的转换取决于转换条件和当前所处状态。</li></ul><p>为了避免写出复杂的 if-else 语句，我们可以考虑用枚举来表示每个状态，并用 switch-case 分支语句构建每个状态的行为和转换逻辑。在这种写法中，所有处理单个状态的代码都集中在一起了，这是实现状态机最简单的方法。在 if-else 写法中，通过 bool 值标识可能会存在一些没有意义的值，但在枚举写法中，每一个枚举值都是有意义的。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AI 的三种状态</span></span><br><span class="line"><span class="built_in">enum</span> State&#123;</span><br><span class="line">  Protal,</span><br><span class="line">  Alert,</span><br><span class="line">  Chase</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Update&#123;</span><br><span class="line">  <span class="keyword">switch</span>(state)&#123;</span><br><span class="line">    <span class="keyword">case</span> Protal:</span><br><span class="line">      <span class="keyword">if</span>(playerTarget)&#123;</span><br><span class="line">        state = Alert;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 巡逻</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Alert:</span><br><span class="line">      <span class="keyword">if</span>(playerTarget)&#123;</span><br><span class="line">        <span class="comment">// 启用某种计时器，结束之后有：</span></span><br><span class="line">        state = Chase;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        state = Protal;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Chase:</span><br><span class="line">      <span class="keyword">if</span>(playerTarget)&#123;</span><br><span class="line">        <span class="comment">// 追击玩家</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        state = Protal;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态模式">状态模式</h2><p>状态模式将这可能存在于玩家控制器中的一大串 switch-case 解耦成了更符合面向对象思维的写法。在状态模式中，我们可以定义状态接口IState：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">IState</span>&#123;</span><br><span class="line">  <span class="comment">// 处理事件</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">HandleInput</span>()</span>;</span><br><span class="line">  <span class="comment">// 状态行为</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Action</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，我们可以为每个状态定义一个类（以警觉为例，我们正好可以实现一下计时器方法），并实现状态接口：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">AlertState</span> : <span class="title">IState</span>&#123;</span><br><span class="line">  <span class="built_in">float</span> _time = <span class="number">0.0f</span>;</span><br><span class="line">  <span class="built_in">bool</span> _beginChase = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 警觉状态的事件处理</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">HandleInput</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!playerTarget)&#123;</span><br><span class="line">      <span class="comment">// 丢失目标，切换状态到Protal</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(_beginChase)&#123;</span><br><span class="line">      <span class="comment">// 切换状态到Chase</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 警觉状态的行为</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Action</span>()</span>&#123;</span><br><span class="line">    Timer();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 计时器</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Timer</span>()</span>&#123;</span><br><span class="line">    _time += Time.deltaTime();</span><br><span class="line">    <span class="keyword">if</span>(_time &gt; <span class="number">2.0f</span>)&#123;</span><br><span class="line">      _beginChase = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，在 AI 控制器 AIController.cs 一类的脚本中，我们需要一个用来表示 AI 当前状态的指针，并直接调用接口方法（来执行每个状态实现的方法）。在修改状态时，改变状态指针所指的对象即可。如果状态类中不包含数据成员（比如Protal和Chase），那么这些不论怎么实例化都始终一样的对象，可以考虑作为静态对象存放在状态的类 AIState 中，例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">AIState</span>&#123;</span><br><span class="line">  <span class="keyword">static</span> ProtalState protal;</span><br><span class="line">  <span class="keyword">static</span> ChaseState chase;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但对于警戒状态来说，它包含了与计时器有关的变量_timer，采用静态方法就行不通了。而且对于多个 AI 来说，它们可能同时处于一个状态中，就需要采用实例化的方式代替静态状态，为每个 AI 的状态机创建一个当前状态的实例。</p><p>那应该如何实现状态之间的切换呢（就像我们在前面的 HandleInput 代码中只是用一行注释简单带过了）？我们可以考虑在状态的方法中<strong>返回</strong>新的状态,做法就是：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 警觉状态的事件处理</span></span><br><span class="line">  <span class="function">IState <span class="title">HandleInput</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!playerTarget)&#123;</span><br><span class="line">      <span class="comment">// 丢失目标，切换状态到Protal</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ProtalState();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(_beginChase)&#123;</span><br><span class="line">      <span class="comment">// 切换状态到Chase</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ChaseState();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在 AI 控制器中，判断返回的状态，如果非空则认为状态发生了变化。在这个基础上，我们还可以实现 Entry 和 Exit 方法实现状态进入/退出时的特殊功能，完善状态机的健壮性。</p><h2 id="并发状态机">并发状态机</h2><p>在前文的有限状态机中同一时间 AI 只能处于一个状态中，那么如果我希望 AI 在追击角色的<strong>同时</strong>执行持枪/开火的循环状态，应该怎么办呢？对FSM，我们可能要把状态加上“巡逻时持枪”、“巡逻时开火”、“警觉时持枪”、“警觉时开火”、“追击时持枪”和“追击时开火”了，提升了代码的复杂性。</p><p>但其实仔细想想，持枪/开火这个循环其实和其他状态是独立的，如下图所示，那么我们就可以在 AI 控制器中声明两个状态指针，分别指代持枪/开火和其他的 AI 行为，在执行 handleInput 时两个状态都调用一下就可以了。这就是并发状态机的思想，适合多个毫无关联的状态机并发执行（如果有关联，并发状态机依然可以完成任务，但需要结合一些 if 语句进行判断）。<br><img src="/2023/05/10/%E6%B8%B8%E6%88%8FAI-%E7%8A%B6%E6%80%81%E6%9C%BA%E4%B8%8E%E8%A1%8C%E4%B8%BA%E6%A0%91/Clipboard_2024-10-17-15-58-43.png" alt></p><h2 id="层次状态机">层次状态机</h2><p><img src="https://picx.zhimg.com/v2-f9122ffbc3cfd2350199893bd2b64f1f_r.jpg" alt><br>在我们实际编写状态机代码时，可能会发现许多状态包含了<strong>重复的逻辑</strong>，例如在“警觉”和“追击”两个状态中，丢失玩家只会都会回到“巡逻”状态。有没有办法减少这些重复代码呢？我们可以考虑采用<strong>继承</strong>的方式。“警觉”和“追击”都可以继承自一个父状态“非巡逻（或者一个更好的名字）”，在&quot;非巡逻&quot;的 handleInput 中：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!playerTarget)&#123;</span><br><span class="line">  <span class="comment">// 丢失目标，切换状态到Protal</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ProtalState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，在继承了“非巡逻”的状态中实现自己的特殊行为即可。我们通常把这种状态机叫做层次状态机，一个状态有一个父状态，当有一个事件进来的时候，如果子状态不处理它，那么沿着继承链传给它的父状态来处理。</p><p>即使状态模式已经在一定程度上解耦了状态机的复杂代码，但在实际项目中，我们随时可能增加新状态、减少状态或者改变状态之间的迁移关系，如果状态越来越多，任何一点小修改都会产生很大的工作量（例如我们需要维护新的状态类）。</p><h1 id="行为树-behavior-tree">行为树(Behavior Tree)</h1><p><img src="https://user-images.githubusercontent.com/8220843/70063424-b20b3700-1622-11ea-8c58-102322c2a88b.png" alt="可视化行为树编辑器"><br><strong>行为树</strong>（Behavior Tree）是一种基于<strong>树结构</strong>的行为模型。它以树状的方式描述了对象的行为决策过程。行为树由多个节点组成，每个节点代表一个具体的行为或决策。节点之间通过连接关系形成树状结构，决定了对象在特定情况下应该执行哪些行为。通过遍历行为树，对象可以根据节点的逻辑规则来选择合适的行为进行执行。行为树则适合用于描述对象的<strong>复杂行为决策过程</strong>，例如角色在特定情况下应该采取何种行为（如追逐、逃避、攻击等）。</p><p>作为一种树，行为树由三种节点构成，每个节点都有<font color="green"><strong>成功</strong></font>、<font color="red"><strong>失败</strong></font>和<font color="orange"><strong>运行中</strong></font>三种返回值。</p><ul><li><strong>行为节点</strong>（Task）<br>行为树的叶子节点，代表了 AI 的具体行为（例如移动、攻击、什么也不做），包含初始化函数 Init 和行为逻辑函数 OnTick（每帧执行）。</li><li><strong>控制节点</strong>（Composite）<br>控制节点一般为行为树的中间节点，控制行为树的行为变换。具体来说有以下三种类型：<ul><li><strong>顺序节点</strong>（Sequence）<br>相当于<strong>与</strong>（and），依次执行所有子节点，若当前子节点返回成功，则继续执行下一个子节点；若子当前节点返回失败，则中断后续子节点的执行，并把结果返回给父节点。<br><img src="https://lifan.tech/images/behavior/behavior-sequences.png" width="200"></li><li><strong>选择节点</strong>（Selector）<br>相当于<strong>或</strong>（or），依次执行所有子节点，若当前子节点返回成功，则中断后续节点运行，并把结果返回给父节点。<br><img src="https://lifan.tech/images/behavior/behavior-selector.png" width="200"></li><li><strong>平行节点</strong>（Parallel）<br>依次执行所有子节点，无论失败与否，都会把所有子节点执行一遍。至于Parallel节点该返回什么值给父节点，这要看需求。比如：成功数 &gt; 失败数返回成功，否则返回失败。<br><img src="https://lifan.tech/images/behavior/behavior-parellel.png" width="200"></li><li><strong>随机节点</strong>（Random）<br>随机选择一个子节点来运行。</li></ul></li><li><strong>装饰节点</strong><ul><li><strong>逆变节点</strong>（Inverter）<br>对子节点的返回值取反，相当于<strong>非</strong>（not），它只会有一个子节点。</li><li><strong>成功节点</strong>（Succeeder）<br>不管其子节点返回何值，都会返回Success给父节点</li><li><strong>重复节点</strong>（Repeater）<br>重复执行n次子节点。</li><li><strong>重复直至失败节点</strong>（Repeat Until Fail）<br>重复执行子节点，直到失败为上；同样也有类似的重复直至成功节点这里就不列出了。</li><li><strong>执行一段时间</strong>（MaxTime）<br>重复执行子节点一段时间。</li></ul></li></ul><p>行为树的出现从根本上解决了前文提到的复杂代码维护的问题，它把每个行为作为一个原子项，任何人都可以决定 AI 的执行流程，作为程序的我们只需要集中精力根据需求增加新的行为，而不用关心具体流程、转换方式是什么样的。</p><p>不过在性能上，行为树的运算通过帧循环的 update 来驱动，每帧会遍历所有非行为节点，在树比较复杂时会造成资源浪费。并且对于简单的操作在行为树也要使用节点，相对比较繁琐。针对性能优化方面，如果用状态机实现简单状态的切换，进入某个状态（例如战斗）后再用行为树表示复杂行为逻辑，这会是一个有效的优化。尤其是怪物很多时，大部分时间段，大部分怪都处于巡逻状态，完全没有必要遍历行为树。</p><h1 id="参考资料">参考资料</h1><p>游戏编程模式（游戏设计与开发）<br><a href="https://zhuanlan.zhihu.com/p/540191047">https://zhuanlan.zhihu.com/p/540191047</a><br><a href="https://lifan.tech/2020/02/15/game/behavior-tree/">https://lifan.tech/2020/02/15/game/behavior-tree/</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏开发 </tag>
            
            <tag> AI </tag>
            
            <tag> 状态机 </tag>
            
            <tag> 行为树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#进阶（四）-事件</title>
      <link href="/2023/02/27/C-%E8%BF%9B%E9%98%B6%EF%BC%88%E5%9B%9B%EF%BC%89-%E4%BA%8B%E4%BB%B6/"/>
      <url>/2023/02/27/C-%E8%BF%9B%E9%98%B6%EF%BC%88%E5%9B%9B%EF%BC%89-%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是事件？">什么是事件？</h1><p><code>event</code> 是C#的一个关键字，是对于委托的一种<strong>更安全</strong>的封装方式（只能作为成员存在于类/接口或结构体中），这使得被 <code>event</code> 关键字修饰的委托只能在声明它的类中被调用。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个委托类型，用于事件处理程序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">NotifyEventHandler</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span>;</span><br><span class="line"><span class="comment">// 用event修饰委托实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> NotifyEventHandler _processCompleted;</span><br></pre></td></tr></table></figure><p>你一定好奇这里 <code>objrct</code> 类型的 <code>sender</code> 和 <code>EventArgs</code> 类型的 <code>e</code> 分别是什么。其实从命名上也可以看出来，<code>EventArgs</code> 表示事件参数（EventArguments）的类的基类，它可以用来记录事件传递的额外信息（例如触发的时间、位置等等）。在实际使用中，开发者需要自行定义派生自 <code>EventArgs</code> 类的事件参数，例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ButtonClickEventArgs</span> : <span class="title">EventArgs</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Time &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sender</code> （或者你随便起的名字，比如说 <code>o</code>）就是发送事件触发消息的源对象的<strong>引用</strong>，比如我们拿取 <code>sender</code> 和 <code>e</code> 的值并打印：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">NotifyEventHandler</span>(<span class="params"><span class="built_in">object</span> sender, ButtonClickEventArgs e</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布者类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProcessBusinessLogic</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> NotifyEventHandler ProcessCompleted;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发事件的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnProcessCompleted</span>(<span class="params">ButtonClickEventArgs e</span>)</span> &#123;</span><br><span class="line">        ProcessCompleted?.Invoke(<span class="keyword">this</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发事件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartProcess</span>()</span> &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Process Started!&quot;</span>);</span><br><span class="line">        ButtonClickEventArgs args = <span class="keyword">new</span> ButtonClickEventArgs() &#123;</span><br><span class="line">            Time = DateTime.Now.ToString()</span><br><span class="line">        &#125;;</span><br><span class="line">        OnProcessCompleted(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅者类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventSubscriber</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Subscribe</span>(<span class="params">ProcessBusinessLogic process</span>)</span> &#123;</span><br><span class="line">        process.ProcessCompleted += Process_ProcessCompleted;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Process_ProcessCompleted</span>(<span class="params"><span class="built_in">object</span> sender, ButtonClickEventArgs e</span>)</span> &#123;</span><br><span class="line">        Console.WriteLine(sender.GetType() + <span class="string">&quot; Process Completed!&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Completed time: &quot;</span> + e.Time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> &#123;</span><br><span class="line">        ProcessBusinessLogic process = <span class="keyword">new</span> ProcessBusinessLogic();</span><br><span class="line">        EventSubscriber subscriber = <span class="keyword">new</span> EventSubscriber();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 订阅事件</span></span><br><span class="line">        subscriber.Subscribe(process);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动过程</span></span><br><span class="line">        process.StartProcess();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VAd87bce6ee3b1e3ce62c5f56f2751cffb.png" alt="输出结果"><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA95292bb6fe4258262398f1c29b01270e.png" alt="日期时间，是相一致的"><h1 id="注意">注意</h1><p>事件不是委托实例，只是成对的 <code>add</code> / <code>remove</code> 方法（类似于属性的取值方法/赋值方法），因此在声明事件的类外部我们只能增加/移除事件的回调函数。事件之所以只能在声明它的类这调用，是因为其包装的委托是该类的一个<strong>私有委托类型</strong>字段，因此无法在外部访问。</p><p>下面是反编译的结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">CompilerGenerated</span>]</span><br><span class="line">[<span class="meta">DebuggerBrowsable(DebuggerBrowsableState.Never)</span>]</span><br><span class="line"><span class="comment">// 私有委托</span></span><br><span class="line"><span class="keyword">private</span> NotifyEventHandler ProcessCompleted;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> NotifyEventHandler ProcessCompleted &#123;</span><br><span class="line">    <span class="comment">// add方法</span></span><br><span class="line">    [<span class="meta">CompilerGenerated</span>] <span class="keyword">add</span> &#123;</span><br><span class="line">        NotifyEventHandler notifyEventHandler1 = <span class="keyword">this</span>.ProcessCompleted;</span><br><span class="line">        NotifyEventHandler notifyEventHandler2;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            notifyEventHandler2 = notifyEventHandler1;</span><br><span class="line">            notifyEventHandler1 = Interlocked.CompareExchange&lt;NotifyEventHandler&gt;(<span class="keyword">ref</span> <span class="keyword">this</span>.ProcessCompleted, (NotifyEventHandler) Delegate.Combine((Delegate) notifyEventHandler2, (Delegate) <span class="keyword">value</span>), notifyEventHandler2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (notifyEventHandler1 != notifyEventHandler2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// remove方法</span></span><br><span class="line">    [<span class="meta">CompilerGenerated</span>] <span class="keyword">remove</span> &#123;</span><br><span class="line">        NotifyEventHandler notifyEventHandler1 = <span class="keyword">this</span>.ProcessCompleted;</span><br><span class="line">        NotifyEventHandler notifyEventHandler2;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            notifyEventHandler2 = notifyEventHandler1;</span><br><span class="line">            notifyEventHandler1 = Interlocked.CompareExchange&lt;NotifyEventHandler&gt;(<span class="keyword">ref</span> <span class="keyword">this</span>.ProcessCompleted, (NotifyEventHandler) Delegate.Remove((Delegate) notifyEventHandler2, (Delegate) <span class="keyword">value</span>), notifyEventHandler2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (notifyEventHandler1 != notifyEventHandler2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考资料">参考资料</h1><p><a href="https://www.runoob.com/csharp/csharp-event.html">https://www.runoob.com/csharp/csharp-event.html</a><br><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.eventargs?view=net-8.0">https://learn.microsoft.com/zh-cn/dotnet/api/system.eventargs?view=net-8.0</a><br><a href="https://www.cnblogs.com/erlongxizhu-03/p/12511275">https://www.cnblogs.com/erlongxizhu-03/p/12511275</a></p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 语言基础 </tag>
            
            <tag> 特性 </tag>
            
            <tag> 事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#进阶（三）-委托</title>
      <link href="/2023/02/23/C-%E8%BF%9B%E9%98%B6%EF%BC%88%E4%B8%89%EF%BC%89-%E5%A7%94%E6%89%98/"/>
      <url>/2023/02/23/C-%E8%BF%9B%E9%98%B6%EF%BC%88%E4%B8%89%EF%BC%89-%E5%A7%94%E6%89%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是委托？">什么是委托？</h1><p>委托（delegate）类似于C++中的<strong>函数指针</strong>，是类型化了的函数指针（一种可以存放特定参数/返回值类型方法的容器），可以作为<strong>参数</strong>一样被传递。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义了一个返回值和参数为空的委托类型</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyDelegate</span>()</span>;</span><br><span class="line"><span class="comment">// 声明MyDelegate类型的一个委托</span></span><br><span class="line"><span class="keyword">private</span> MyDelegate _myDelegate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Main</span>()</span>&#123;</span><br><span class="line">    <span class="comment">// 为委托赋值方法</span></span><br><span class="line">    _myDelegate = Test;</span><br><span class="line">    <span class="comment">// 调用委托</span></span><br><span class="line">    _myDelegate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载到委托上的函数，其参数和返回值需与委托一致，否则不会被感知</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span>()</span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时有人就会有疑问了：这和直接在 <code>Main</code> 中调用 <code>Test</code> 方法有什么区别呢？</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Main</span>()</span>&#123;</span><br><span class="line">    Test(); <span class="comment">// 执行结果和上面的代码块是完全一样的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span>()</span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>委托最主要的目的是作为参数传入函数中，充当<strong>回调函数</strong>的功能。例如在一个技能被触发之后除了通用的“播放技能音效”和“播放技能动画”之外，技能还需要执行对应的具体逻辑（例如传输、耗蓝、某些特殊效果）。如果为每个技能编写函数，就会变成：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Skill1</span>()</span>&#123;</span><br><span class="line">    PlayAudio();</span><br><span class="line">    PlayAnim();</span><br><span class="line">    Skill_1_Logic();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Skill2</span>()</span>&#123;</span><br><span class="line">    PlayAudio();</span><br><span class="line">    PlayAnim();</span><br><span class="line">    Skill_2_Logic();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Skill3</span>()</span>&#123;</span><br><span class="line">    PlayAudio();</span><br><span class="line">    PlayAnim();</span><br><span class="line">    Skill_3_Logic();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很显然这不是一个优秀的代码设计典范，存在太多重复的地方。而如果我们将技能逻辑视为一个参数，那么就可以通过委托将其抽象成：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> dedlegate <span class="keyword">void</span> <span class="title">SkillLogicDelegate</span>()</span>;</span><br><span class="line"><span class="comment">// 无参数无返回值</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Skill</span>(<span class="params">SkillLogicDelegate _skillLogic</span>)</span>&#123;</span><br><span class="line">    PlayAudio();</span><br><span class="line">    PlayAnim();</span><br><span class="line">    _skillLogic();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多播委托">多播委托</h2><p><strong>多播委托</strong>（multicast delegate）则代表一个委托存放了多个函数，我们可以通过 <code>+=</code> 操作符添加函数。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义了一个返回值和参数为空的委托类型</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyDelegate</span>()</span>;</span><br><span class="line"><span class="comment">// 声明MyDelegate类型的一个委托</span></span><br><span class="line"><span class="keyword">private</span> MyDelegate _myDelegate;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Main</span>()</span>&#123;</span><br><span class="line">    _myDelegate += Test;</span><br><span class="line">    _myDelegate += Test;</span><br><span class="line">    _myDelegate += Test;</span><br><span class="line">    _myDelegate.Invoke();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span>()</span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VAc5931afdb24b6ccd90876b814c98e1f9.png" alt="输出结果"><p>同样，我们也可以通过 <code>-=</code> 操作符从多播委托中移除函数。如果函数不存在则程序无反应。如果调用了一个空的委托，会产生 <code>NullReference</code> 报错，因此在使用 <code>Invoke</code> 调用委托时可以用 <code>?.</code> 语法糖进行判空。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义了一个返回值和参数为空的委托类型</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyDelegate</span>()</span>;</span><br><span class="line"><span class="comment">// 声明MyDelegate类型的一个委托</span></span><br><span class="line"><span class="keyword">private</span> MyDelegate _myDelegate;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Main</span>()</span>&#123;</span><br><span class="line">    _myDelegate += Test;</span><br><span class="line">    _myDelegate += Test;</span><br><span class="line">    _myDelegate += Test;</span><br><span class="line">    _myDelegate.Invoke();</span><br><span class="line">    _myDelegate -= Test;</span><br><span class="line">    _myDelegate?.Invoke();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span>()</span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多播委托的底层是一个<strong>数组</strong>，我们称之为“<strong>委托链</strong>”，因此多播委托也可以被称为<strong>链式委托</strong>。通过下面的反编译结果可以看出，多播委托使用了 <code>Delegate.Combine</code> 函数。当两个及以上的委托被链接到一个委托链时，调用头部的委托将导致该链上的所有委托方法都被执行。通过 <code>System.MulticastDelegate</code> 中的 <code>GetInvocationList()</code> 方法，可以以数组的形式获得整个链式委托中的所有委托。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反编译结果</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> &#123;</span><br><span class="line">    Program.a = (Action) Delegate.Combine((Delegate) Program.a, (Delegate) <span class="keyword">new</span> Action((<span class="built_in">object</span>) <span class="literal">null</span>, __methodptr(Test)));</span><br><span class="line">    Program.a = (Action) Delegate.Combine((Delegate) Program.a, (Delegate) <span class="keyword">new</span> Action((<span class="built_in">object</span>) <span class="literal">null</span>, __methodptr(Test)));</span><br><span class="line">    Program.a = (Action) Delegate.Combine((Delegate) Program.a, (Delegate) <span class="keyword">new</span> Action((<span class="built_in">object</span>) <span class="literal">null</span>, __methodptr(Test)));</span><br><span class="line">    Program.a();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在某个委托方法中修改了委托链（例如 <code>+=</code> 了新的方法），新委托链是不会被执行的，因为本次执行的委托引用指向的是旧的链。委托是一种<strong>引用类型</strong>（类似于字符串一般具有不变的特性），在增加或移除方法时实际上创建了一个新的委托实例并把它赋给当前的委托变量。在多播委托执行时，C# 会先将当前委托链<strong>拷贝</strong>出来，然后按这个拷贝的顺序依次调用。这保证了即使在回调中修改了委托链，拷贝的链条也不会被改变。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Action a;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> &#123;</span><br><span class="line">    a += Test;</span><br><span class="line">    a += Test;</span><br><span class="line">    a += Test;</span><br><span class="line">    a.Invoke();</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;_______&quot;</span>);</span><br><span class="line">    a.Invoke();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>()</span> &#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">    a += Test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA0b570b2efde5ba89fd652973e0d5267a.png" alt="输出结果"><p>需要注意的是，对于有返回值的多播委托，如果没有手动调用委托链上的每个方法，只能得到<strong>委托链上最后被调用的方法的返回值</strong>。</p><h2 id="两种特殊的委托">两种特殊的委托</h2><p>每次使用委托，都需要先声明委托的类型（指定返回值和参数），再为该类型的委托声明一个实例去存储函数，步骤稍微有些繁琐。针对常用的两种类型的委托，C# 为我们封装了两种委托类型：<code>Action</code> 和 <code>Func</code>。</p><h3 id="action">Action</h3><p><code>Action</code> 是没有返回值的委托。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这样就声明了一个无参无返回值的委托实例</span></span><br><span class="line"><span class="keyword">private</span> Action _action;</span><br><span class="line"><span class="comment">// 泛型参数无返回值的委托实例</span></span><br><span class="line"><span class="keyword">private</span> Action&lt;T&gt; _action1;</span><br></pre></td></tr></table></figure><h3 id="func">Func</h3><p><code>Func</code> 是有返回值的委托，其中尖括号的最后一个代表返回值（由 <code>ref</code> 修饰，所以是返回值）。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个返回值为int类型、无参的委托实例</span></span><br><span class="line"><span class="keyword">private</span> Func&lt;<span class="built_in">int</span>&gt; _func;</span><br><span class="line"><span class="comment">// 参数为两个int，返回值为int类型的委托实例</span></span><br><span class="line"><span class="keyword">private</span> Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt; _func1;</span><br></pre></td></tr></table></figure><h2 id="匿名函数与lambda表达式">匿名函数与Lambda表达式</h2><p>有些时候，一个函数可能就在回调时使用了一次，不存在复用。这时如果再为这段代码去定义一个函数，可能就显得有些浪费空间。C#提供了<strong>匿名函数</strong>和<strong>Lambda表达式</strong>的功能，我们可以通过这两种写法为委托加上一段匿名的逻辑，例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Action _myDelegate1;</span><br><span class="line"><span class="keyword">private</span> Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt; _myDelegate2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Main</span>()</span>&#123;</span><br><span class="line">    <span class="comment">// Lambda表达式</span></span><br><span class="line">    _myDelegate1 = () =&gt; &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Test1&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 匿名函数</span></span><br><span class="line">    _myDelegate2 = <span class="built_in">delegate</span>(<span class="built_in">int</span> a, <span class="built_in">int</span> b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 等同于</span></span><br><span class="line">    <span class="comment">// _myDelegate2 = (int a, int b) =&gt; &#123; a + b;&#125;;</span></span><br><span class="line"></span><br><span class="line">    _myDelegate1?.Invoke();</span><br><span class="line">    <span class="built_in">int</span> res = _myDelegate2.Invoke(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    Console.WriteLine(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA8d7f96b6ffd52061cb42e8fbd5f7aefd.png" alt="运行结果"><p>Lambda表达式写起来特别精简，想必有函数式编程经验的小伙伴对这种写法比较熟悉，因为Lambda表达式是仿照函数式的编写方式。</p><p>处于委托的特性，委托适合用于回调函数和事件机制（通过观察者模式实现）中。</p><h1 id="注意">注意</h1><p><code>delegate</code> 实际上是一种特殊的<strong>类</strong>，是一个引用类型的变量，存放在托管堆上，因此会受到GC的影响，使用时需要注意避免内存泄漏等问题。如果没有及时通过 <code>-=</code> 移除函数，委托会一直持有它，这会导致一些资源无法被GC导致一些问题产生。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Program._myDelegate1 = Program.&lt;&gt;c.&lt;&gt;<span class="number">9</span>__2_0 ?? (Program.&lt;&gt;c.&lt;&gt;<span class="number">9</span>__2_0 = <span class="keyword">new</span> Action((<span class="built_in">object</span>) Program.&lt;&gt;c.&lt;&gt;<span class="number">9</span>, __methodptr(&lt;Main&gt;b__2_0)));</span><br><span class="line">Program._myDelegate2 = Program.&lt;&gt;c.&lt;&gt;<span class="number">9</span>__2_1 ?? (Program.&lt;&gt;c.&lt;&gt;<span class="number">9</span>__2_1 = <span class="keyword">new</span> Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt;((<span class="built_in">object</span>) Program.&lt;&gt;c.&lt;&gt;<span class="number">9</span>, __methodptr(&lt;Main&gt;b__2_1)));</span><br><span class="line">Action delegate1 = Program._myDelegate1;</span><br></pre></td></tr></table></figure><h1 id="参考资料">参考资料</h1><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.delegate.combine?view=net-8.0">https://learn.microsoft.com/zh-cn/dotnet/api/system.delegate.combine?view=net-8.0</a><br><a href="https://www.bilibili.com/video/BV1vgpreoE2p">https://www.bilibili.com/video/BV1vgpreoE2p</a></p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 语言基础 </tag>
            
            <tag> 委托 </tag>
            
            <tag> 特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#进阶（二）-反射</title>
      <link href="/2023/02/17/C-%E8%BF%9B%E9%98%B6%EF%BC%88%E4%BA%8C%EF%BC%89-%E5%8F%8D%E5%B0%84/"/>
      <url>/2023/02/17/C-%E8%BF%9B%E9%98%B6%EF%BC%88%E4%BA%8C%EF%BC%89-%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是反射？">什么是反射？</h1><p>反射（Reflection）指程序可以<strong>访问、检测和修改它本身或其他程序集状态或行为</strong>的一种能力。开发者可以使用反射动态地创建类型的实例，将类型绑定到现有对象，或从现有对象中获取类型，还可以调用类型的方法或访问其字段和属性。</p><p>换句话说，反射指的是程序在运行时可以查看其他程序集或自身的元数据。一个运行的程序查看本身或者其他元数据的行为就叫做反射。函数在执行时，通过反射可以得到其他程序集或自己程序集代码的各种信息（即<strong>元数据</strong>信息，包括类、函数、变量、对象等等），可以实例化它们、执行它们或操作它们。</p><p>反射可以在程序编译后获得信息，提高了程序的拓展性和灵活性。</p><ol><li>程序运行时得到所有元数据，包括元数据的特性</li><li>程序运行时实例化对象、操作对象</li><li>程序运行时创建新对象，用这些对象执行任务</li></ol><blockquote><ul><li><strong>程序集</strong><br>程序集是由编译器编译得到的、供进一步编译执行的中间产物，在windows系统中一般表现为后缀为.dll（库文件）或.exe（可执行文件）的文件</li></ul></blockquote><blockquote><ul><li><strong>元数据</strong><br>描述数据的数据，例如程序中的类、类中的函数、变量等信息就是程序的元数据。元数据保存在程序集中</li></ul></blockquote><h1 id="反射语法">反射语法</h1><h2 id="type">Type</h2><p>Type类是<strong>类的信息类</strong>，也是实现反射的基础。Type是访问元数据的主要方式，可以通过它的成员获取有关类型<strong>声明的信息</strong>和有关类型的<strong>成员</strong>（如构造函数、方法、字段、属性和类的事件）。</p><p>如何获取Type呢？有以下三种方法（通过这三种方式得到的type指向堆中的同一个内存，每个类型的type都是唯一的）：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;  <span class="comment">// a属于System.Int32类型</span></span><br><span class="line"><span class="comment">// 1、通过Object下的GetType获取</span></span><br><span class="line">Type type = a.GetType();</span><br><span class="line"><span class="comment">// 2、通过typeof关键字传入类名获取</span></span><br><span class="line">Type type2 = <span class="keyword">typeof</span>(<span class="built_in">int</span>);</span><br><span class="line"><span class="comment">// 3、通过类的名字（包含命名空间）获取</span></span><br><span class="line">Type type3 = Type.GetType(<span class="string">&quot;System.Int32&quot;</span>);</span><br></pre></td></tr></table></figure><p>得到Type之后，我们就可以进一步得到类里的信息了，比如程序集信息：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(type.Assembly);</span><br></pre></td></tr></table></figure><p>假设我们有一个类名字叫Test，它长这样：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span>&#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name = <span class="string">&quot;Adam&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> gender = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 默认无参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span>()</span>&#123; &#125;</span><br><span class="line">    <span class="comment">// 有参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span>(<span class="params"><span class="built_in">bool</span> gender</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span>(<span class="params"><span class="built_in">bool</span> gender, <span class="built_in">string</span> name</span>):<span class="title">this</span>(<span class="params">gender</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Intro</span>()</span>&#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Hello, my name is &quot;</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们就可以通过反射获取Test类中的所有<strong>公共成员</strong>（私有变量gender无法得到），这是一个 <code>MemberInfo</code> 类型的数组，数据内容为类型 + 成员名，例如 <code>Void Intro</code>。公共成员不仅包含了公共变量，还包含公共的构造函数和公共的函数。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="comment">// ....</span></span><br><span class="line">Type t = <span class="keyword">typeof</span>(Test);</span><br><span class="line">MemberInfo[] infos = t.GetMembers();</span><br></pre></td></tr></table></figure><p>当然我们也可以专门获得Test类的<strong>公共构造函数</strong>，这是一个 <code>ConstructorInfo</code> 类型的数组。获取的数据内容为 <code>Void .ctor()</code>，括号内为构造函数的输入类型，例如 <code>System.String</code>。</p><p>获取到构造函数之后，还可以通过反射调用它们：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取所有公共构造函数</span></span><br><span class="line">ConstructorInfo[] ctors = t.GetConstructors();</span><br><span class="line"><span class="comment">// 根据参数类型获取一个构造函数，例如下面是无参构造的构造函数：</span></span><br><span class="line">ConstructorInfo ctor = t.GetConstructor(<span class="keyword">new</span> Type[<span class="number">0</span>]);</span><br><span class="line">Test obj = ctor.Invoke(<span class="literal">null</span>) <span class="keyword">as</span> Test;  <span class="comment">// 执行</span></span><br><span class="line"><span class="comment">// 获取一个有参构造的构造函数：</span></span><br><span class="line">ConstructorInfo ctor = t.GetConstructor(<span class="keyword">new</span> Type[]&#123;<span class="keyword">typeof</span>(<span class="built_in">int</span>)&#125;);</span><br><span class="line">Test obj2 = ctor.Invoke(<span class="keyword">new</span> obect[]&#123;<span class="number">23</span>&#125;) <span class="keyword">as</span> Test;  <span class="comment">// 执行，按顺序传入的参数类型一定要和构造函数匹配</span></span><br></pre></td></tr></table></figure><p>既然可以拿到Test类的所有公共构造函数，那我们当然也可以拿到Test类的所有<strong>公共成员变量</strong>并动态修改它们的值，方法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取所有公共成员变量</span></span><br><span class="line">FieldInfo[] fields = t.GetFields();</span><br><span class="line"><span class="comment">// 通过名字查找指定的公共成员变量信息</span></span><br><span class="line">FieldInfo f = t.GetField(<span class="string">&quot;name&quot;</span>);    <span class="comment">// System.String name</span></span><br><span class="line"><span class="comment">// 获取和设置对象的值</span></span><br><span class="line">Test lsl = <span class="keyword">new</span> Test(<span class="literal">true</span>, <span class="string">&quot;STARON&quot;</span>);</span><br><span class="line"><span class="comment">// 获取名字</span></span><br><span class="line">Console.WriteLine(f.GetValue(lsl));</span><br><span class="line"><span class="comment">// 设置名字</span></span><br><span class="line">f.SetValue(lsl, <span class="string">&quot;SORTZE&quot;</span>);</span><br></pre></td></tr></table></figure><p>最后，我们可以通过类似的操作获取Test类的<strong>公共成员方法</strong>。如果方法存在重载，则用Type数组表示方法类型（类似公共构造函数小节）：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MethodInfo[] methods = t.GetMethods();</span><br><span class="line"><span class="comment">// 根据名字和参数列表获取对应方法</span></span><br><span class="line">MethofInfo method = t.GetMethod(<span class="string">&quot;Intro&quot;</span>, <span class="keyword">new</span> Typr[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// 传入参数调用（如果是静态方法，Invoke中的第一个参数传null即可）</span></span><br><span class="line">method.Invoke(<span class="literal">null</span>, <span class="literal">null</span>);  <span class="comment">// 第一个参数是要执行的对象，第二个参数是object[]，传入的是参数</span></span><br></pre></td></tr></table></figure><p>除此之外Type类还可以获取类的枚举、事件、接口和属性，方法都是类似的，即通过</p><ul><li>GetEnumNames</li><li>GetEvents</li><li>GetInterfaces</li><li>GetPropertys</li></ul><p>方法获取。</p><h2 id="activator">Activator</h2><p><code>Activator</code> 用于快速实例化对象的类，用于将Type对象快速实例化为对象。</p><p>回忆一下通过 <code>Type</code> 实例化一个对象的过程：首先需要获取特定参数（也可以是无参）的<strong>构造函数</strong>，然后利用 <code>Invoke</code> 传入对应的参数数组（也可以是无参）去调用这个构造函数，最后返回实例化完成的对象。</p><p>这其实有点复杂，但通过 <code>Activator</code> ，我们可以这么做：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Type t = <span class="keyword">typeof</span>(Test);</span><br><span class="line"><span class="comment">// 无参构造</span></span><br><span class="line">Test obj = Activator.CreateInstance(t) <span class="keyword">as</span> Test;</span><br><span class="line"><span class="comment">// 有参构造，第二个参数为变长参数数组1object[]，因此直接传入参数类型即可</span></span><br><span class="line">Test yby = Activator.CreateInstance(t, <span class="literal">false</span>, <span class="string">&quot;GALITY&quot;</span>) <span class="keyword">as</span> Test;</span><br></pre></td></tr></table></figure><p><code>Activator</code> 非常方便，但参数一定要记得与构造函数的一一对应。</p><h2 id="assembly">Assembly</h2><p><code>Assembly</code> 类就是程序集类，主要用途是用于<strong>加载其他程序集</strong>（比如.dll文件）。加载完成后，才能通过 <code>Type</code> 获取对应程序集中的信息。正是因为 <code>Assembly</code> 的存在，反射可以轻松创建、调用和修改其他程序集中的内容，使其成为一个强大的功能。<code>Assembly</code> 类中有三种加载程序集的函数：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载同一文件夹下的其他程序集</span></span><br><span class="line">Assembly ass = Assembly.Load(<span class="string">&quot;程序集名称&quot;</span>);</span><br><span class="line"><span class="comment">// 加载不同文件夹下的程序集</span></span><br><span class="line">Assembly ass2 = Assembly.LoadFrom(<span class="string">@&quot;C:\Users\Guiny Time\RiderProjects\ConsoleAppFuncTest\ConsoleAppFuncTest\bin\Debug\ConsoleAppFuncTest&quot;</span>); <span class="comment">// 包含程序集清单的名称或路径</span></span><br><span class="line">Assembly ass3 = Assembly.LoadFile(<span class="string">&quot;要加载程序集的完全限定路径&quot;</span>);    <span class="comment">// 要加载程序集的完全限定路径</span></span><br></pre></td></tr></table></figure><p>获得程序集之后，可以获得其中的所有类型：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取所有Types</span></span><br><span class="line">Type[] types = ass2.GetTypes();</span><br><span class="line"><span class="comment">// 获取指定的Type</span></span><br><span class="line">Type t = ass2.GetType(<span class="string">&quot;ConsoleAppFuncTest.Program&quot;</span>);</span><br></pre></td></tr></table></figure><p>有了具体的 <code>Type</code> 之后，我们就可以动态调用其他程序集的代码了。</p><h1 id="如何自己创建类库-dll">如何自己创建类库（.dll）</h1><p>针对不同的应用程序有不同种类的类库（例如针对Windows的、针对.NET的）。在Unity开发的过程中，我们通常可以创建一个C#（.NET Framework）的类库，把一系列工具封装到类库中，再在实际工厂中通过反射获取并执行其中的方法。</p><p>创建类库的方式很简单，现代编辑器都提供了默认的模板，比如在我个人常用的Rider在新建项目时就有Class Library的选项：</p><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VAae3203716307d4ee95be3ae4e23fd3b0.png"><p>有别于控制台应用，类库是纯写代码的，没有办法运行，只能被“<strong>生成</strong>”，打包得到一个.dll文件（程序集）。</p><h1 id="参考资料">参考资料</h1><p><a href="https://www.runoob.com/csharp/csharp-reflection.html">https://www.runoob.com/csharp/csharp-reflection.html</a><br><a href="https://www.bilibili.com/video/BV1Ar4y1K7AK">https://www.bilibili.com/video/BV1Ar4y1K7AK</a></p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 语言基础 </tag>
            
            <tag> 特性 </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#进阶（一）-闭包</title>
      <link href="/2023/02/13/C-%E9%97%AD%E5%8C%85/"/>
      <url>/2023/02/13/C-%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是闭包？">什么是闭包？</h1><p>C#中的<strong>闭包</strong>（Closure）指函数可以访问其<strong>定义作用域之外的变量</strong>（外部变量）。换句话说，一个闭包就是一个“捕获”或“携带”了其生成的环境中、所引用的<strong>自由变量</strong>的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。不止C#中存在闭包的特性，JS中也存在闭包。</p><p>C#闭包最常见的例子是在<strong>匿名函数</strong>（或<strong>Lambda表达式</strong>）中捕获自由变量，例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Action a;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            a += () =&gt; &#123;</span><br><span class="line">                <span class="comment">// 闭包捕获i</span></span><br><span class="line">                Console.WriteLine(i);</span><br><span class="line">            &#125;; </span><br><span class="line">        &#125;</span><br><span class="line">    a();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA63f3ccd4b622113dd2a3aa81bd432f72.png" alt="输出结果"><p>为什么输出全是 <code>5</code> 而不是 <code>1, 2, 3, 4, 5</code> 呢？那是因为for循环中的变量 <code>i</code> 并不在匿名函数的作用域内，为了能够使用 <code>i</code>，在匿名函数中形成了一个闭包存放 <code>i</code>。通过 Rider 的 IL Viewer 工具，我们可以检查代码反编译后的结果，可见由编译器为匿名函数生成的密封类&lt;&gt;c__DisplayClass1_0中出现了一个内部变量 <code>i</code>，这就是存放外部变量的地方了：</p><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VAbe7446a2ec3507b3f79c33f8c782520c.png" alt="右边是反编译后的C#代码"><p>有别于一般匿名函数或委托的静态特性（即编译后生成的包装类是静态的，这样可以减轻GC压力），闭包的匿名函数在每次使用时（在上面的例子中一共使用了五次），都需要 <code>new</code> 一个新的匿名函数实例出来。下面是反编译后的 Main 函数：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> &#123;</span><br><span class="line">    Program.&lt;&gt;c__DisplayClass1_0 cDisplayClass10 = <span class="keyword">new</span> Program.&lt;&gt;c__DisplayClass1_0();</span><br><span class="line">    <span class="keyword">for</span> (cDisplayClass10.i = <span class="number">0</span>; cDisplayClass10.i &lt; <span class="number">5</span>; cDisplayClass10.i++)</span><br><span class="line">        Program.a = (Action) Delegate.Combine((Delegate) Program.a, (Delegate) <span class="keyword">new</span> Action((<span class="built_in">object</span>) cDisplayClass10, __methodptr(&lt;Main&gt;b__0)));</span><br><span class="line">    Program.a();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码结束之后，cDisplayClass10.i 变为了 <code>5</code>，这正是actions们捕获到内部的 <code>i</code> 变量指向的。因此在后续执行时，输出的结果全部都是5。</p><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA966501e6fa443d70cbb43e6a906612d2.png" width="400"><p>想要避免出现这样的问题，只需要在 for 循环里新建一个内部变量去暂存i的值，再在匿名函数中使用新建的内部变量即可。每次循环中新建的内部变量的地址都不相同，所以输出将会是 <code>1, 2, 3, 4, 5</code>。</p><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA375ee4a73bb0b6042be0ebcf8dfb4abb.png" width="400"><h1 id="闭包变量的生命周期">闭包变量的生命周期</h1><p>由前文可知，闭包中存放了外部变量，这一行为可以<strong>延长外部变量的生命周期</strong>。例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Action action;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestFunc2</span>()</span>&#123;</span><br><span class="line">    <span class="built_in">int</span> num = <span class="number">1234</span>;</span><br><span class="line">    action = () =&gt;&#123;</span><br><span class="line">        Console.WriteLine(number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>number</code> 作为函数 <code>TestFunc2</code> 的成员变量，理应在函数执行结束后被释放，但委托 <code>action</code> 捕获了它形成闭包，因此每次调用 <code>action</code> 时都会输出 <code>number</code> 的值（1234）， <code>number</code> 的生命周期和 <code>action</code> 同步了。</p><p>除此之外，还有一个避免出现该问题的方法：在闭包中使用 <code>foreach</code> 而不是 <code>for</code>。至少在 C# 7.0+ 版本中这个问题已经被注意到了，使用 <code>foreach</code> 的时候编译器会自动生成代码绕过这个闭包陷阱。另外在 C# 7.0+ 中，用本地函数代替委托可以在编译时生成结构体而非类，作为值类型的结构体可以在方法跑完后就立即释放，不需要等待垃圾回收。所以在官方的推荐中，如果委托的使用不是必要的，更推荐使用<strong>本地函数</strong>而非匿名函数。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名方法</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetClosureFunction1</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> val = <span class="number">10</span>;</span><br><span class="line">    Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; internalAdd = x =&gt; x + val;</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(internalAdd(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">    val = <span class="number">30</span>;</span><br><span class="line">    Console.WriteLine(internalAdd(<span class="number">10</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本地函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetClosureFunction2</span>()</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> val = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="built_in">int</span> <span class="title">InternalAdd</span>(<span class="params"><span class="built_in">int</span> x</span>)</span> =&gt; x + val;</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(InternalAdd(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">    val = <span class="number">30</span>;</span><br><span class="line">    Console.WriteLine(InternalAdd(<span class="number">10</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="闭包可能带来的问题">闭包可能带来的问题</h1><p>首先就是内存泄漏的风险，如果忘记回收委托，委托将一直持有外部变量导致内存泄漏。开发者应该注意及时移除事件绑定。</p><p>其次是GC压力。存在闭包的匿名函数每次调用时都会new一个新的出来：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Program.&lt;&gt;c__DisplayClass1_0 cDisplayClass10 = <span class="keyword">new</span> Program.&lt;&gt;c__DisplayClass1_0();</span><br></pre></td></tr></table></figure><p>最后是不小心用了外部变量的引用时又遇到了多线程，可能会因为共享外部变量而造成预期之外的结果。采用临时变量或锁可以避免这个问题。</p><p>因此，我们应该谨慎小心地使用闭包。</p><h1 id="使用场景">使用场景</h1><p>感觉 C# 闭包似乎里里外外都是问题，那它有什么实际的应用场景吗？闭包的核心能力是可以捕获外部变量，这特别适用于延迟执行的场景，例如<a href="https://www.bilibili.com/video/BV1Q84SeSEeA">视频</a>中为一系列按钮赋id。在赋值的函数结束之后，仍可在外部通过委托打印id。基于这个特性，闭包还可以起到缓存的作用。</p><p>闭包的另一个常见应用场景是在异步编程中，尤其是在捕获异步执行的上下文时。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">async</span> Task <span class="title">DownloadFiles</span>(<span class="params">List&lt;<span class="built_in">string</span>&gt; fileUrls</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> url <span class="keyword">in</span> fileUrls) &#123;</span><br><span class="line">        <span class="built_in">string</span> currentUrl = url; <span class="comment">// 避免捕获 url 的引用</span></span><br><span class="line">        <span class="keyword">await</span> Task.Run(() =&gt; &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Downloading <span class="subst">&#123;currentUrl&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="comment">// 下载逻辑</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考资料">参考资料</h1><p><a href="https://juejin.cn/post/7167641621515730981">https://juejin.cn/post/7167641621515730981</a><br><a href="https://www.bilibili.com/video/BV1Q84SeSEeA">https://www.bilibili.com/video/BV1Q84SeSEeA</a><br><a href="https://cloud.tencent.com/developer/article/2094857">https://cloud.tencent.com/developer/article/2094857</a><br><a href="https://www.cnblogs.com/eventhorizon/p/9535289.html">https://www.cnblogs.com/eventhorizon/p/9535289.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 语言基础 </tag>
            
            <tag> 特性 </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Gerstner Wave算法的海洋实现</title>
      <link href="/2022/09/29/%E5%9F%BA%E4%BA%8EGerstner%20Wave%E7%AE%97%E6%B3%95%E7%9A%84%E6%B5%B7%E6%B4%8B%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/09/29/%E5%9F%BA%E4%BA%8EGerstner%20Wave%E7%AE%97%E6%B3%95%E7%9A%84%E6%B5%B7%E6%B4%8B%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="介绍">介绍</h1><h2 id="sin-wave的局限">Sin Wave的局限</h2><p>在引入Gerstner Wave之前，人们更多使用正弦波来模拟海浪，因为正弦波天生具有类似海浪的形状。但它的局限也很明显，那就是波峰过于圆润，纵然有办法通过代数方法约束波峰的形状，但效果还是无法达到预期的尖锐。</p><p><img src="/2022/09/29/%E5%9F%BA%E4%BA%8EGerstner%20Wave%E7%AE%97%E6%B3%95%E7%9A%84%E6%B5%B7%E6%B4%8B%E5%AE%9E%E7%8E%B0/Sb8fb55c5f57b452dac273b30a9c6d677j.gif" alt="瞧这圆滚滚的波峰"></p><h2 id="什么是gerstner-wave">什么是Gerstner Wave</h2><p>Gerstner Wave是Sin Wave的后继者，到现在也是一种常用的用来模拟海洋波浪的算法。他的历史其实已经很古老了，可以追溯到1986年。相比于快速傅里叶变换(FFT)，Gerstner Wave方法的开销更小，效果也很真实，因此被更多的应用与游戏领域（FFT更适合影视行业，因为它的效果更好但开销更大）。<br>Gerstner Wave的公式如下：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>+</mo><mo>∑</mo><mo stretchy="false">(</mo><mrow><msub><mi>Q</mi><mi>i</mi></msub><msub><mi>A</mi><mi>i</mi></msub><mo>∗</mo><msub><mi>D</mi><mi>i</mi></msub><mi mathvariant="normal">.</mi><mi>x</mi><mo>∗</mo><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><msub><mi>D</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>+</mo><mi>φ</mi><mi>t</mi></mrow><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mo>+</mo><mo>∑</mo><mo stretchy="false">(</mo><mrow><msub><mi>Q</mi><mi>i</mi></msub><msub><mi>A</mi><mi>i</mi></msub><mo>∗</mo><msub><mi>D</mi><mi>i</mi></msub><mi mathvariant="normal">.</mi><mi>y</mi><mo>∗</mo><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><msub><mi>D</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>+</mo><mi>φ</mi><mi>t</mi></mrow><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>∑</mo><mo stretchy="false">(</mo><mrow><msub><mi>A</mi><mi>i</mi></msub><mo>∗</mo><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><msub><mi>D</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>+</mo><mi>φ</mi><mi>t</mi></mrow><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">P(x,y,t) = \begin{pmatrix}x + \sum({Q_{i}A_{i} * D_{i}.x * \cos(\omega_{i} D_{i}(x,y) + \varphi t}))  \\y + \sum({Q_{i}A_{i} * D_{i}.y * \cos(\omega_{i} D_{i}(x,y) + \varphi t}))  \\\sum({A_{i} * \sin(\omega_{i} D_{i}(x,y) + \varphi t})) \end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8100000000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">φ</span><span class="mord mathdefault">t</span></span><span class="mclose">)</span><span class="mclose">)</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">φ</span><span class="mord mathdefault">t</span></span><span class="mclose">)</span><span class="mclose">)</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">φ</span><span class="mord mathdefault">t</span></span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8100000000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中x和y表示任一顶点的水平面坐标（在unity中对应x和z），t表示时间。前两行代表顶点在xy平面做cos变化，第三行表示顶点的高度轴（在unity中为y）做sin变化。如果可视化Gerstner Wave中每一个顶点的运动情况，则有下图的结果：</p><p><img src="/2022/09/29/%E5%9F%BA%E4%BA%8EGerstner%20Wave%E7%AE%97%E6%B3%95%E7%9A%84%E6%B5%B7%E6%B4%8B%E5%AE%9E%E7%8E%B0/Sae98b3d8eb7d4dd687270602c24193b3C.gif" alt></p><p>这代表顶点在做圆周运动，这是因为x方向为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">cos</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span></span></span></span> 函数，高度方向为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>i</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">sin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span></span></span></span> 函数的原因。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>i</mi><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>c</mi><mi>o</mi><msup><mi>s</mi><mn>2</mn></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">sin^2 + cos^2 = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><h1 id="在unity中实现">在Unity中实现</h1><p>由上公式，我们可以剥离出几个控制变量：</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">Height</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span></span></span></span>，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">A_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，表示浪的高度</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>p</mi><mi>e</mi><mi>e</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">Speed</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span></span></span></span>，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\varphi_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，因为与时间相乘，表示浪的运行速度</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>，即周期，用来在后续表示<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi></mrow><annotation encoding="application/x-tex">\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>h</mi><mi>a</mi><mi>r</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">Sharp</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">h</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">p</span></span></span></span>，即尖锐程度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">Q_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，控制浪尖的尖锐程度</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi><mi>a</mi><mi>v</mi><mi>e</mi><mi>D</mi><mi>i</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">WaveDir</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>，即浪的运动方向(Wave Direction)</li></ul><p>为了避免float类型的变量太多导致材质参数过多，这回我把Height\Speed\T\Sharp封装到了一个vec4变量中</p><p><img src="/2022/09/29/%E5%9F%BA%E4%BA%8EGerstner%20Wave%E7%AE%97%E6%B3%95%E7%9A%84%E6%B5%B7%E6%B4%8B%E5%AE%9E%E7%8E%B0/S6931d0a23c4e4530a38590d28235443bI.webp" alt="用到了group一组节点的功能，可以起到注释的作用"></p><p>其余渲染的部分可以参照上一篇文章(水体渲染)，这里用模型高度插值加了一个浪尖白沫，其他是一样的。</p><h2 id="步骤">步骤</h2><ol><li>利用已有变量计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi></mrow><annotation encoding="application/x-tex">\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">Q_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi><mo>=</mo><mfrac><mrow><mn>2</mn><mi>π</mi></mrow><mi>T</mi></mfrac></mrow><annotation encoding="application/x-tex">\omega = \frac{2\pi}{T}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 就不用多说了，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mi>i</mi></msub><mo>=</mo><mfrac><mrow><mi>S</mi><mi>h</mi><mi>a</mi><mi>r</mi><mi>p</mi></mrow><mrow><mi>ω</mi><mo>∗</mo><mi>A</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">Q_{i} = \frac{Sharp}{\omega * A}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.277216em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="mbin mtight">∗</span><span class="mord mathdefault mtight">A</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">Q_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是控制波浪陡度的参数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">Q_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为0表示通常的滚动正弦波，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mi>i</mi></msub><mo>=</mo><mfrac><mn>1</mn><mrow><mi>ω</mi><mo>∗</mo><mi>A</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">Q_{i} = \frac{1}{\omega * A}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="mbin mtight">∗</span><span class="mord mathdefault mtight">A</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>表示尖峰，加入sharp控制尖锐程度</li><li>计算x、z和y的部分，组装乘vec3后与Position相加<br>Gerstner Wave的公式已经给出，现在也计算好了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi></mrow><annotation encoding="application/x-tex">\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">Q_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，所以直接组合公式即可。计算完成后将x、y、z的结果组装成Vec3，与Position节点相加后输出<br><img src="/2022/09/29/%E5%9F%BA%E4%BA%8EGerstner%20Wave%E7%AE%97%E6%B3%95%E7%9A%84%E6%B5%B7%E6%B4%8B%E5%AE%9E%E7%8E%B0/S45048c2064c54cf8afef24307b13c9d2y.webp" alt></li></ol><p>调整过参数后一层Gerstner Wave效果：<br><img src="/2022/09/29/%E5%9F%BA%E4%BA%8EGerstner%20Wave%E7%AE%97%E6%B3%95%E7%9A%84%E6%B5%B7%E6%B4%8B%E5%AE%9E%E7%8E%B0/Sc8d49de73a3e42d39c6fa40e595aeebbo.gif" alt="一层Gerstner Wave"></p><p>叠加一层的效果比较一般，因为只有一层波浪的效果。但是可以设置不同参数（例如浪速、浪的方向）后叠加第二个方向的波浪。下图是叠加两层Gerstner Wave效果</p><p><img src="/2022/09/29/%E5%9F%BA%E4%BA%8EGerstner%20Wave%E7%AE%97%E6%B3%95%E7%9A%84%E6%B5%B7%E6%B4%8B%E5%AE%9E%E7%8E%B0/Sbbeb27aa98054ea694bf1eb8baa54978L.gif" alt="把SceneColor乘上了水色，看起来更海洋一些"></p><p>给小船加上动画，有內味了：</p><p><img src="/2022/09/29/%E5%9F%BA%E4%BA%8EGerstner%20Wave%E7%AE%97%E6%B3%95%E7%9A%84%E6%B5%B7%E6%B4%8B%E5%AE%9E%E7%8E%B0/S0eed0c9febdb4b9c820dd0ae82bfd6a3q.gif" alt="最终效果"></p>]]></content>
      
      
      <categories>
          
          <category> 效果实现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> ShaderLab </tag>
            
            <tag> shader </tag>
            
            <tag> demo </tag>
            
            <tag> 水体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水面、波浪、白沫和焦散</title>
      <link href="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/"/>
      <url>/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="介绍与准备">介绍与准备</h1><p>我最近打算开始做毕设项目的场景啦XD！这个项目的名字叫元素宇宙(Elemental Universe)，是一个化学元素拟人世界观下的小宇宙的故事，目前只有我一个人在做，第一步是搭场景。主场景打算用polyBrush磨出来，其中有一些湖泊和海洋。海洋部分我打算用GerstnerWave的方法来做，湖泊部分采用本文所介绍的方法（当然，还有很多可以改进的地方。有改进的部分会在“更新说明”里提及）。</p><p>废话交代完了，现在正式开始吧：</p><p>首先，准备一个细分好的平面（因为我们需要一定数量的顶点）作为水面。在这个项目中我使用的是：</p><p><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/S4692442a6627441b8f9dc376338fa8376.webp" alt></p><p>演示模型来自Sketchfab，使用遵守CC版权协议。如下预览所示，模型原本的水面只是一块普通的、smooth值几乎设置为1的水平面：</p><div class="sketchfab-embed-wrapper"> <iframe title="Little Pond & fish" frameborder="0" allowfullscreen mozallowfullscreen="true" webkitallowfullscreen="true" allow="autoplay; fullscreen; xr-spatial-tracking" xr-spatial-tracking execution-while-out-of-viewport execution-while-not-rendered web-share src="https://sketchfab.com/models/4f091bcb17ce42ee9a7e678a16ddc349/embed"> </iframe> <p style="font-size: 13px; font-weight: normal; margin: 5px; color: #4A4A4A;"> <a href="https://sketchfab.com/3d-models/little-pond-fish-4f091bcb17ce42ee9a7e678a16ddc349?utm_medium=embed&utm_campaign=share-popup&utm_content=4f091bcb17ce42ee9a7e678a16ddc349" target="_blank" style="font-weight: bold; color: #1CAAD9;"> Little Pond & fish </a> by <a href="https://sketchfab.com/motpanda?utm_medium=embed&utm_campaign=share-popup&utm_content=4f091bcb17ce42ee9a7e678a16ddc349" target="_blank" style="font-weight: bold; color: #1CAAD9;"> Kenny Kwok. </a> on <a href="https://sketchfab.com?utm_medium=embed&utm_campaign=share-popup&utm_content=4f091bcb17ce42ee9a7e678a16ddc349" target="_blank" style="font-weight: bold; color: #1CAAD9;">Sketchfab</a></p></div><h1 id="波浪">波浪</h1><p>波浪的基本原理是顶点动画，通过修改水面顶点y值(高度)实现，这也是为什么前文提到我们需要一块顶点数比较多的面，越多的顶点意味着越高的波浪精细程度。</p><p>我们现在希望的事情是：水面能够上下波动形成波浪。对于湖泊这样较为波澜不惊的水域，用GerstnerWave模拟的话浪尖太尖，不太合适。想要圆滑一点的波浪，直接用sin的效果更好。</p><p>可以直接对顶点的模型空间坐标的一个分量（譬如x）使用sin函数计算进行模拟，如下所示。其中Height控制浪高，Speed控制波浪起伏速度，Time表示不断递增的时间，vert表示模型空间的顶点。</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>y</mi><mo>+</mo><mo>=</mo><mi>H</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo>∗</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>v</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>x</mi><mo>∗</mo><mi>T</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo>∗</mo><mi>S</mi><mi>p</mi><mi>e</mi><mi>e</mi><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">vert.y += Height * sin(vert.x * Time * Speed)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">+</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mclose">)</span></span></span></span></span></p><p>但如果顶点足够密的话会发现这个波浪是沿着x方向走的，如果把vert.x替换成vert.z就是沿着z方向的浪。相加之后浪就是斜着走的了。我自己是觉得斜着的浪更好看一些吧（直上直下总觉得哪里怪怪的），所以最终采用的公式是：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>y</mi><mo>+</mo><mo>=</mo><mi>H</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo>∗</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>v</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>x</mi><mo>+</mo><mi>v</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>z</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>T</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo>∗</mo><mi>S</mi><mi>p</mi><mi>e</mi><mi>e</mi><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">vert.y += Height * sin((vert.x + vert.z) * Time * Speed)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">+</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mclose">)</span></span></span></span></span></p><p>在shader graph中，它表示为：</p><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/006UcwnJly1h65euevlmxj30uc0c5q5a.jpg" alt="着色器图" width="1092" data-width="1092" data-height="437"><p>最终连接到VertexShader的Position上，波浪搞定。</p><h1 id="水域分层与浮沫效果">水域分层与浮沫效果</h1><p>波浪完成之后，现在的水面是一种单色调的、不透明的、会动的面。</p><p><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/S69deed0922c746a38b7c54834bc82de4n.webp" alt></p><p>而见过一般水域的你都会认为一个漂亮的水域应该是下图的样子：</p><p><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/Saf5e78cc5f124768bc44ba1f487fab48D.webp" alt></p><p>这片水域的特点可以概括为以下几点：</p><ol><li>有微微起伏的起伏</li><li>水域分层，浅层的水的颜色也更透亮、深层的水则更深沉</li><li>岸边伴随着白色的浮沫</li><li>水下的物体由于光的折射而扭曲</li></ol><p>其中波浪部分我们已经实现了，现在开始实现水域分层。</p><h2 id="水域分层">水域分层</h2><p>水域分层体现在越浅的水的颜色越透亮、越深的水颜色更深沉，颜色与深度有关。</p><p><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/S2a6d93e321774c3c9df197cdbde622cdS.webp" alt="海洋调色盘, created by Sherwin-Williams"></p><p>如果获取到水域的深浅情况，就可以根据水深对颜色进行插值了。怎么求水深呢？假设水面顶点经过MV矩阵处理完的坐标为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\begin{pmatrix}x  \\y  \\z \\1 \end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span>现在我们有：</p><ol><li>相机的深度图(Z-buffer)，一张黑白的图片，表示每个绘制出来的像素的深度值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mfrac><mrow><mi>z</mi><mo stretchy="false">(</mo><mi>F</mi><mi>a</mi><mi>r</mi><mo>+</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><mo>⋅</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi><mo>⋅</mo><mi>F</mi><mi>a</mi><mi>r</mi></mrow><mrow><mi>z</mi><mo stretchy="false">(</mo><mi>F</mi><mi>a</mi><mi>r</mi><mo>−</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{\frac{z(Far + Near)+2 \cdot Near \cdot Far}{z(Far - Near)}+1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7579em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4129em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.6864500000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0377857142857143em;"><span style="top:-2.640785714285714em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5020714285714285em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mclose mtight">)</span><span class="mbin mtight">+</span><span class="mord mtight">2</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5377857142857143em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li>原始(raw)屏幕空间位置的数据，从相机出发获取每一点的世界空间深度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">-z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></li></ol><p>这里Z-Buffer里的值是非线性的，需要转换成眼空间下的线性深度值进行计算，在ShaderLab中使用的是LinearEyeDepth函数。如果我们把眼空间的场景深度减去原始(raw)屏幕空间位置的alpha值，就能获取到一个差值对深层水的颜色与浅层水的颜色进行插值。LinearEyeDepth的底层推导过程可以参考：<a href="https://zhuanlan.zhihu.com/p/157863844">https://zhuanlan.zhihu.com/p/157863844</a></p><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/006UcwnJly1h6665r2j4pj30p80dotce.jpg" width="400" data-width="908" data-height="492"><p>如果你觉得这个插值太刚硬了，可以加一个指数去调节，让颜色的过渡更平滑（这是我在刚做这个效果时没意识到的一个地方）。或者可以干脆新添加一个变量“陡峭程度”steep：</p><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/006UcwnJly1h666g1tvl3g30pd0ct1kz.gif" alt="steed效果演示" width="400" data-width="913" data-height="461"><p>目前为止，fragment部分的shader graph长下图这样(请不要在意那些多出来的线，与后续步骤有关)。现在我们要在水域分割的基础上添加浮沫的效果啦。</p><p><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/Sd28657e9e80c4052b50046d739726f75L.webp" alt="片元着色器图"></p><div class="note info simple"><p><strong>请注意</strong><br>如果要获取深度图，需要在相机渲染设置里开启Depth Texture选项<br><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/S170180ee88744e60ac7af1a4ec4914882.webp" alt></p></div><h3 id="screenposition节点的模式">ScreenPosition节点的模式</h3><h4 id="default模式">default模式</h4><p>光栅化的章节里我简单画了一个屏幕坐标系，当时以屏幕左下角为原点建系：<br><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/Sc75208253a6042b4863c4b7c41fa11efo.webp" alt="屏幕坐标系"></p><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/S7b1624e719aa46148fc70b8517bc6db4o.webp" alt="ScreenPosition的default模式" width="300" data-width="918" data-height="513"><p>事实上，default模式的屏幕空间坐标系也是这样建的。如果把ScreenPosition连到baseColor上输出，就能得到上图右所示的情况。该模式下节点只包含了屏幕上任何一像素的横纵坐标值。</p><h4 id="center模式">center模式</h4><p>center模式较于default模式将原点移动到了屏幕中心，该模式下节点依然只包含了屏幕上任何一像素的横纵坐标值。</p><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/006UcwnJly1h65ylh7odgj30pi0e90y7.jpg" alt="ScreenPosition的center模式" width="300" data-width="918" data-height="513"><h4 id="tile模式">tile模式</h4><p>“tile”的意思是平铺。以屏幕中心为原点，每256*256个像素作为一个单元进行平铺，该模式下节点依然只包含了屏幕上任何一像素的横纵坐标值。</p><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/S53e001abf59e4d1e95a2e670e62c7847s.webp" alt="ScreenPosition的tile模式" width="300" data-width="918" data-height="513"><h4 id="raw模式">raw模式</h4><p>raw模式即原始数据模式，与前面提到的三种模式都不同。raw模式是数据指每个顶点经过MVP矩阵变换之后、还未进行齐次除法的信息。第四个分量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span>，或者说<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>，代表了世界空间的深度，或者说眼空间深度(eye-space depth)。<br>为什么？因为:</p><ol><li>顶点数据在MV矩阵处理过后为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\begin{pmatrix}x  \\y  \\z \\1 \end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span>，其中w分量不受平移、旋转、缩放的影响，依然是1。这里的z的绝对值代表了点到相机的深度距离。</li><li>投影矩阵P为：</li></ol><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi>cot</mi><mo>⁡</mo><mfrac><mrow><mi>F</mi><mi>O</mi><mi>V</mi></mrow><mn>2</mn></mfrac></mrow><mrow><mi>A</mi><mi>s</mi><mi>c</mi><mi>e</mi><mi>p</mi><mi>t</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cot</mi><mo>⁡</mo><mfrac><mrow><mi>F</mi><mi>O</mi><mi>V</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mrow><mi>F</mi><mi>a</mi><mi>r</mi><mo>+</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi></mrow><mrow><mi>F</mi><mi>a</mi><mi>r</mi><mo>−</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi></mrow></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mrow><mn>2</mn><mo>⋅</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi><mo>⋅</mo><mi>F</mi><mi>a</mi><mi>r</mi></mrow><mrow><mi>F</mi><mi>a</mi><mi>r</mi><mo>−</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">P = \begin{pmatrix}   \frac{\cot{\frac{FOV}{2}}}{Ascept}    &amp; 0                       &amp; 0                                 &amp; 0 \\   0                                      &amp; \cot{\frac{FOV}{2}}    &amp; 0                                 &amp; 0 \\   0                                      &amp; 0                       &amp; -\frac{Far + Near}{Far - Near}    &amp; -\frac{2 \cdot Near \cdot Far}{Far - Near} \\   0                                      &amp; 0                       &amp; -1                                &amp; 0\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:5.4000699999999995em;vertical-align:-2.4500349999999997em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.950035em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.4999950000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.0950050000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.6900150000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.7100150000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.950035000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.925183em;"><span style="top:-4.925183em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.161265em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">A</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5508em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mtight">c</span><span class="mtight">o</span><span class="mtight">t</span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8720928571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.571744em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.339413em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.0960819999999998em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4251830000000005em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.925183em;"><span style="top:-4.925183em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.571744em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mop">cot</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span style="top:-2.339413em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.0960819999999998em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4251830000000005em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.925183em;"><span style="top:-4.925183em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.571744em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.339413em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.0960819999999998em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4251830000000005em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.925183em;"><span style="top:-4.925183em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.571744em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.339413em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.0960819999999998em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4251830000000005em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.950035em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.4999950000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.0950050000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.6900150000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.7100150000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.950035000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><ol start="3"><li>经过计算，顶点坐标变成了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mfrac><mrow><mi>cot</mi><mo>⁡</mo><mfrac><mrow><mi>F</mi><mi>O</mi><mi>V</mi></mrow><mn>2</mn></mfrac></mrow><mrow><mi>A</mi><mi>s</mi><mi>c</mi><mi>e</mi><mi>p</mi><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mrow><mi>cot</mi><mo>⁡</mo><mfrac><mrow><mi>F</mi><mi>O</mi><mi>V</mi></mrow><mn>2</mn></mfrac></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mo>−</mo><mi>z</mi><mo stretchy="false">(</mo><mi>F</mi><mi>a</mi><mi>r</mi><mo>+</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi><mo stretchy="false">)</mo><mo>−</mo><mn>2</mn><mo>⋅</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi><mo>⋅</mo><mi>F</mi><mi>a</mi><mi>r</mi></mrow><mrow><mi>F</mi><mi>a</mi><mi>r</mi><mo>−</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi></mrow></mfrac></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>z</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\begin{pmatrix}x { \frac{\cot{\frac{FOV}{2}}}{Ascept}} \\y{\cot{\frac{FOV}{2}}}  \\\frac{-z(Far + Near)-2 \cdot Near \cdot Far}{Far - Near} \\-z \end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.488035em;vertical-align:-2.4940175em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.950035em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.4999950000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.0950050000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.6900150000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.7100150000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.950035000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9940175em;"><span style="top:-4.9940175em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.161265em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">A</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5508em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mtight">c</span><span class="mtight">o</span><span class="mtight">t</span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8720928571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span style="top:-3.6405784999999997em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord"><span class="mop">cot</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span><span style="top:-2.2705785em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mclose mtight">)</span><span class="mbin mtight">−</span><span class="mord mtight">2</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.0272475000000003em;"><span class="pstrut" style="height:3.161265em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4940175em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.950035em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.4999950000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.0950050000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.6900150000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.7100150000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.950035000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span></span></span></span></span>。</li><li>可见<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span>变成了点到相机的深度距离，或者说眼空间深度(eye-space depth)。</li></ol><blockquote><p>在正交模式下，由于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mrow><mi>o</mi><mi>r</mi><mi>t</mi><mi>h</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mrow><mi>A</mi><mi>s</mi><mi>c</mi><mi>e</mi><mi>p</mi><mi>t</mi><mo>⋅</mo><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mrow><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mn>2</mn><mrow><mi>F</mi><mi>a</mi><mi>r</mi><mo>−</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi></mrow></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mrow><mi>F</mi><mi>a</mi><mi>r</mi><mo>+</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi></mrow><mrow><mi>F</mi><mi>a</mi><mi>r</mi><mo>−</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">P_{orth} = \begin{pmatrix}\frac{1}{Ascept \cdot Size}    &amp; 0  &amp; 0    &amp; 0 \\0   &amp; \frac{1}{Size}    &amp; 0                        &amp; 0 \\0                              &amp; 0                 &amp; -\frac{2}{Far - Near}    &amp; -\frac{Far + Near}{Far - Near} \\0                              &amp; 0                 &amp; 0 &amp; 1\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:5.006986em;vertical-align:-2.253493em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.753493em;"><span style="top:-4.908385em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">A</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">t</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mord mathdefault mtight">e</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.5821689999999995em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.349838em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.106507em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.253493em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.753493em;"><span style="top:-4.908385em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.5821689999999995em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mord mathdefault mtight">e</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.349838em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.106507em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.253493em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.753493em;"><span style="top:-4.908385em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.5821689999999995em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.349838em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.106507em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.253493em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.753493em;"><span style="top:-4.908385em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.5821689999999995em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.349838em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.106507em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.253493em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span>始终为1。</p></blockquote><p>可见这个结果与顶点自身有关，因为波浪中控制顶点进行运动，所以将ScreenPosition连到baseColor上输出的话结果是在不停地改变着的：</p><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/006UcwnJly1h65zecrlawg315u0mk1l5.gif" alt="ScreenPosition的raw模式" width="300" data-width="1506" data-height="812"><h2 id="浮沫">浮沫</h2><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/006UcwnJly1h666qcdcmij30xc0m8x0h.jpg" width="500" data-width="1200" data-height="800"><p>浮沫（或者说白沫）指的是水域靠近岸边时产生的一系列白色泡沫边缘部分，常见于海边，适当的浮沫会让水域更生动。在前面的水域划分部分里，其实我们已经得到了被着色为浅水的部分，这部分正好对应岸边“应当聚集浮沫”的地方。那我们拿这个区域与浮沫的贴图相乘不就好了吗？没错。</p><p>可以找心仪的噪声来模拟波浪，不同的噪声可以获得不一样的波浪效果：</p><center><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/006UcwnJly1h667eqrcvzg30pd0ctx6q.gif" alt="浮沫效果1" width="300" data-width="913" data-height="461" style="display:inline"><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/006UcwnJly1h667fonrxkg30pd0ct7wk.gif" alt="浮沫效果2" width="300" data-width="913" data-height="461" style="display:inline"></center><p>首先，我们要让浮沫能够**“动起来”<strong>。在把噪声纹理导入之后，使用Time节点修改纹理的UV偏移量就能实现。因为波浪的方向是斜着的，所以直接乘Time就行。这里我们可以给Time乘一个</strong>浮沫速度<strong>的变量以</strong>控制噪声的运动速度**。同时，可以加一个变量<strong>浮沫缩放</strong>用来<strong>控制噪声的缩放大小</strong>。在Shader Graph中可以直接用TileAndOffset节点实现：</p><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/006UcwnJly1h6690cl21og30o009o1kx.gif" alt="着色器图" width="664" data-width="864" data-height="348"><div class="note info simple"><p><strong>请注意</strong><br>如果要得到正确的、连续的贴图偏移/缩放效果，需要在贴图设置里修改平铺模式为Reapeat<br><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/006UcwnJly1h668eqtrzfj30bp013glg.jpg" alt></p></div><p>现在，让噪声与浮沫水域（和浅水域很类似，但你可以自己定义一个FoamArea参数取代原本的Depth用来控制浮沫范围）部分相乘，得到的结果再与浮沫颜色根据浮沫水域范围进行插值（用来控制噪声的消隐）：</p><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/S09c6cb2402104b63a3c38840a8994b92G.webp" width="400" data-width="904" data-height="457"><p>好丑啊！！！本身就模糊的噪声被直接贴上来了，各种意义上都有失美感。我们可以用Step函数滤掉一部分，获得一个较硬的浮沫边缘：</p><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/S70bcff758bc54c61bf50bc61b53d59cfV.webp" width="400" data-width="953" data-height="308"><p>已经搞定了，不是吗？而且由于我们设置了独立于浅水域的浮沫水域，可以设置浮沫的范围：</p><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/Sb99b8aae2b444fe2a6901178c46ead3b0.gif" alt="我们还可以调整浮沫的范围" width="912" data-width="912" data-height="348"><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/S94678975df4f4a4584d7a615feb774e49.webp" width="1297" data-width="1297" data-height="462"><h1 id="水体折射">水体折射</h1><p>现在的水体虽然已经能够展示浮沫和深浅水域了，但是我们没法透过水域看到湖底的东西，也没有折射效果。根据光学原理，光在穿过不同介质的时候会发生折射现象，加上水面的扭曲，我们看到的东西不会是这么宁静的。所以我们要做的事情是：</p><ol><li>增加折射效果（晃动水底）</li><li>增加扭曲效果（噪声扭曲）</li></ol><h2 id="晃动水底">晃动水底</h2><p>把Default模式的ScreenPosition加上SceneColor节点之后、与浅水域颜色进行插值再输出到水面上，会得到水底的环境（现在我们终于能看清这条鱼长什么样子了）：</p><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/S1ecfa77607f44b07a8cba99fd30ca4b2p.webp" alt="挺可爱的" width="400" data-width="822" data-height="468"><p>既然要晃动水底实现折射的效果，理所应当的我们会想到使用一个周期函数进行摇晃，而最常见的周期函数就是sin。把Time节点的sin（需要自行调整一下大小）与ScreenPosition相加之后，得到了这样的效果：</p><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/006UcwnJly1h66auzlycbg30pb09ob2a.gif" alt="sin" width="500" data-width="911" data-height="348"><p>我们的水面也没有晃的那么厉害，折射所看到的box的虚影应该至少在晃动的同侧。可以把sin函数的范围从[-1,1]映射到[0,1]，保证同侧：</p><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/S229563591b9441c6bfc1f54c3c579553w.gif" width="500" data-width="910" data-height="348"><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/006UcwnJly1h66b4bf1w5j30wz0aptaj.jpg" alt="着色器图" width="1187" data-width="1187" data-height="385"><h2 id="噪声扭曲">噪声扭曲</h2><p>现在就是最后一步，也就是扭曲水底的映像，得到水体波动扭曲的效果。实现方法是通过噪声生成法线(NormalFromHeight节点)，与ScreenPosition节点相加，再输出到片元着色器的base color节点上。诶，为什么Normal不是输出到Normal节点呢？因为NormalFromHeight节点使用的是屏幕空间求导得到节点（这也是为什么我们能把ScreenPosition与之相加），这在顶点着色器中不可用。</p><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/006UcwnJly1h66dfwinp2g30pa09o7wh.gif" alt="扭曲" width="500" data-width="910" data-height="348"><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/S434eff5b821242bb98bfada9dc44d5cex.webp" alt="着色器图" width="1263" data-width="1263" data-height="574"><p>我们几乎已经全部完成了。现在，把水体结果与水域分割、浮沫相加，再用saturate规范一下(因为我发现浮沫在开启bloom效果的情况下特别亮，说明有值太大了)：</p><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/006UcwnJly1h66dpe6b6sg30pa09o1ky.gif" alt="目前的效果" width="500" data-width="910" data-height="348"><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/S0e5cb458451c4e7ca9ce69a62853d577Y.webp" alt="着色器图" width="1918" data-width="1918" data-height="945"><h1 id="更新说明">更新说明</h1><h2 id="2022-9-15-让水域分层面一起扭曲">2022/9/15 - 让水域分层面一起扭曲</h2><center><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/006UcwnJly1h66dpe6b6sg30pa09o1ky.gif" alt="原本水域分层和折射的部分是分开的，显得很割裂" width="450" data-width="910" data-height="348" style="display:inline"> <img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/006UcwnJly1h67q5ckx75g31660fie84.gif" alt="修改后" width="470" data-width="1518" data-height="558" style="display:inline"></center><p>分层的面没有和折射的部分一起扭曲，显得很奇怪，于是我把用来扭曲折射的部分(加到SceneColor前面的那一大串)加到了深度节点的uv接口。</p><h2 id="2022-9-15-为什么不加上焦散呢？">2022/9/15 - 为什么不加上焦散呢？</h2><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/Scf892eeb5b6b48d882948552f796fcd6T.gif" width="470" data-width="1518" data-height="558"><p>焦散(Caustic)是一种光学现象。当观察游泳池或者其他清澈透亮的水体的时候，很容易在底部或者壁面发现这样的光纹，这就是焦散：</p><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/S3e36038064314516b9a2807cb3c54a868.webp" alt="游泳池里的焦散" width="400"><blockquote><p>A caustic is the envelope of light rays which have been reflected or refracted by a curved surface or object, or the projection of that envelope of rays on another surface.<br>焦散是由曲面引起的光反射。一般来说，任何曲面都可以表现得像一个透镜，将光线聚焦在一些点上，并将其散射到其他点上。玻璃和水是允许它们形成的最常见的介质.</p></blockquote><p>采用这篇博客提供的方法，可以通过一张贴图模拟出逼真的焦散效果：<a href="https://www.alanzucconi.com/2019/09/13/believable-caustics-reflections/">https://www.alanzucconi.com/2019/09/13/believable-caustics-reflections/</a></p><p>两次以不同程度的偏移来采样焦散噪声，并用min函数对两张贴图进行混合：</p><img src="/2022/09/13/%E6%B0%B4%E9%9D%A2%E3%80%81%E6%B3%A2%E6%B5%AA%E5%92%8C%E7%99%BD%E6%B2%AB/Sb5ff4e47927a41b2a151080cce15fecdt.gif" alt="焦散效果" width="239" data-width="239" data-height="446"><p>让焦散的部分展示在浅水域，同时在uv采样时加上扭曲就ok力！</p>]]></content>
      
      
      <categories>
          
          <category> 效果实现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> ShaderLab </tag>
            
            <tag> shader </tag>
            
            <tag> demo </tag>
            
            <tag> 水体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贴地雾效实现</title>
      <link href="/2022/02/07/%E8%B4%B4%E5%9C%B0%E9%9B%BE%E6%95%88%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/02/07/%E8%B4%B4%E5%9C%B0%E9%9B%BE%E6%95%88%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>  接上篇文章画的饼，这回我打算试着实现一下雾效，我们最终的目标就是实现类似下图的效果。当然，纪念碑谷中的不怎么被雾影响的方块和浸泡在雾气中的方块使用的应该是两种shader，他们不会混在一起。但如果我们要实现的是一个可以移动的场景呢？使用我想在纪念碑谷的静态贴地雾效上加点东西，即：当摄像机移动时，雾的范围会随着摄像机的移动而移动，始终做到远处模糊、近处清晰的效果。</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220206022120.png"><h1 id="思路">思路</h1><p>其实我们实现纪念碑谷中的这种雾效的思路和全局渐变非常类似。总结一下，主要有以下两点需求：</p><ul><li>离摄像机越远，雾气越浓，具体表现在物体整体与雾气的颜色相融</li><li>离摄像机越近，雾气越轻，具体表现在雾气很浅，几乎消失</li></ul><p>  即，离相机较远的物体如下左所示；离相机较近的物体如下右所示：</p><p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220206021225.png" style="display:inline"> <img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220206021327.png" width="300" style="display:inline"></p><p>  我们可以调整地平线（渐变中心位置）的值来实现这个效果。<strong>当一个物体离摄像机较近时，它的渐变中心也较低；反之则较高</strong>。</p><h1 id="实现">实现</h1><h2 id="变量">变量</h2><p>我们需要这么几个变量：</p><ul><li>渐变纹理</li><li>主色调</li><li>雾的颜色</li><li>雾的浓度</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Properties&#123;</span><br><span class="line">    _RampTex(&quot;渐变纹理&quot;, 2D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">    // 颜色设置</span><br><span class="line">    _UpColor(&quot;Main Color&quot;,Color)=(1,1,1,1)</span><br><span class="line">    _DownColor(&quot;Fog Color&quot;,Color)=(1,1,1,1)</span><br><span class="line">    // 雾气浓度</span><br><span class="line">    _Concentration(&quot;Fog Concentration&quot;, float) = 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顶点着色器">顶点着色器</h2><p>在顶点着色器中我们需要获取几组坐标：</p><ol><li>世界空间的顶点坐标</li><li>世界空间的顶点法线</li><li>裁剪空间的顶点坐标</li><li>观察空间的顶点坐标</li></ol><p>  在顶点着色器中，我们最关键的步骤是<strong>求出顶点和相机之间的距离</strong>。实现这个操作的方法是利用观察空间的坐标深度：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">v2f vert(appdata v)&#123;</span><br><span class="line">    v2f o;</span><br><span class="line">    // 获取观察空间坐标</span><br><span class="line">float3 cameraPos = mul(UNITY_MATRIX_MV,v.vertex).xyz;</span><br><span class="line">// 计算与相机距离</span><br><span class="line">o.distance = length(cameraPos);</span><br><span class="line">    </span><br><span class="line">    // 获取世界空间坐标</span><br><span class="line">    o.worldPos=mul(UNITY_MATRIX_M,v.vertex);</span><br><span class="line">    // 获取裁剪空间坐标</span><br><span class="line">    o.vertex = UnityObjectToClipPos(v.vertex);</span><br><span class="line"></span><br><span class="line">    o.worldNormal = normalize(mul((float3x3)UNITY_MATRIX_M, v.normal));</span><br><span class="line">    o.uv = TRANSFORM_TEX(v.texcoord, _RampTex);</span><br><span class="line">    return o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="片元着色器">片元着色器</h2><p>在片元着色器中，我们进行三个主要步骤：</p><ol><li>计算渐变纹理的映射</li><li>计算光照</li><li>雾气的渐变混合</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">float4 frag(v2f i) : SV_Target&#123;</span><br><span class="line">    // 渐变纹理</span><br><span class="line">    fixed3 worldN = normalize(i.worldNormal);</span><br><span class="line">    fixed3 worldLightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line">    fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line">    fixed halfLambert = 0.5 * dot(worldN, worldLightDir) + 0.5;</span><br><span class="line">    fixed3 diffuseColor = tex2D(_RampTex, fixed2(halfLambert, halfLambert)).rgb;</span><br><span class="line">    fixed3 diffuse = _LightColor0.rgb * diffuseColor;</span><br><span class="line"></span><br><span class="line">    // 计算光照</span><br><span class="line">    float NdotL = dot(i.worldNormal, _WorldSpaceLightPos0);</span><br><span class="line">    float light = clamp(NdotL * 0.237 + 0.763, 0, 1);</span><br><span class="line"></span><br><span class="line">    // 利用相机距离远近作为控制</span><br><span class="line">    _Concentration = _Concentration + i.distance;</span><br><span class="line">    // 混合</span><br><span class="line">    float4 fogCol = light * lerp(_DownColor, _UpColor, clamp( (i.worldPos.y - _Concentration) / 7.5, 0, 1));</span><br><span class="line">    float4 col = fixed4(ambient + diffuse + fogCol, 1.0);</span><br><span class="line">                </span><br><span class="line">    return col;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  最终效果和材质球控制演示如下所示：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/%E8%BF%91%E5%9C%B0%E9%9B%BE.gif"><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/%E8%BF%91%E5%9C%B0%E9%9B%BE%E6%BC%94%E7%A4%BA.gif"><h1 id="优化">优化</h1><p>  完成之后感觉好像看上去哪里不对。对比了一下纪念碑谷中的图之后，我意识到我的目标效果应该是贴地雾效，而不是全局雾效。即使物体距离摄像机比较远，他应该也只是底部的一部分被云雾覆盖住，而不是整个变成云雾的颜色。所以，我们应该在变量里加上一个“<strong>云雾地平线</strong>”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 最高雾气位置</span><br><span class="line">_Skyline(&quot;Skyline&quot;,float) = 0</span><br></pre></td></tr></table></figure><p>  之后，在片元着色器中对雾气浓度加上限制。由于测试过的数值都在0以下，所以选用了min函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_Concentration = min(_Concentration + i.distance, _Test);</span><br></pre></td></tr></table></figure><p>  这样，即使在很远的位置，较高的部分依然展现出原有的色彩：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220207010914.png"><p>再画个饼，下一篇文章打算研究一下几何形状的low poly风格海洋的实现。</p>]]></content>
      
      
      <categories>
          
          <category> 效果实现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> ShaderLab </tag>
            
            <tag> shader </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何正确地搞颜色？</title>
      <link href="/2022/02/04/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%90%9E%E9%A2%9C%E8%89%B2%EF%BC%9F/"/>
      <url>/2022/02/04/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%90%9E%E9%A2%9C%E8%89%B2%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="如何正确地搞颜色？">如何正确地搞颜色？</h1><div>&emsp;&emsp;如何正确地“搞颜色”？看到这里，你的脑海中是不是闪过了一些奇奇怪怪的东西？不，这是篇非常正经的科普！所以现在，让我来给大家看一张色图。很正经吧~这张图上的小可爱叫做色轮，它将是我们接下来的科普中的主角，现在请先记住它的样子吧！</div><img src="https://pic.rmb.bdstatic.com/bjh/c6bf82e971e2783b6980df061a08b4b1.png" width="300/"><div>&emsp;&emsp;本文中我将围绕色彩的基本知识、几种常见的配色方案逐一展开介绍。</div><h1 id="颜色理论与配色模式">颜色理论与配色模式</h1><h2 id="人类是如何看见颜色的？">人类是如何看见颜色的？</h2><div>&emsp;&emsp;在自然界中自然光从光源发出，到达物体的表面。大部分被照射到的物体会吸收掉其中的一部分光，将剩下的光线反射到我们的眼睛里，成为了我们所看到的这个物体的颜色。如果一个物体不吸收任何落在其表面的光线，也就是说呢它把所有照射在它身上的光线都原封不动的反射回去了，那么它在人眼看来就是白色的。而另一方面，如果一个物体吸收了所有照射到它表面的光，那么这个物体看起来就会是黑色的。</div><img src="https://pic.rmb.bdstatic.com/bjh/b480ce28be46b372a1ed74482347bfec.png"><div>&emsp;&emsp;这种成色原理被称为减色法，在多媒体领域中对应于CMYK颜色模型。在日常生活中，这种颜色模型广泛应用于打印机等需要在不会自然发光的物体上显示颜色的场合。这是因为物体不会自发光，所以我们所看到的它的颜色来自于油墨本身反射的光。</div><div>&emsp;&emsp;而另一种颜色模型，RGB颜色模型则相反。想必相对于CMYK，各位对RGB的了解更多一些。RGB三个字母分别代表红、绿和蓝，是光的三基色。RGB颜色模型是指将这三种颜色按不同的比例进行混合得到一种新的颜色。这种颜色模式广泛应用于电视、电脑、手机等能够主动发光的设备。</div><div>&emsp;&emsp;现在，你已经了解了两种最基本的颜色模式，要怎么把这些颜色组合出完美的颜色搭配呢？接下来，我们先欣赏几种由前人总结出来的搞颜色的模式吧！</div><h2 id="单色配色">单色配色</h2><img src="https://pic.rmb.bdstatic.com/bjh/24323722b582f671f39392aad2911f6e.png"><div>&emsp;&emsp;单色模式应该是看起来最和谐的配色模式了。通过的示例，你几乎感受不到色彩上的冲撞，整个画面带给人一种和谐、清新的感觉。</div><div>&emsp;&emsp;单色模式之所以呈现出这种和谐感，是因为它其实是由同一种基础颜色，也就是色相，经过一定的明暗变化得到其他颜色的集合，正如这张色轮所示。除了基础颜色之外，它不包含额外的颜色的干扰，因此看起来更加简单、干净和精致。但是单色配色模式的缺点也很明显，那就是它是一种缺乏变化的配色方式。</div><img src="https://pic.rmb.bdstatic.com/bjh/e5638f7f5f554c0232fc86ee32aa2c6b.png"><h2 id="互补配色">互补配色</h2><img src="https://pic.rmb.bdstatic.com/bjh/38cfbd8504c567cded02623447412703.png"><div>&emsp;&emsp;那，如果说单色配色模式干净悠远又和谐，那我们接下来要介绍的这种配色模式就要活泼许多。有人想猜一下接下来要介绍的是哪一种配色模式吗？可以在群里打字哦。</div><div>&emsp;&emsp;接下来我们要介绍的就是互补配色，也被称作对比配色。互补色能够给人以一种强烈的碰撞感。在色轮上，互补色正好处在色轮的两端，这意味着这两种颜色的冷暖属性、给人的感受是完全相反的。也就是说，当这两种颜色放在一起时，我们很容易注意到两种颜色带来的冲突，如果应用得当可以带来十分惊艳的效果。</div><div>&emsp;&emsp;比如UI设计师们喜欢用互补色来突出希望用户注意到的信息，一些画作也巧妙的利用了这种冲突来表现画面，让观众第一眼能落到设计师希望观众注意到的地方。它的缺点也是显而易见的，过于混乱的对比关系可能让人眼花缭乱。</div><img src="https://pic.rmb.bdstatic.com/bjh/9482b746b6a54319c60b5120d62ee66f.png"><h2 id="补色分割配色">补色分割配色</h2><img src="https://pic.rmb.bdstatic.com/bjh/e8b6855955ee10f3189a774fbf25a8df.png"><div>&emsp;&emsp;接下来我要介绍的是补色分割配色法。补色分割配色如上图所示，使用一个基础色以及两个在色轮上相互对称的次要颜色，共组一个窄边三角形；它会选取一个暖色和两个冷色、或一个冷色配合两个暖色。</div><div>&emsp;&emsp;与互补色不同，补色分割配色较为协调也给予柔和些的视觉感。一般来说，在三角形中窄角的颜色一般为主要色，另外两个次要颜色常作打光或强调色使用。这创建了一个比互补色方案更为微妙的配色，它和互补色有着同样的視觉效果，但又不会显得那么“冲撞”。通过色轮可以看到，补色分割配色本质上就是互补配色的一个变形或分支，但它有一个重要区别：它的色彩对比和视觉反差不如互补配色那般强烈和夸张。</div><img src="https://pic.rmb.bdstatic.com/bjh/7d171b27a38b906b6ae0f81d96a117ed.png"><h2 id="近似色配色">近似色配色</h2><img src="https://pic.rmb.bdstatic.com/bjh/7ac37794eb4e04dcd0e2e41d8778cce6.png"><div>&emsp;&emsp;下一种配色模式似乎兼备了前面提到的两种配色模式的优点，它不如单色模式那样过于单调，但也不像对比色那样激烈。灵活应用这种配色模式，你可以轻易设计出和谐又活泼的界面。这是什么呢？那么我们来到了第三种配色模式，近似色。</div><div>&emsp;&emsp;近似色是指没有太多对比的一组颜色，它们在色轮上相互靠近。这种配色模式可以说是无所不能的，我们先来看看近似色和单色之间的对比。不难发现，相对于单色而言，近似色包含了更多的色彩，但是近似色又没有打破颜色之间微妙的和谐与平衡。这使得近似色能表现得更加丰富多彩，适合需要更多多样性的设计。</div><div>&emsp;&emsp;同时，相对于互补色，近似色又要柔和得多，因此是被称作万金油的搭配模式。我们经常在各种场合见到近似色。</div><img src="https://pic.rmb.bdstatic.com/bjh/085a53e31be1db7aba6b77dcadaaf34e.png"><h2 id="三等分配色">三等分配色</h2><img src="https://pic.rmb.bdstatic.com/bjh/171d6bc610811d8d680399db3c8256a8.png"><div>&emsp;&emsp;接下来我要介绍的是三等分配色法。三等分色的三个颜色位置之间有平均的距离，彼此之间存在一定的对比关系。如此一来三个颜色皆为主要颜色，产生一种鲜艳、抢眼的效果。不过使用这种配色方案需要特别注重作品的色彩平衡。正因为每种颜色之间微妙的对比关系，这种配色方案对于需要在设计中对每种颜色创建出高对比度的画面很有用。但是如果平等的分配三种颜色，可能会让画面的冲击感太强而失去美感。</div><div>&emsp;&emsp;那么有没有例外情况呢？有。在类似暗含“均分”元素的画面中，比如说三个功能的按钮，平均分配三种颜色确实不成问题。但是画面一旦复杂，平均的分摊三种颜色就会变得混乱。</div><div>&emsp;&emsp;要正确的应用三等分配色，一般是在三种颜色中选择一个或两个颜色作为主色来压制其他颜色。主色作为画面中最为主要的颜色，再少量使用其他颜色作为蜻蜓点水般的辅助，或者简单地选择一个柔和的色调来覆盖其他两个颜色也是可以的。</div><img src="https://pic.rmb.bdstatic.com/bjh/f5b79bbd3b67288e9c066c87e28b3e14.png"><h2 id="矩形配色">矩形配色</h2><img src="https://pic.rmb.bdstatic.com/bjh/8aef488013f5bf2ed303dc568c415f23.png"><div>&emsp;&emsp;如果从色轮中选择两对相互对立的颜色，会获得怎么样的效果？这就是矩形配色，比三等分配色还要桀骜不驯的一种配色方式。矩形配色的四种颜色间并没有明显的主次关系，但由于两两对比，这种配色模式也有着鲜艳亮眼的效果。这些颜色结合起来可能给人强烈的视觉感，但是为了求最好的视觉效果，在设计之前需要事先构思和细心创作。</div><div>&emsp;&emsp;颜色越多，设计师往往就越难调和它们。矩形配色更常见与四个按钮这样的平均分配的情况，或者降低对比度相互混杂以达到一种“纷繁”的效果。</div><h1 id="颜色心理学">颜色心理学</h1><div>&emsp;&emsp;我们已经了解了一些配色的基本知识，那我们要怎么去选择合适的配色方案呢？在正式开始搞颜色之前，我们需要了解一些“颜色心理学”。很多人认为颜色的选择主要取决于设计师的品味和审美，然而色彩选择的过程要比看起来要复杂得多。正确的搞颜色，在设计中非常重要。我们来看下图的这张表格，我们发现对于不同的颜色，人们的感受是存在区别的。</div><img src="https://pic.rmb.bdstatic.com/bjh/c78db4caa90b77d777b98ceb33540a39.png"><div>&emsp;&emsp;例如，当我们谈论红色时，会发现这个颜色常常与激情、热血或者侵略、进攻的感觉联系在一起。红色是双面的，它不仅给人带来热爱、自信的感觉，也能让人们联想到愤怒，是一种非常引人注目的颜色。在设计中，红色的使用往往是吸引用户注意的一种有效方式。</div><div>&emsp;&emsp;再举一个例子，当我们说到绿色时，你脑海中出现了什么画面？即使不是第一反应想到的，我们也总能通过绿色联想到茂密的森林和生机勃勃的草地。绿色是一种充满活力的颜色，所以它并不适合用来装饰消极或悲观的图像。更多的时候，我们会选择灰色系来处理后者。</div><div>&emsp;&emsp;但是色彩心理学只能代表大多数人的感受，它无法避免一些人对某种颜色有其他的理解。比如说一些人一看到绿色就会联想到瘟疫、疾病和死亡。此外，由于文化上的差异，同一种颜色在不同的文化中可能代表不同的含义。例如白色在西方文化中是神圣、纯洁的，经常用在庄严神圣的场合，比如婚礼。这也是为什么西式婚礼新娘的婚纱通常是洁白的。而在中国传统文化中白色则是死亡的象征，比如我们常常说红白喜事，这里的“白喜事”指有家里有高寿老人过世。</div><div>&emsp;&emsp;所以呢，在选择颜色的时候不仅需要考虑我们希望观众看到我们搞的颜色时的心理反应，还需要考虑不同文化下颜色的特殊含义。</div><img src="https://pic.rmb.bdstatic.com/bjh/3607a5234c94b086532e1c2ab118b182.png"><h1 id="正确的搞颜色">正确的搞颜色</h1><div>&emsp;&emsp;现在我们已经了解了颜色配色的基础知识和色彩心理学，是时候开始正确的搞颜色了。然而，如何正确地选择第一个颜色呢? 正如前面提到的，颜色的选择非常重要，选错了颜色可能是致命的。那么，我们将从受众群体和主题的方面进行考虑。</div><div>&emsp;&emsp;如果考虑受众默认为所有群体，有人知道最“安全”的颜色是什么吗？答案是蓝色。我们可以非常轻易的在手机上找到以蓝色为主色调的应用，比如默认主题的QQ、支付宝、推特、Pixiv等等。为什么是蓝色呢？通过下图可以发现，不管是男性还是女性，喜欢蓝色的群体占比是最大的。这意味着选择蓝色能迎合大部分人的喜好。考虑一下不同国家的文化差异呢？我们会发现图表中罗列出来的几个国家最喜欢的颜色中占比最高的竟然也都是蓝色。从颜色心理学的角度出发，它深沉、给人创新和信任、安全的感觉，是一种让人舒服的颜色。</div><img src="https://pic.rmb.bdstatic.com/bjh/3d71514d8253d8b1817984a4a4ca745f.png"><img src="https://pic.rmb.bdstatic.com/bjh/9b4e0557f4a0ce85dc1455205ff1018f.png"><div>&emsp;&emsp;现在我们考虑考虑特殊的受众群体。如果受众群体主要是女性，那么可以考虑使用一些暖色调，给人带来浪漫和美好的感觉，比如粉色、紫色、红色等等。而相反的，如果受众群体以男性为主，可以考虑使用冷色，比如绿色、蓝色和黑色，这样能给用户带来一种冷静、深沉、科技感等等的感觉。而如果观众是儿童或年轻人，可以考虑使用互补色、三等分色、补色分割等配色方案，因为这些颜色相对活泼大胆。相反，如果观众主要是成年人，则比较朴素的单色或类似色可能更合适。</div><div>&emsp;&emsp;从主题来看，比如说如果一幅画或者一个设计的主题是体育运动，那么它的主色调往往和黄色、红色或绿色脱不开干系，因为前两种颜色让人感觉“充满活力和热情”，而绿色则给人一种充满活力和追求成功的感觉。另一方面，如果主题是工作学习，蓝色、绿色、紫色甚至黑色等冷色更合适，因为这些颜色能唤起一种智慧和成熟的感觉。</div><div>&emsp;&emsp;现在，你已经是一个成熟的人了，相信你在日后欣赏色图的时候能对着色图的配色模式展开合理的分析，同时也能应用今天学到的知识正确的搞颜色。谢谢大家，本文就到此结束啦。</div>]]></content>
      
      
      <categories>
          
          <category> 探索发现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计 </tag>
            
            <tag> 颜色心理学 </tag>
            
            <tag> 心理学 </tag>
            
            <tag> 用户体验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全局渐变效果实现</title>
      <link href="/2022/02/01/%E5%85%A8%E5%B1%80%E6%B8%90%E5%8F%98%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/02/01/%E5%85%A8%E5%B1%80%E6%B8%90%E5%8F%98%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>  我想试着实现一下下图中纪念碑谷中的全局渐变的效果。关于如何实现这种渐变效果之前和别人讨论过，一开始我认为是通过从下往上打光来实现的，后来同学说是利用了shader和雾。利用后者实现的效果更为缓和，而利用光照可能会造成底部过亮的问题，不好控制。</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220202030207.png" width="300/"><p>  为什么我管这种效果叫“全局渐变”呢？因为当我移动模型的时候，渐变的范围并不是固定在模型身上的，而是在世界空间的“某个位置”（如下图所示）。实际上，我们可以自行规定这个渐变地平线的位置，只需要在shader里加个控制变量就可以了。</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/%E6%B8%90%E5%8F%98.gif"><h1 id="实现">实现</h1><h2 id="变量">变量</h2><p>首先，我们需要这么几个变量：</p><ul><li>顶部的颜色</li><li>底部的颜色</li><li>渐变混合的程度</li><li>光照的强度</li><li>渐变地平线</li><li>渐变纹理</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Properties</span><br><span class="line">&#123;</span><br><span class="line">    // 光照的强度</span><br><span class="line">    _Contrast(&quot;Contrast&quot;,Range(0,1))=0.1</span><br><span class="line">    // 渐变纹理</span><br><span class="line">    _RampTex(&quot;渐变纹理&quot;, 2D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">    // 上下渐变色</span><br><span class="line">    _UpColor(&quot;UpColor&quot;,Color)=(1,1,1,1)</span><br><span class="line">    _DownColor(&quot;DownColor&quot;,Color)=(1,1,1,1)</span><br><span class="line">    // 渐变程度</span><br><span class="line">    _WorldYDeno(&quot;WorldYDeno&quot;,float)=0</span><br><span class="line">    // 渐变中心位置</span><br><span class="line">    _Skyline(&quot;地平线&quot;, float) = 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顶点着色器">顶点着色器</h2><p>在顶点着色器中我们需要获取几组坐标：</p><ol><li>世界空间的顶点坐标</li><li>世界空间的顶点法线</li><li>裁剪空间的顶点坐标</li></ol><p>世界空间的坐标和法线用于光照强度的控制；裁剪空间的坐标用于渐变的渲染</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">v2f vert(appdata v)&#123;</span><br><span class="line">    v2f o;</span><br><span class="line">    // 世界空间坐标</span><br><span class="line">    o.worldPo=mul(UNITY_MATRIX_M,v.vertex);</span><br><span class="line">    // 世界空间法线</span><br><span class="line">    o.worldNormal = normalize(mul((float3x3)UNITY_MATRIX_M, v.normal));</span><br><span class="line">    // 裁剪空间坐标</span><br><span class="line">    o.vertex = UnityObjectToClipPos(v.vertex);</span><br><span class="line">    o.uv = TRANSFORM_TEX(v.texcoord, _RampTex);</span><br><span class="line">    return o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="片元着色器">片元着色器</h2><p>在片元着色器中，我们进行三个主要步骤：</p><ol><li>计算渐变纹理的映射</li><li>光照强度</li><li>渐变混合</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">float4 frag(v2f i) : SV_Target&#123;</span><br><span class="line">    // 渐变纹理</span><br><span class="line">    fixed3 worldN = normalize(i.worldNormal);</span><br><span class="line">    fixed3 worldLightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line">    fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line">    fixed halfLambert = 0.5 * dot(worldN, worldLightDir) + 0.5;</span><br><span class="line">    fixed3 diffuseColor = tex2D(_RampTex, fixed2(halfLambert, halfLambert)).rgb;</span><br><span class="line">    fixed3 diffuse = _LightColor0.rgb * diffuseColor;</span><br><span class="line">    // 光照强度</span><br><span class="line">    float NdotL = dot(i.worldNormal, _WorldSpaceLightPos0);</span><br><span class="line">    float light = clamp(NdotL * _Contrast + (1 - _Contrast), 0, 1);</span><br><span class="line">    // 渐变混合</span><br><span class="line">    float4 col = fixed4(ambient + diffuse + light * lerp(_DownColor, _UpColor, clamp( (i.worldPos.y - _Skyline) / _WorldYDeno, 0, 1)), 1.0);</span><br><span class="line">    </span><br><span class="line">    return col;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  最终，我们可以得到如下的效果（暂未加上渐变纹理贴图）：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/%E6%B8%90%E5%8F%981.gif" width="500/"><p>  可以看出效果不太好，并且在细节上表现的很不自然，画面的颜色很单一。如果加上渐变纹理的话可以得到更好的细节效果：</p><p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220205233646.png" width="308/"><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220205233913.png" width="300/"></p><p>  好，就是这样了。实际上，我们还可以在较远的物体表面加上一层<strong>雾</strong>。有关于雾效的实现，在下一篇demo文章中将会尝试一下。最终我们的材质球面板和面板各属性的控制情况如下所示：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220206012239.png" width="400/"><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/%E6%B8%90%E5%8F%98%E6%BC%94%E7%A4%BA.gif">]]></content>
      
      
      <categories>
          
          <category> 效果实现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> ShaderLab </tag>
            
            <tag> shader </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序棋盘格效果实现</title>
      <link href="/2022/01/21/%E7%A8%8B%E5%BA%8F%E6%A3%8B%E7%9B%98%E6%A0%BC%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/01/21/%E7%A8%8B%E5%BA%8F%E6%A3%8B%E7%9B%98%E6%A0%BC%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>  为什么会写这篇文章呢…因为我已经在大大小小的场合中遇到三次相关的题目了，前几次答得挺不尽人意的。第一次是在剑心互娱的校招笔试上，要求画一个黑灰白三条杠（下左），第二次是字节的二面要求画一个棋盘格的效果（下右），还有一次忘了（</p><p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121194712.png" width="250" style="display:inline"><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121221514.png" width="250" style="display:inline"></p><p>  对于这两种效果，我们的思路其实是一样的（棋盘格只需要多一步加法）。</p><h1 id="开始绘制">开始绘制</h1><p>  怎么用程序画东西呢？我们在做材质的时候似乎一直是基于贴图进行处理的。实际上，我们是可以直接对纹理映射（texcoord节点）下手的，如果将其连接到根节点的base color，我们会得到如下画面：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121204917.png" width="300/"><p>  为什么是这个颜色？首先需要知道的是：texcoord只有uv两个量，而颜色具有三个分量。当我们默认第三个分量为0时，就会得到上述的颜色信息。而如果我们把第三个分量设置为1，就会得到：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121212036.png" width="300/"><h1 id="数学处理">数学处理</h1><h2 id="黑-灰-白">黑、灰、白</h2><p>  为了实现三条边、四条边甚至多边的情况，我们需要对texcoord进行缩放，这一步很简单，只需要让texcoord乘上一个用来控制的常量：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121212722.png" width="300/"><p>  然后，对texcoord的值进行取整（floor节点）。这一步的目的是将贴图“阶梯化”，方便后续实现黑白分条的效果。下图好像并没有出现理想的分条效果，因为黄色的部分的uv值已经超过1了，程序自动用1填补了原本的值：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121213058.png"><p>  接下来我们对uv坐标除以2，这样坐标对应的值就变成了0，0.5，1，1.5，2，…，灰色开始出现</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121213315.png"><p>  接下来，我们把u和v从这张红红绿绿的图里解码出来，单独输出R通道（u）的结果如下所示：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121213912.png"><p>  这就是我们要的黑灰白三条杠的效果了。</p><h2 id="黑白棋盘">黑白棋盘</h2><p>  我们将在三条杠的基础上实现棋盘效果。把R通道的信息和G通道相加：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121215821.png"><p>  结果很不尽人意，因为超出的部分都变成了1（也就是白色的块），盘上还有灰色的块。现在我们需要的是一个黑白的棋盘，也就是说我们的颜色只能有0和1。<br>  怎么实现黑白的效果呢？现在其实我们的数学结果其实是这样的：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121221040.png" width="300/"><p>  如果只保留小数点部分，我们就可以得到比较合适的图了，只不过现在看上去是白色的部分其实是<strong>值为0.5的灰色</strong>。</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121194843.png" width="300/"><p>  我们还需要进行最后一步，也就是*2的操作才能得到真正的黑白棋盘。对比上图的“黑灰棋盘”还是有点区别的。<br>  （其实我一开始写的时候忘记乘2了，因为这个灰色比较淡，又在黑色边上，一下子没看出来）</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121221514.png" width="300/"><p>  实际场景应用效果：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220121222141.png">]]></content>
      
      
      <categories>
          
          <category> 效果实现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shader </tag>
            
            <tag> demo </tag>
            
            <tag> Unreal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>菲涅尔反射实现边缘光效果</title>
      <link href="/2022/01/17/%E8%8F%B2%E6%B6%85%E5%B0%94%E5%8F%8D%E5%B0%84%E5%AE%9E%E7%8E%B0%E8%BE%B9%E7%BC%98%E5%85%89%E6%95%88%E6%9E%9C/"/>
      <url>/2022/01/17/%E8%8F%B2%E6%B6%85%E5%B0%94%E5%8F%8D%E5%B0%84%E5%AE%9E%E7%8E%B0%E8%BE%B9%E7%BC%98%E5%85%89%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在之前的项目中，我从网上抓了一个用菲涅尔反射写的边缘光shader。经过自己的魔改之后，加上了法线等用在后续的项目中。现在我们回过头来探寻一下菲涅尔效应是如何用来实现边缘光的。<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/%E8%8F%B2%E6%B6%85%E5%B0%94.gif"></p><h1 id="参数">参数</h1><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220117132932.png"><p>我们有三个至关重要的参数：边缘光的颜色、边缘光强度和强度系数。</p><ul><li>边缘光颜色<br>这个没什么好说的，就是控制边缘光的颜色。但因为是<strong>光</strong>，所以当颜色调整为黑色时不论强度多少都是看不到效果的。</li><li>边缘光强度<br>这个值可以控制菲涅尔影响范围的大小，这个值越大，效果上越边缘化（上：强度为1.5；下：强度为4）。</li></ul><p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220117133226.png" width="105/"><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220117133245.png" width="100/"></p><ul><li>边缘光强度系数<br>这个值控制菲涅尔反射的反射强度，值越大，反射越亮，反之越暗（上：强度为1.5；下：强度为12）。代码里的注释有错，因为原先的代码的强度系数在内部被原作者定死了。</li></ul><p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220117134332.png" width="105/"><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220117134445.png" width="100/"></p><h1 id="片元着色器">片元着色器</h1><h2 id="边缘检测">边缘检测</h2><p>这一步是实现边缘光效果的核心。<br>首先我们来理清一下思路，如何进行边缘检测？其实很简单的一种方式就是通过视线方向和片元的法线方向点乘进行判断。当我们差不多正视一个片元的时候，夹角通常都是小于45°的。而片元越靠近边缘，与视线的夹角越大，最终达到视线相切的90°，再大就看不到了。<br>所以我们对视线和片元法线归一化之后进行点乘，可以得到：</p><ul><li>视线与法线相切，点乘的结果为0</li><li>视线与法线重合，点乘的结果为1</li><li>视线与法线的夹角在(0°, 45°)，点乘的结果在(0, 1)范围内</li></ul><p>于是我们得到一个信息：值越小，片元越靠近视线观察角度的边缘。我们可以对这个结果进行求反（用1减去值就好），得到更符合逻辑的结果。</p><h2 id="菲涅尔着色">菲涅尔着色</h2><p>我们已经有了求反过的点乘信息NdotV，接下来我们就需要把它展现在材质球上。我们可以定义一个叫fresnel的变量来简单的将NdotV和控制强度的变量相乘，再乘上边缘光的颜色：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">float fresnel = NdotV * _InSideRimIntensity;</span><br><span class="line">float3 Emissive = _InSideRimColor.rgb * fresnel; </span><br><span class="line">return fixed4(Emissive + diffuse + ambient, 1.0);</span><br></pre></td></tr></table></figure><p>我们已经可以得到一个初步的效果。但是不幸的是，不管我们怎么调整强度，反射环的面积似乎总是太大了，并且有一种雾蒙蒙的感觉：</p><p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220117141104.png" width="100/"><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220117141253.png" width="111/"></p><p>在另一篇文章（UE4 Materials 101：材质混合）中我们介绍了用指数提升对比度、缩小范围的方法。因此，我们可以引入一个变量来控制边缘光的强弱（并不是控制光强，而是控制了最大影响范围）。我们可以把代码改写成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float fresnel = pow(NdotV,_InSideRimPower) * _InSideRimIntensity;</span><br></pre></td></tr></table></figure><p>这样，我们就得到了不错的边缘光效果了。如果想在这个基础上加上边缘光的“呼吸”效果，可以引入sin(time.z)对光强进行调整。不过需要小心颜色超出1的情况，所以最好加一个max函数进行限制，或者自己拟好合适的三角函数曲线。</p><h2 id="源码">源码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line">    const fixed3 albedo = tex2D(_MainTex, i.uv).rgb * _MainColor.rgb;</span><br><span class="line">    // 环境光</span><br><span class="line">    const fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * albedo;</span><br><span class="line">    i.wold_normal = normalize(i.wold_normal);</span><br><span class="line">    // 获取世界空间的视角方向</span><br><span class="line">    float3 worldViewDir = normalize(_WorldSpaceCameraPos.xyz - i.vertexWorld.xyz);</span><br><span class="line">    // 获取世界空间的光照方向</span><br><span class="line">    fixed3 worldLightDir = normalize(_WorldSpaceLightPos0.xyz); </span><br><span class="line">    // 漫反射</span><br><span class="line">    const fixed3 diffuse = _LightColor0.rgb * albedo * max(0, dot(i.wold_normal, worldLightDir)); </span><br><span class="line"></span><br><span class="line">    /*核心步骤*/</span><br><span class="line">    // 计算法线方向和视角方向点积,约靠近边缘夹角越大，值约小，那就是会越在圆球中间约亮，越边缘约暗</span><br><span class="line">    half NdotV = max(0, dot(i.wold_normal, worldViewDir));</span><br><span class="line">    // 求反</span><br><span class="line">    NdotV = 1.0 - NdotV;</span><br><span class="line">    float fresnel = pow(NdotV, _InSideRimPower) * _InSideRimIntensity;</span><br><span class="line">    // 内边缘光自发光颜色</span><br><span class="line">    float3 Emissive = _InSideRimColor.rgb * fresnel;</span><br><span class="line"></span><br><span class="line">    return fixed4(Emissive + diffuse + ambient,1.0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 效果实现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> ShaderLab </tag>
            
            <tag> shader </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Z-Fighting</title>
      <link href="/2022/01/12/%E8%A7%A3%E5%86%B3Z-Fighting/"/>
      <url>/2022/01/12/%E8%A7%A3%E5%86%B3Z-Fighting/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="解决z-fighting">解决Z-Fighting</h1><p>Z-Fighting是在实际项目中困扰到场景布局的一大因素。从理论上来说，在相同深度值的地方有多个片元，这导致颜色缓冲区不知道该呈现哪个颜色比较合适，而当视角运动时就会出现糟糕的闪烁：<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220113143251.png" width="315/"><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220113143402.png" height="300/"></p><p>通过调整渲染队列并不能避免这种问题，就比如上图的半透明物体的渲染队列是在不透明物体之后的，但他们重叠时依然会发生z-fighting现象。</p><h2 id="解决方法">解决方法</h2><p>Shaderlab语法中的Offset命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Properties&#123;</span><br><span class="line">        _OffsetFactor(&quot;深度斜率&quot;,Float) = 0</span><br><span class="line">        _OffsetUnit(&quot;深度偏移&quot;,Float) = 0</span><br><span class="line">    &#125;</span><br><span class="line">SubShader&#123;</span><br><span class="line">    Pass&#123;</span><br><span class="line">        Tags&#123; &quot;LightMode&quot; = &quot;ForwardBase&quot; &#125;</span><br><span class="line">        Offset [_OffsetFactor],[_OffsetUnit]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="参数解读">参数解读</h3><ul><li><strong>_OffsetFactor</strong>: 缩放最大 Z 斜率，也称为<strong>深度斜率</strong>，以生成每个多边形的可变深度偏移。<br>不平行于近剪裁平面和远剪裁平面的多边形具有 Z 斜率。调整此值以避免此类多边形上出现视觉瑕疵。</li><li><strong>_OffsetUnit</strong>: 缩放最小可分辨深度缓冲区值，以产生恒定的<strong>深度偏移</strong>。最小可分辨深度缓冲区值（一个 <em>unit</em>）因设备而异。<br>负值意味着 GPU 将多边形绘制得更靠近摄像机。正值意味着 GPU 将多边形绘制得更远离摄像机。</li></ul><h3 id="效果">效果</h3><p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220113152924.png" width="328/"><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220113153033.png" width="315/"></p>]]></content>
      
      
      <categories>
          
          <category> 探索发现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> ShaderLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏中的命令模式</title>
      <link href="/2022/01/05/Chapter4-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/01/05/Chapter4-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是命令模式？">什么是命令模式？</h1><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA1f1ad2ea155c7c9fedb576cd331b66ae.png"><p>命令模式是《游戏编程模式》中介绍的第一种设计模式，也是作者“最喜欢的设计模式”。它到底有什么魅力呢？</p><p>命令模式是一种<strong>行为型设计模式</strong>(Behavioral Pattern)，和之前介绍的几种创建型设计模式有所不同。行为型模式是对在不同的对象之间划分责任和算法的抽象化，不仅仅关注类和对象的结构，而且重点关注它们之间的<strong>相互作用</strong>。</p><p>GoF对命令模式的定义如下：</p><blockquote><p>命令模式将一个<strong>请求</strong>（ request） 封装成一个<strong>对象</strong>，从而允许开发者使用不同的请求、队列或日志将<strong>客户端参数化</strong>，同时支持请求操作的<strong>撤销与恢复</strong>。”命令就是面向对象化的<strong>回调</strong>。</p></blockquote><p>《游戏编程模式》的作者认为这个定义不够明确，因此在书中给出了一个更简单明朗的定义：</p><blockquote><p>命令就是一个对象化（实例化）的方法调用（这通常涉及到委托/函数指针/闭包…）。</p></blockquote><p>在游戏开发中，命令模式由三个部分组成：<strong>调用器(invoker)</strong>，<strong>命令(command)<strong>和</strong>接收者(receiver)</strong>。</p><ul><li><p><strong>调用器</strong><br>也成为“发送者”，负责对请求进行初始化，其中必须包含一个成员变量来存储对于命令对象的引用。<br>发送者触发命令，而不向接收者直接发送请求。发送者并不负责创建命令对象，它通常会通过构造函数从客户端处获得预先生成的命令。</p></li><li><p><strong>命令</strong><br>抽象的命令接口，包含了execute函数。</p></li><li><p><strong>具体命令</strong><br>具体命令，实现了execute函数，代表命令的具体行为逻辑。</p></li></ul><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA0c1bce4e7593b0271a2d375ae356d85f.png" width="550"><h2 id="优点">优点</h2><ul><li>命令模式将<strong>请求与执行过程解耦</strong>，客户程序不需要知道一个命令具体会有什么行为。</li><li>可以这样<strong>创建宏</strong>(一系列命令)，像管道一样执行命令流</li><li>可以在<strong>不修改现有代码的情况下增加新的命令</strong></li><li>利用命令缓冲区（通常由队列维护）可以实现<strong>撤销、回放</strong>等操作</li></ul><h2 id="缺点">缺点</h2><ul><li><strong>每增加一个新的命令，会增加一个类</strong>，这样会增加维护成本</li><li>因为我们将命令与客户程序解耦了。当<strong>发生错误或者异常的时候，如何正确处理返回返回值会变得棘手</strong>。在多线程环境下这个问题会更麻烦。</li></ul><h1 id="应用场景：输入绑定">应用场景：输入绑定</h1><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA48232e4cc3814a32a0db7d8767bd362a.png"><p>通常来说，一个游戏会允许玩家自定义操作按键，例如有的玩家习惯用方向键控制角色移动，有的则习惯用wasd。上图展示了空洞骑士中的默认键位配置，玩家可以自行更改其中的任意一项。对现代版本的Unity来说，我们可以用新输入系统为每个操作（也就是命令，例如向上、跳跃等）绑定对应的按键，还可以通过代码更改绑定按键的值，实现自定义配置的功能。但在新输入系统发布之前，如何允许用户自行配置输入与操作的绑定或许是一个很头疼的功能。对初学者来说，可能会倾向于直接采用硬编码的方式ban掉这个功能：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InputManager</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> GameObject player;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HandleInput</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Input.GetKeyDown(KeyCode.W))&#123;</span><br><span class="line">      Up(player);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Input.GetKeyDown(KeyCode.A))&#123;</span><br><span class="line">      Left(player);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Input.GetKeyDown(KeyCode.S))&#123;</span><br><span class="line">      Down(player);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Input.GetKeyDown(KeyCode.D))&#123;</span><br><span class="line">      Right(player);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 具体逻辑</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Up</span>(<span class="params">GameObject player</span>)</span>&#123;</span><br><span class="line">    player.transform.position = player.transform.position + <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但如果我们将上下左右的命令封装成对象呢？</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命令接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICommand</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">execute</span>(<span class="params">GameObject o</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体命令</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UpCommand</span> : <span class="title">ICommand</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">execute</span>(<span class="params">GameObject o</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 具体逻辑</span></span><br><span class="line">    o.transform.position = o.transform.position + <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发送者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InputManager</span>&#123;</span><br><span class="line">  <span class="comment">// 存储对于命令对象的引用</span></span><br><span class="line">  ICommand w;</span><br><span class="line">  ICommand a;</span><br><span class="line">  ICommand s;</span><br><span class="line">  ICommand d;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ICommand <span class="title">HandleInput</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Input.GetKeyDown(KeyCode.W)) <span class="keyword">return</span> w;</span><br><span class="line">    <span class="keyword">if</span>(Input.GetKeyDown(KeyCode.A)) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">if</span>(Input.GetKeyDown(KeyCode.S)) <span class="keyword">return</span> s;</span><br><span class="line">    <span class="keyword">if</span>(Input.GetKeyDown(KeyCode.D)) <span class="keyword">return</span> d;</span><br><span class="line">    <span class="comment">// 如果什么输入也没有，返回空</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接收者</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GameCycle</span>()</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> GameObject player;</span><br><span class="line">  ICommand command;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span>&#123;</span><br><span class="line">    command = InputManager.HandleInput();</span><br><span class="line">    <span class="keyword">if</span>(command)&#123;</span><br><span class="line">      command.execute(player);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是命令模式的一个实例。在用户自定义绑定的时候，更改按键（和更改前按键）对应的命令即可。发送者返回了命令给接收者（在这里是游戏循环），这是“命令即具体化”的体现。</p><h2 id="如何实现撤销？">如何实现撤销？</h2><p>前文中提到了很多关于“撤销”和“回放”的内容，这个需求在游戏中很常见，例如不小心点错了等等，用户习惯用ctrl+z来撤销做错的这一步（或多步）。上文的代码似乎并没有实现重做功能，该怎么做呢？其实原理也很简单，在每个具体命令下实现Undo方法定义如何重做即可：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命令接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICommand</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">execute</span>(<span class="params">GameObject o</span>)</span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">undo</span>(<span class="params">GameObject o</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体命令</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UpCommand</span> : <span class="title">ICommand</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">execute</span>(<span class="params">GameObject o</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 具体逻辑</span></span><br><span class="line">    o.transform.position = o.transform.position + <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">undo</span>(<span class="params">GameObject o</span>)</span>&#123;</span><br><span class="line">    o.transform.position = o.transform.position - <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而需要注意的是，有些命令并不“基于上一步”，而是直接修改了状态，例如<strong>传送</strong>。这类型命令的重做就需要变量来“记住”原先的位置。总之，undo逆转了命令。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传送命令</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TpCommand</span> : <span class="title">ICommand</span>&#123;</span><br><span class="line">  Vector3 prePos;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">execute</span>(<span class="params">GameObject o, <span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 具体逻辑</span></span><br><span class="line">    prePos = o.transform.position;</span><br><span class="line">    o.transform.position = <span class="keyword">new</span> Vector3(x, y, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">undo</span>(<span class="params">GameObject o</span>)</span>&#123;</span><br><span class="line">    o.transform.position = prePos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多次撤销">多次撤销</h3><p>undo方法虽然实现了撤销的操作，但只执行了最近命令一次，如果想撤销刚才玩家执行的一系列命令该怎么办呢？我们可以维护一个<strong>队列</strong>和指向当前命令的指针来记录所有命令。</p><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA88b10f5af49b19b67ada603d5cb76836.png"><p>当在当前命令指针处执行了新的命令，当前指针的右侧将变成新的命令，同时回收掉原本后续的命令（相当于覆盖掉了）。有了这个队列，我们也可以轻易的实现“回放”功能，只需要从旧到新依次执行命令即可。在网络同步中，帧同步也是利用了类似的思想，逐帧地存储各个客户端发送的指令（也就是命令），因此适合战场回放一类的功能。</p><h1 id="参考资料">参考资料</h1><p>[美] Robert Nystrom 尼斯卓姆. 游戏编程模式 (游戏设计与开发). 人民邮电出版社.<br><a href="https://unity.com/cn/how-to/use-command-pattern-flexible-and-extensible-game-systems">https://unity.com/cn/how-to/use-command-pattern-flexible-and-extensible-game-systems</a><br><a href="https://design-patterns.readthedocs.io/zh-cn/latest/behavioral_patterns/command.html">https://design-patterns.readthedocs.io/zh-cn/latest/behavioral_patterns/command.html</a><br><a href="https://refactoringguru.cn/design-patterns/command">https://refactoringguru.cn/design-patterns/command</a></p><p>才疏学浅难免有所疏漏，欢迎大家在评论区和我交流！</p><img src="https://i.pinimg.com/originals/91/90/9f/91909fe563ff1329dfecd73ffeef7622.gif">]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏编程 </tag>
            
            <tag> 经验分享 </tag>
            
            <tag> Unity </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 命令模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏中的原型模式</title>
      <link href="/2022/01/04/Chapter3-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/01/04/Chapter3-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是原型模式？">什么是原型模式？</h1><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA23898264f9d9bc18c0f92106754ae88f.png"><p>原型模式也是一种创建型设计模式，是一种通过<strong>克隆</strong>（clone）/复制的方式降低实例化开销的设计模式。通常来说，我们会克隆一个原型并稍作修改，得到一个新的实例，而不是新建实例。被复制的实例就是我们所称的“<strong>原型</strong>（prototype）”，这个原型是可定制的。原型模式多用于创建复杂的或者耗时的实例，因为这种情况下，复制一个已经存在的实例使程序运行更高效；或者创建值相等，只是命名不一样的同类数据。</p><p>让我们回忆一下工厂模式。工厂模式需要为产品创建产品基类、具体产品类、工厂基类和具体工厂类。当产品种类繁多（例如100种不同类型的敌人）时，太多的类将使系统变得异常复杂。</p><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VAa6962314feea668ebb715aa475695183.png" width="400"><p>而在原型模式中，如果你有一个远程敌人，则你可以通过这个远程敌人制作出更多的远程敌人。如果你有一个近战敌人，那你就能制作出其他近战敌人。任何类型的敌人都能被看作是一个<strong>原型</strong>，用这个原型就可以复制出更多不同版本的敌人。我们不再需要复杂的抽象工厂和具体工厂类，这让类的总数减少了一半。</p><p>不过，假如需要动态添加新类型，必须为每种类型准备一个原型对象。工厂模式更通用，而原型模式在特定场景（创建大量初始状态相同的对象）中提升性能。</p><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VAb44635c2f82477fdc3a2d824eda1e653.png" width="400"><p>在原型模式中，存在以下三种角色：</p><ul><li><strong>产品接口</strong><br>提供了clone方法</li><li><strong>具体产品类</strong><br>具体的产品，提供了clone方法的具体实现。该实现会返回一个与自身类型和状态相同的对象</li><li><strong>生成器</strong><br>产品的包装，我们可以根据产品的种类实例化不同的生成器，它可以充当<strong>中心化原型注册表</strong>（用于存储常用原型）的角色</li></ul><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA5e7d28fd1cb12a96ec951037c517ec9d.png"><ul><li><p><strong>优点</strong></p><ul><li>代码相对来说更加简洁。</li><li>可以以更低的成本创建新实例。</li></ul></li><li><p><strong>缺点</strong></p><ul><li>每个继承了产品类/接口的具体产品类都需要实现新的克隆机制。当克隆中存在循环时，这一切将会变得充满挑战。</li><li>每个产品都需要一个类，还是比较复杂的。采用<strong>组件模式</strong>或<strong>类型对象模式</strong>进行产品建模或许是一个更好的选择。</li></ul></li></ul><h2 id="代码实现">代码实现</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//怪物基类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Monster</span></span><br><span class="line">｛</span><br><span class="line">    <span class="title">protected</span> <span class="title">int</span> <span class="title">health</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">int</span> speed;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params"><span class="built_in">int</span> _health, <span class="built_in">int</span> _speed</span>)</span></span><br><span class="line"><span class="function">    ｛</span></span><br><span class="line"><span class="function">        health</span> = _health;</span><br><span class="line">        speed = _speed;</span><br><span class="line">    ｝</span><br><span class="line">｝</span><br><span class="line"></span><br><span class="line"><span class="comment">//怪物对象子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Ghost</span> : <span class="title">Monster</span></span><br><span class="line">｛</span><br><span class="line">    <span class="title">private</span> <span class="title">int</span> <span class="title">attack</span>;</span><br><span class="line">｝</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者基类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Spawner</span></span><br><span class="line">｛</span><br><span class="line">    <span class="comment">//可二选一</span></span><br><span class="line">    <span class="title">public</span> <span class="title">abstract</span> <span class="title">Monster</span> <span class="title">SpawnMonster</span>();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Monster <span class="title">SpawnMonster</span>(<span class="params"><span class="built_in">int</span> _health, <span class="built_in">int</span> _speed</span>)</span>;</span><br><span class="line">｝</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者类，有一个怪物类作为模板，即原型，用于生成更多的同类怪物</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SpawnerFor</span>&lt;<span class="title">T</span>&gt; : <span class="title">Spawner</span> <span class="keyword">where</span> <span class="title">T</span> : <span class="title">Monster</span>, <span class="title">new</span>()</span><br><span class="line">｛</span><br><span class="line">    <span class="title">public</span> <span class="title">override</span> <span class="title">Monster</span> <span class="title">SpawnMonster</span>()</span><br><span class="line">    ｛</span><br><span class="line">        <span class="title">return</span> <span class="title">new</span> <span class="title">T</span>();</span><br><span class="line">    ｝</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Monster <span class="title">SpawnMonster</span>(<span class="params"><span class="built_in">int</span> _health, <span class="built_in">int</span> _speed</span>)</span></span><br><span class="line"><span class="function">    ｛</span></span><br><span class="line"><span class="function">        T t</span> = <span class="keyword">new</span> T();</span><br><span class="line">        t.Init(_health, _speed);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    ｝</span><br><span class="line">｝</span><br><span class="line"><span class="comment">// 应用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PrototypeDemo</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">｛</span><br><span class="line">    <span class="title">void</span> <span class="title">Start</span>()</span><br><span class="line">    ｛</span><br><span class="line">        <span class="comment">//创建某类怪物的生产者</span></span><br><span class="line">        <span class="title">Spawner</span> <span class="title">ghostSpawner</span> = <span class="keyword">new</span> SpawnerFor&lt;Ghost&gt;();</span><br><span class="line">        <span class="comment">//生产怪物</span></span><br><span class="line">        Ghost newGhost = ghostSpawner.SpawnMonster() <span class="keyword">as</span> Ghost;</span><br><span class="line">        Ghost normalGhost = ghostSpawner.SpawnMonster(<span class="number">10</span>, <span class="number">5</span>) <span class="keyword">as</span> Ghost;</span><br><span class="line">        Ghost fastGhost = ghostSpawner.SpawnMonster(<span class="number">10</span>, <span class="number">10</span>) <span class="keyword">as</span> Ghost;</span><br><span class="line">    ｝</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><h2 id="关联产品的原型模式">关联产品的原型模式</h2><p>有时我们可能会为某一具体产品创建一系列变体，例如以撒的关底boss萌死戳存在“炸弹”、“暴怒”、“精神错乱”等变种：</p><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VAb2532fe5bd30cc75349ce5b5212c3a52.png" width="400"><p>实现这种生成器该怎么做？我们可能很容易会想到将萌死戳的产品类抽象成接口，再实现具体类型的萌死戳产品类。在实际开发中，敌人的配置信息会被存放在配置文件（例如JSON）中，比如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;monstro&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;health&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;time_between_skill&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;skills&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;jump&quot;</span><span class="punctuation">,</span> <span class="string">&quot;vomit&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;monstro_black&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;health&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;time_between_skill&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;skills&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;jump&quot;</span><span class="punctuation">,</span> <span class="string">&quot;vomit_with_bomb&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;death_effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bomb&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;monstro_red&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;health&quot;</span><span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;time_between_skill&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;skills&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;jump&quot;</span><span class="punctuation">,</span> <span class="string">&quot;vomit&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;death_effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blood&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>采用配置文件阅读起来非常直观，但很明显其中包含了一些重复数据，这会导致包体过大，在注重优化的当下这是开发者需要避免的。我们可以给对象声明一个“prototype”属性指定原型（例如初始版本的monstro），如果访问的任何属性不在此对象内部，那么会去它的原型对象里面查找。经过改写，上述配置文件可以简化为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;monstro&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;health&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;time_between_skill&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;skills&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;jump&quot;</span><span class="punctuation">,</span> <span class="string">&quot;vomit&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;monstro_black&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;prototype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;monstro&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;skills&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;jump&quot;</span><span class="punctuation">,</span> <span class="string">&quot;vomit_with_bomb&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;death_effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bomb&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;monstro_red&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;prototype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;monstro&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;health&quot;</span><span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;death_effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blood&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="深拷贝与浅拷贝">深拷贝与浅拷贝</h2><ul><li><strong>深拷贝</strong>（deep copy）<br>在复制引用类型成员变量时，为引用类型的数据成员创建一个独立的内存空间来复制真实的内容。如果一个对象改变了这个地址，不会影响到另一个对象。</li></ul><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220102164734.png" width="500/"><ul><li><strong>浅拷贝</strong>（shallow copy）<br>浅拷贝是对象的按位拷贝，它用原始对象属性值的精确拷贝创建一个新对象。如果属性是基本类型，则复制基本类型的值;如果属性是内存地址(引用类型)，那么副本就是内存地址。<br><strong>因此，如果一个对象改变了这个地址，就会影响到另一个对象</strong>。也就是说，默认的复制构造函数只是对象的浅拷贝(逐个复制成员)，也就是说，只复制对象空间，而不复制资源。</li></ul><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20220102164708.png" width="500/"><h3 id="应用场景"><strong>应用场景</strong></h3><ul><li>浅拷贝更快，消耗更低。如果对象只有字段的话很合适</li><li>深拷贝更慢，但是是完全独立的。如果对象有复杂引用的话很合适</li></ul><h1 id="参考资料">参考资料</h1><p>[美] Robert Nystrom 尼斯卓姆. 游戏编程模式 (游戏设计与开发). 人民邮电出版社.<br><a href="https://refactoringguru.cn/design-patterns/prototype">https://refactoringguru.cn/design-patterns/prototype</a><br><a href="https://gwb.tencent.com/community/detail/128274">https://gwb.tencent.com/community/detail/128274</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏编程 </tag>
            
            <tag> 经验分享 </tag>
            
            <tag> Unity </tag>
            
            <tag> 原型模式 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏中的工厂模式</title>
      <link href="/2022/01/03/Chapter2-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/01/03/Chapter2-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是工厂模式？">什么是工厂模式？</h1><blockquote><p>工厂模式（Factory pattern）是一种实现了“<strong>工厂</strong>”概念的面向对象设计模式，它处理在不指定对象具体类别的情况下创建对象的问题。工厂方法模式的实质是“<strong>定义一个创建对象的接口，但让实现这个接口的类别来决定实例化哪个类别。工厂方法让类别的实例化推迟到子类中进行。</strong>”</p></blockquote><p>由此可知，工厂模式定义一个创建对象的接口，但<strong>让子类决定实例化哪个类</strong>。工厂方法允许类将实例化延迟到子类，这节省了实例化的开销。在游戏开发中，工厂模式可以被用于创建某一类对象的诸多不同类型的“变体”，例如敌人这个大类分为远程敌人、近战敌人、辅助敌人等小类。</p><p>实例化一个具体的敌人是一个复杂的过程（需要指定类别、设置不同的不同初始数值），但又具有相似性，那么为什么不把这一过程抽象出来、交给一个专门的管理器呢？这就是工厂类的思想，创建过程都由工厂统一管理，当发生创建业务逻辑变化时，只需要修改工厂即可。</p><p>根据产品是 <u>具体产品</u> 还是 <u>具体工厂</u>，工厂模式可分为<strong>简单工厂模式</strong>和<strong>工厂方法模式</strong>；根据工厂的 <u>抽象程度</u> 可分为<strong>工厂方法模式</strong>和<strong>抽象工厂模式</strong>。但不论是哪种工厂模式，其中都有<strong>工厂</strong>和<strong>产品</strong>两个主要角色。</p><h1 id="简单工厂模式-simple-factory-pattern">简单工厂模式(Simple Factory Pattern)</h1><p>简单工厂模式又称为<strong>静态工厂方法</strong>(Static Factory Method)模式，包含如下角色：</p><ul><li><strong>工厂</strong><br>工厂负责实现创建所有实例的内部逻辑，根据条件（例如字符串）判断返回哪个具体产品</li><li><strong>抽象产品（接口）</strong><br>抽象产品是所创建的所有具体产品对象的父类，负责描述所有具体产品实例所共有的公共接口</li><li><strong>具体产品</strong><br>具体产品是<strong>创建目标</strong>，所有创建的对象都充当这个角色的某个具体类的实例。</li></ul><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA70ada692dc4dc6f83e9d4ff1c6c91fd3.png"><p>简单工厂模式的要点在于：只需要传入一个正确的参数就可以获取所需要的对象，无须知道其创建细节。由于工厂方法是静态方法，可通过类名直接调用，只需要传入一个简单的参数即可。在实际开发中，还可以在调用时将所传入的参数保存在XML等格式的<strong>配置文件</strong>中，修改参数时无须修改任何源代码。</p><blockquote><p>开闭原则：对于扩展是<strong>开放</strong>的，但是对于修改是<strong>封闭</strong>的。</p></blockquote><p>简单工厂模式最大的问题在于<strong>工厂类的职责相对过重</strong>，增加新的产品需要修改工厂类的判断逻辑，这一点与<strong>开闭原则</strong>是相违背的（不利于系统的扩展和维护）。而且一旦工厂类不能正常工作，整个系统都要受到影响。</p><p>适用于创建的对象较少的场景（避免业务逻辑过于复杂），如JDK中的 <code>java.text.DateFormat</code>。</p><h2 id="代码实现">代码实现</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Factory</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Factory</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Product <span class="title">CreateProduct</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 判断逻辑（必须）</span></span><br><span class="line">        <span class="keyword">if</span>(name.Equals(<span class="string">&quot;A&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductA();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(name.Equals(<span class="string">&quot;B&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductB();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 抽象产品</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Product</span>&#123;</span><br><span class="line">    <span class="comment">// 某些产品通用方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Describe</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体产品</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductA</span> : <span class="title">Product</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Describe</span>()</span>&#123;</span><br><span class="line">        console.WriteLine(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductB</span> : <span class="title">Product</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Describe</span>()</span>&#123;</span><br><span class="line">        console.WriteLine(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="工厂方法模式-factory-method-pattern">工厂方法模式(Factory Method Pattern)</h1><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VAc1a82a2c9034362cdcd18fdd95eaf057.png"><p>工厂方法模式又称为工厂模式（<u>狭义的</u> 工厂模式），也叫<strong>多态工厂</strong>(Polymorphic Factory)模式（因为使用到了多态性）。在工厂方法模式中，<strong>工厂父类</strong>负责定义创建产品对象的公共接口，而<strong>工厂子类</strong>则负责生成具体的产品对象，这样做的目的是<strong>将产品类的实例化操作延迟到工厂子类中完成</strong>，即通过工厂子类来确定究竟应该实例化哪一个具体产品类，减轻了简单工厂模式中工厂类的负担，将具体创建工作交给子类去做。工厂方法模式包含如下角色：</p><ul><li><strong>抽象产品</strong><br>抽象产品是所创建的所有具体产品对象的父类，负责描述所有具体产品实例所共有的公共接口</li><li><strong>具体产品</strong><br>具体产品是<strong>创建目标</strong>，所有创建的对象都充当这个角色的某个具体类的实例。</li><li><strong>抽象工厂</strong><br>返回产品对象的工厂方法。 该方法的返回对象类型必须与产品接口相匹配</li><li><strong>具体工厂</strong><br>重写基础工厂方法， 使其返回不同类型的产品。</li></ul><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VAd1392cf620f649ed685999c34a1f9a10.png"><p>工厂方法将创建产品的代码与实际使用产品的代码分离，从而能在不影响其他代码的情况下扩展产品创建部分代码。例如需要向应用中添加一种新产品，只需要开发新的具体工厂类，然后重写其工厂方法即可。工厂方法模式可以在不改变现有架构的情况下随意添加新的工厂和产品，便于扩展，符合开闭原则。</p><p>不过工厂方法模式需要引入许多新的子类（比如说一百种产品和一百种工厂），代码可能会因此变得更复杂。采用<strong>抽象工厂模式</strong>、<strong>原型模式</strong>或<strong>生成器模式</strong>或许会是一个更好的选择。</p><p>工厂方法模式适用于一个类不知道它所需要的对象的类；一个类通过其子类来指定创建哪个对象；将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定。</p><h2 id="代码实现">代码实现</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Factory</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title">CreateProduct</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FactoryA</span> : <span class="title">Factory</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Product <span class="title">CreateProduct</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FactoryB</span> : <span class="title">Factory</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Product <span class="title">CreateProduct</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象产品</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Product</span>&#123;</span><br><span class="line">    <span class="comment">// 某些产品通用方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Describe</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体产品</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductA</span> : <span class="title">Product</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Describe</span>()</span>&#123;</span><br><span class="line">        console.WriteLine(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductB</span> : <span class="title">Product</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Describe</span>()</span>&#123;</span><br><span class="line">        console.WriteLine(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="抽象工厂模式-abstract-factory-method">抽象工厂模式(Abstract Factory Method)</h1><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA4299c9fd6949f460b3da817b55f87022.png"><p>前面的工厂方法模式的使用场景可能是这样的：通过工厂创建好几种不同类型的敌人。那如果我们想创建好几种不同类型的玩家呢？再重新写一套玩家工厂方法吗？虽然这么做符合开闭原则，但却让系统变得更复杂了，能不能让创建这个操作更加精简呢？</p><p>当产品愈发复杂时，我们可以考虑用<strong>抽象工厂模式</strong>（又称为<strong>Kit模式</strong>）替代工厂方法模式。抽象工厂模式相当于在工厂模式的基础上再加了一层抽象，属于“<strong>工厂的工厂</strong>”。为了更清晰地理解抽象工厂模式，需要先引入两个概念：</p><ul><li><strong>产品等级结构</strong><br>产品等级结构即产品的<strong>继承结构</strong>，如一个抽象类是敌人，其子类有远程敌人、近战敌人、辅助敌人等等，则抽象敌人与具体敌人之间构成了一个产品等级结构，抽象敌人是父类，而具体敌人是其子类。</li><li><strong>产品族</strong><br>在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品，如远程工厂生产的远程敌人、远程玩家，远程敌人位于敌人这一产品等级结构中，远程玩家位于玩家这一产品等级结构中。</li></ul><p>当系统所提供的工厂所需生产的具体产品并不是一个简单的对象，而是多个位于不同产品等级结构中属于不同类型的具体产品时，需要使用抽象工厂模式。抽象工厂模式与工厂方法模式最大的区别在于：</p><blockquote><p><strong>工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构。一个工厂等级结构可以负责多个不同产品等级结构中的产品对象的创建。</strong></p></blockquote><p>当一个工厂等级结构可以创建出分属于不同产品等级结构的一个产品族中的所有对象时，抽象工厂模式比工厂方法模式更为简单、有效率。抽象工厂模式同样包含如下角色：</p><ul><li>抽象工厂</li><li>具体工厂</li><li>抽象产品</li><li>具体产品</li></ul><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA89cc347d979455f85857bccc3b3299a4.png"><p>抽象工厂模式同样隔离了具体类的生成，使得客户并不需要知道什么被创建。所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为。另外，应用抽象工厂模式可以实现<strong>高内聚低耦合</strong>的设计目的，因此抽象工厂模式得到了广泛的应用。</p><p>当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用<strong>同一个产品族</strong>中的对象（例如：友好实体，其中包括了玩家也包括一些生物）。这对一些需要根据当前环境来决定其行为的软件系统来说，是一种非常实用的设计模式。</p><p>增加新的具体工厂和产品族很方便，无须修改已有系统，同样符合<strong>开闭原则</strong>。</p><p>不过，当只有一个产品族时，<strong>抽象工厂模式会退化成工厂方法模式</strong>。</p><h1 id="简单工厂模式-工厂模式和抽象工厂模式的区别">简单工厂模式、工厂模式和抽象工厂模式的区别</h1><ol><li>简单工厂根据动物工厂，可以直接得到对应的动物</li></ol><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA2119f4f68caa6fbeca73cfd85016db32.png"><ol start="2"><li>工厂模式在工厂实例化之后，需要调用具体的动物工厂的制造方法得到具体的动物</li></ol><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VAa57e8a9221375b195b978a0edd976908.png"><ol start="3"><li>抽象工厂模式更多一层抽象，一个工厂对应多种动物</li></ol><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA6ada05c942f0d6ecf3479293ee92ae4a.png"><p>并不能盲目选择哪种工厂模式，例如抽象工厂模式更多的是使用在<strong>一系列相互关联的基础产品，而这些产品共同组成一个成品</strong>（产品族）上的。如果各个产品之间更类似于并列关系而不是关联关系的话，工厂方法模式更合适一些。设计模式本身就有其适用的场景，并不是滥用的，</p><h1 id="参考资料">参考资料</h1><p><a href="https://unity.com/cn/how-to/how-use-factory-pattern-object-creation-runtime">https://unity.com/cn/how-to/how-use-factory-pattern-object-creation-runtime</a><br><a href="https://design-patterns.readthedocs.io/zh-cn/latest/creational_patterns/simple_factory.html">https://design-patterns.readthedocs.io/zh-cn/latest/creational_patterns/simple_factory.html</a><br><a href="https://design-patterns.readthedocs.io/zh-cn/latest/creational_patterns/factory_method.html">https://design-patterns.readthedocs.io/zh-cn/latest/creational_patterns/factory_method.html</a><br><a href="https://design-patterns.readthedocs.io/zh-cn/latest/creational_patterns/abstract_factory.html">https://design-patterns.readthedocs.io/zh-cn/latest/creational_patterns/abstract_factory.html</a><br><a href="https://refactoringguru.cn/design-patterns/factory-method">https://refactoringguru.cn/design-patterns/factory-method</a><br><a href="https://refactoringguru.cn/design-patterns/abstract-factory">https://refactoringguru.cn/design-patterns/abstract-factory</a><br><a href="https://juejin.cn/post/7032133433031835678">https://juejin.cn/post/7032133433031835678</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏编程 </tag>
            
            <tag> 经验分享 </tag>
            
            <tag> Unity </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 简单工厂模式 </tag>
            
            <tag> 抽象工厂模式 </tag>
            
            <tag> 工厂方法模式 </tag>
            
            <tag> 工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏中的单例模式</title>
      <link href="/2022/01/02/Chapter1-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/01/02/Chapter1-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是单例模式？">什么是单例模式？</h1><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA94bb26a6c980a9f4e938ce16ee290a6a.png"><p>这学期开始教设计模式这门课程，其中第一节课所介绍的就是所有设计模式中最简单也最好理解的<strong>单例模式</strong>。单例模式是几大设计模式中最常被使用的模式之一，在游戏编程的实战中也有很多用途，比如说维护一个<strong>全局唯一</strong>的UI管理器、<strong>全局唯一</strong>的特效/音效控制器等等。该模式适合针对“有唯一需求，不希望存在多个”的系统。也就是说，<strong>单例模式的实例同时只能存在 0 个或者 1 个</strong>，实例化的过程分为懒实例（懒汉式）、饥渴实例（饥饿式）等。</p><blockquote><p>《游戏编程模式》对于单例模式的定义为：“确保一个类只有一个实例， 并为其提供一个全局访问入口。”</p></blockquote><h2 id="类图">类图</h2><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/homework1_1.png"><h2 id="代码实现">代码实现</h2><h3 id="final-懒实例-线程锁实现法">final + 懒实例 + 线程锁实现法</h3><p><strong>final</strong> 关键字（等同于 C# 中的 <strong>sealed</strong>）的主要目的是防止单例类被<strong>继承</strong>。如果去掉 final，内部类可能会继承单例类，调用内部类的时候会造成<strong>多实例化</strong>的问题。然而在一些特定的情况下，你<strong>可以继承单例</strong>，这是一个强大但是经常被忽视的特性。</p><blockquote><p>假设我们需要让文件封装类跨平台，为了实现这一点，我们可以将单例实现为一个抽象接口，并由它的子类提供各个平台上的实现。</p></blockquote><p>什么是<strong>懒实例/懒汉式</strong>？简单地说，懒实例指的是<strong>延迟初始化</strong>，是一种延迟对象创建过程的技术。懒实例允许只在需要时才创建对象（而不是在程序开始时就创建完成），当开发者需要处理开销很大的流程来创建对象时，这种方法很有帮助。</p><p>至于为什么需要加<strong>线程锁</strong>（thread lock）呢？原因显而易见，因为我们的程序可能工作在多线程（multi threaded）环境下，<strong>线程安全</strong>至关重要。而如果两个线程同时实例化单例类的实例，可能造成线程冲突（thread conflict），从而得到两个单例类的实例，这显然是不符合单例期望的。所以在多线程环境下，当有两个或以上个线程访问程序时，给方法加上线程锁是必要的。这样的结果是：同一时间只能有一个线程访问代码，其余线程需要等待，避免的冲突的形成。</p><p>虽然 Unity 只有一个游戏主线程，但开发者可以通过 Thread 类自定义新开线程以利用 CPU 在多个核心上同时处理多个线程的能力。这些新线程并行运行，通常在完成后将其结果与主线程同步，因此使用单例时依旧需要注意线程安全的风险。</p><blockquote><p><strong>题外话：线程池</strong><br>为什么使用线程池？线程池主要目的在于<strong>线程资源复用</strong>和<strong>自动管理</strong>。当面对一个任务时开发者可以采用开一个线程的方式来加速运算，然而当任务数量不断增加，自己创建线程的方式不再合理，主要原因有下：</p><ul><li>创建和关闭新线程是需要消耗CPU时间的，因为操作系统需要分配给新开的线程地址空间、栈空间、寄存器等，在线程结束的时候，操作系统又将这些东西回收。线程池相比于线程来说，不需要频繁的创建和销毁线程，线程一旦创建之后，默认情况下就会一直保持在线程池中，等到有任务来了，再用这些已有的线程来执行任务</li><li>用户可能创建了大量的线程，而这些线程不是每时每刻都在工作（可能处于休眠状态等待事件发生），需要定期唤醒才能轮询更改或更新状态信息。线程池是复用已有线程来执行任务的，而线程是在有任务时才新建的，所以相比于线程来说，线程池能够更快的响应任务和执行任务。此外线程池可以创建固定的线程数，从而避免了无限创建线程的问题。</li></ul></blockquote><p><strong>优点</strong></p><ul><li>通过双重检查和锁保证线程安全</li><li>加载时快速</li><li>只有在实例尚未初始化时才会进入锁定代码块，降低锁的开销。</li></ul><p><strong>缺点</strong></p><ul><li>代码冗长</li><li>程序执行过程中需要进行实例化，存在开销问题</li></ul><p>在 C# 中，可以采用双重锁来实现线程安全：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SingletonPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">UIController</span> &#123;</span><br><span class="line">        <span class="comment">// 唯一的静态实例</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> UIController _uiController;</span><br><span class="line">        <span class="comment">// 锁</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> _lock = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">UIController</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 懒实例，在需要（调用获取方法）的时候再判断是否需要实例化，对处理实例化开销比较大的环境下很有利</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UIController <span class="title">GetUIController</span>()</span> &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123;</span><br><span class="line">                <span class="comment">// 第一次检查，避免不必要的锁开销</span></span><br><span class="line">                <span class="keyword">if</span> (_uiController == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">lock</span>(_lock) &#123;</span><br><span class="line">                        <span class="comment">// 第二次检查，确保线程安全</span></span><br><span class="line">                        <span class="keyword">if</span>(_uiController == <span class="literal">null</span>) &#123;</span><br><span class="line">                            _uiController = <span class="keyword">new</span> UIController();</span><br><span class="line">                            Console.WriteLine(<span class="string">&quot;A new UI Controller initialized.&quot;</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            Console.WriteLine(<span class="string">&quot;Already has a UI controller&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> _uiController;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">SingletonPattern</span> &#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;===单例模式===&quot;</span>);</span><br><span class="line">            UIController ui1 = UIController.GetUIController();</span><br><span class="line">            UIController ui2 = UIController.GetUIController();</span><br><span class="line">            <span class="comment">// 二者实际上是等价的，全局只存在一个单例的实例</span></span><br><span class="line">            <span class="keyword">if</span> (ui1 == ui2)</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;These 2 UI Controller re the same.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>输出:</strong><br>===单例模式===<br>A new UI Controller initialized.<br>Already has a UI controller<br>These 2 UI Controller re the same.</p></blockquote><p>在现代 C# 开发中，还可以通过 Lazy&lt;T&gt; 的方式实现懒汉式单例。Lazy&lt;T&gt; 专门用于实现延迟初始化，并且内置了线程安全机制，相比于双重锁的写法更为简洁优雅，以下是例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">SingletonPattern</span> &#123;</span><br><span class="line">    <span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIController</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 Lazy&lt;T&gt; 实现线程安全的延迟加载</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Lazy&lt;UIController&gt; _uiController = <span class="keyword">new</span> Lazy&lt;UIController&gt;(() =&gt; <span class="keyword">new</span> UIController());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 私有构造函数，防止外部实例化</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">UIController</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> UIController GetUIController &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Get a UI Controller.&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> _uiController.Value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="饥渴实现法-eager-initialization">饥渴实现法（Eager Initialization）</h3><p>和懒实例化相对，饥渴实例（饿汉式）在程序加载之初就完成了实例化，之后在需要使用相关方法时直接返回实例。</p><p><strong>优点</strong></p><ul><li>简单明了的代码</li><li>线程安全，虽然不用线程锁，但是在开始的时候就实例化完了</li><li>静态字段只初始化一次，程序执行过程中开销小</li></ul><p><strong>缺点</strong></p><ul><li>加载时间漫长，因为需要实例化所有单例</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SingletonPattern</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MusicMgr</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 静态只读字段，在首次访问时自动初始化</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> MusicMgr _musicMgr = <span class="keyword">new</span> MusicMgr();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 私有构造函数，防止外部实例化</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">MusicMgr</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;A music manager has been initialized.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MusicMgr <span class="title">GetMusicMgr</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Game has a music controller now.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> _musicMgr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bill-pugh法">Bill Pugh法</h3><p>Bill Pugh 法是一种优雅的实现单例模式的方式，特别适用于 Java。这种方法通过使用一个<strong>静态内部类</strong> Helper 来延迟加载单例实例，静态内部类在调用它们的getInstance() 方法之前不会加载到内存中，只有当有人调用 getCaptain() 方法时，才需要考虑Helper类。同时 Bill Pugh 法避免锁的性能开销，并保证线程安全。<br>C# 没有静态内部类的概念，可以使用嵌套类模拟相同的行为：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 私有构造函数，防止外部实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态嵌套类，用于延迟初始化单例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title">SingletonHelper</span> &#123;</span><br><span class="line">        <span class="comment">// 单例实例，使用只读字段保证线程安全</span></span><br><span class="line">        <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Singleton Instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共访问方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton Instance &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> SingletonHelper.Instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SingletonHelper 类不会在 Singleton 类加载时初始化，而是在 Instance 属性被调用时才加载。这一行为依赖于 .NET 的类型加载机制，即只有在使用静态成员时，静态类或嵌套类才会初始化。</p><p>C# 的静态构造函数由 CLR（公共语言运行时）负责初始化，并且保证线程安全。internal static readonly 字段的初始化是线程安全的，CLR 确保了不会出现竞争条件。</p><p><strong>优点</strong></p><ul><li>线程安全，无须显式加锁，减少了代码复杂度。</li><li>仅在需要时才实例化单例对象。</li><li>由于没有锁和检查的开销，性能优于双重锁。</li><li>简单明了的代码</li></ul><h1 id="注意">注意！</h1><p>虽然单例模式看上去简单易用也很好用，但它实在太容易被滥用了。单例作为一个全局变量，在代码中可能导致一下问题：</p><ol><li><p>它们令代码晦涩难懂。不小心在错误的地方错误地修改全局变量面临着高额的调试工作量，因为需要检查每一个引用。</p></li><li><p>全局变量加剧了耦合。</p></li><li><p>不利于并发，因为线程不安全的单例可能造成死锁。</p></li></ol><p>大部分单例都以“Manager”、“System”、“Engine”一类的名字命名，它们有时也被称为<strong>保姆类</strong>。为了尽可能避免单例调用分布在代码库的各个角落，我们可以试着只在基类中使用单例。我们也可以考虑将所有单例对象包装到一个现有的类里，只通过这个类来访问各个系统（虽然依然会散布在各处，但查找起来只需要查这个类）。</p><h1 id="参考资料">参考资料</h1><p>[美] Robert Nystrom 尼斯卓姆. 游戏编程模式 (游戏设计与开发). 人民邮电出版社.<br><a href="https://blog.csdn.net/weixin_43405845/article/details/105022859">https://blog.csdn.net/weixin_43405845/article/details/105022859</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏编程 </tag>
            
            <tag> 经验分享 </tag>
            
            <tag> Unity </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oculus Quest电脑端有线连接教程</title>
      <link href="/2021/10/25/Oculus%20Quest%E7%94%B5%E8%84%91%E7%AB%AF%E6%9C%89%E7%BA%BF%E8%BF%9E%E6%8E%A5%E6%95%99%E7%A8%8B/"/>
      <url>/2021/10/25/Oculus%20Quest%E7%94%B5%E8%84%91%E7%AB%AF%E6%9C%89%E7%BA%BF%E8%BF%9E%E6%8E%A5%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>由于无线连接需要代理路由或代理wifi，所以走有线</strong><br><strong>本篇教程使用github作为图床，使用代理来加载图片</strong><br><strong>本教程的前提是你的设备已经激活并且连上手机。激活需要代理热点，比如刷了老毛子固件的路由器或者坐船去台湾，也可以通过oculus helper、SSTap等来实现</strong></p><h1 id="基础步骤">基础步骤</h1><h2 id="安装oculus电脑客户端">安装Oculus电脑客户端</h2><p>从官网上下载Oculus Hub，点击oculus setup就可以直接安装，如下（如果你是开发者，可以安装Oculus Developer Hub）：<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211025214452.png"><br>安装建议使用科学上网，一个好的代理可以在半小时内下完5G多的资源，否则要五个小时。安装好之后桌面上会出现客户端图标：<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211025214715.png"><br>这时候使用之前注册的开发者账户登录会出错，原因是国内墙的dns污染导致无法连接oculus的服务器。解决方式是打开电脑文件目录：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="name">C</span>:\WINDOWS\System32\drivers\etc</span><br></pre></td></tr></table></figure><p>里面有一个hosts文件，以记事本打开它，在末尾加上：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">157.240.217.51</span> graph.oculus.com</span><br><span class="line"><span class="number">157.240.195.51</span> graph.oculus.com</span><br><span class="line"><span class="number">157.240.199.54</span> graph.oculus.com</span><br></pre></td></tr></table></figure><p>保存之后，打开cmd输入命令刷新dns：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig/flushdns</span><br></pre></td></tr></table></figure><p>完成之后重启客户端，这时候就可以登陆了<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/U7%25IF51%7ECX75%7BD%7BE%25E8OQN7.png"></p><h2 id="连接quest设备">连接Quest设备</h2><p>首先，给手柄装上电池，然后拿出Quest自带的usb-C连接线。长得比较奇怪的一边连接设备，另一边连接电脑的usb3.0接口或者usb-C接口<br>完成之后，打开Oculus客户端，在设备中添加头部设备：<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211025215441.png"><br>选中Quest之后，选择有线，之后等待配对成功。<br>初次连接需要检查连接：<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211025215641.png"><br>完成之后，连接就成功了。</p><h2 id="连接steam-vr游戏">连接steam VR游戏</h2><p>嗨，我们没有在玩游戏<br>不过Quest连接SteamVR非常方便。当电脑与Quest成功配对之后，Quest的头戴式设备内会提示是否启用Oculus Link的选项，此时确定就可以将设备与电脑连接</p><p>连接成功之后，在电脑上打开steam的vr游戏就可以了</p>]]></content>
      
      
      <categories>
          
          <category> VR开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oculus </tag>
            
            <tag> Quest </tag>
            
            <tag> VR </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LD49复盘：游戏中的观察者模式</title>
      <link href="/2021/10/07/LD49%E5%A4%8D%E7%9B%98%EF%BC%9A%E6%B8%B8%E6%88%8F%E4%B8%AD%E7%9A%84%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/10/07/LD49%E5%A4%8D%E7%9B%98%EF%BC%9A%E6%B8%B8%E6%88%8F%E4%B8%AD%E7%9A%84%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Ludum Dare 49圆满结束了，我们的《绝地天通(Babel Blocks)》最终取得了1413名，放在三千多个参赛作品中也还是不错的！欢迎大家试玩我们的游戏：<a href="https://guinytime.itch.io/babel-blocks">https://guinytime.itch.io/babel-blocks</a></p><p>在此我想对我在本次开发中负责的模块做一些复盘。UI部分已经是老生常谈了，我想聊聊我在开发中用到的<strong>观察者模式</strong>。</p><p>什么是观察者模式？观察者模式是一种<strong>行为型设计模式</strong>，定义了一种<strong>一对多的依赖关系</strong>，即当一个对象（称为<strong>发布者</strong>或<strong>被观察者</strong>）的状态发生变化时，所有依赖于它的对象（称为<strong>订阅者</strong>或<strong>观察者</strong>）都会自动收到通知并更新。</p><p>在游戏开发中，这种模式通常用于处理事件广播、状态更新等场景。例如，当玩家生命值减少时，游戏中的血条、UI、音效等观察者都会随之更新。</p><p><img src="https://miro.medium.com/v2/resize:fit:1018/1*8JJK77lDQS4nkjp-RHpuMA.jpeg" alt></p><p><strong>观察者模式的关键结构</strong>由以下三部分组成：</p><ol><li><strong>发布者（Subject）：</strong><ul><li>管理观察者列表，提供添加、移除订阅者的方法。</li><li>当状态发生变化时，通知所有订阅者。</li></ul></li><li><strong>订阅者（Observer）：</strong><ul><li>定义一个接口，所有观察者必须实现该接口中的更新方法。</li><li>当主题通知时，观察者根据需要更新自己的状态。</li></ul></li><li><strong>通知机制：</strong><ul><li>发布者调用观察者的更新方法，传递状态变化。</li></ul></li></ol><h1 id="从c-的event关键字说起">从C#的event关键字说起</h1><p>前文中的 UML 图展现了观察者模式最基本的结构。在实际应用中，我们通常通过多播委托结合哈希表来实现观察者模式。委托（delegate）类似于C++中的函数指针，是类型化了的函数指针（一种可以存放特定参数/返回值类型方法的容器）；<strong>多播委托</strong>（multicast delegate）则代表一个委托存放了多个函数。通过委托可以实现事件和回调的功能。</p><blockquote><p><strong>题外话：多播委托</strong><br>多播委托的底层是一个<strong>链表</strong>，我们称之为“<strong>委托链</strong>”，因此多播委托也可以被称为<strong>链式委托</strong>。当两个及以上的委托被链接到一个委托链时，调用头部的委托将导致该链上的所有委托方法都被执行。通过 System.MulticastDelegate 中的 GetInvocationList() 方法，可以以数组的形式获得整个链式委托中的所有委托。<br>如果在某个委托方法中修改了委托链（例如+=了新的方法），新委托链是不会被执行的，因为本次执行的委托引用指向的是旧的链。委托是一种引用类型（类似于字符串一般具有不变的特性），在增加或移除方法时实际上创建了一个新的委托实例并把它赋给当前的委托变量。在多播委托执行时，C# 会先将当前委托链拷贝出来，然后按这个拷贝的顺序依次调用。这保证了即使在回调中修改了委托链，拷贝的链条也不会被改变。<br>需要注意的是，对于有返回值的多播委托，如果没有手动调用委托链上的每个方法，只能得到委托链上最后被调用的方法的返回值。</p></blockquote><p>C# 将观察者模式集成到了 event上 。event 是对于<strong>委托</strong>（delegate）的一种更安全的封装方式（只能作为成员存在于类/接口或结构体中），程序员无法在类外部赋值或调用事件，这使得委托的使用更加安全。C# event 是一种成员，用于将特定的事件通知发送给订阅者。事件通常用于实现<strong>观察者模式</strong>，它允许一个对象将状态的变化通知其他对象，而不需要知道这些对象的细节。</p><p>事件基本上说是一个用户操作，如按键、点击、鼠标移动等等，或者是一些提示信息，如系统生成的通知。应用程序需要在事件发生时响应事件。</p><h2 id="使用event实现一些基本功能">使用event实现一些基本功能</h2><p>事件通过以下方式进行声明：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件对应的委托类型（以无参无返回值为例）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">onPlayerHurt</span>()</span>;</span><br><span class="line"><span class="comment">// 访问修饰符 event 委托类型 事件名；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> onPlayerHurt playerHurtEvent;</span><br></pre></td></tr></table></figure><p>事件必须位于类/接口/结构体中，例如声明一个用于处理事件业务逻辑的发布者类PlayerHurtEvent：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerHurtEvent</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">onPlayerHurt</span>()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> onPlayerHurt playerHurtEvent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发事件的方法，因为无法在外部直接触发事件（委托可以），因此需要加一层封装</span></span><br><span class="line">    <span class="comment">// 这是一个受保护的方法，使用 ?.Invoke 语法来确保只有在有订阅者时才调用事件。</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnPlayerHurtEvent</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        playerHurtEvent?.Invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟业务逻辑过程并触发事件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartProcess</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;触发事件&quot;</span>);</span><br><span class="line">        <span class="comment">// 业务逻辑完成，触发事件</span></span><br><span class="line">        OnPlayerHurtEvent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察者（订阅者）类：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 订阅者类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventSubscriber</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 为事件添加回调函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Subscribe</span>(<span class="params">PlayerHurtEvent process</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 取消事件用 -= 就行</span></span><br><span class="line">        process.playerHurtEvent += Process_ProcessCompleted;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 具体的回调函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Process_ProcessCompleted</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;订阅者收到事件触发，处理相关逻辑&quot;</span>);</span><br><span class="line">        <span class="comment">// ......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在具体的应用场景中，可能是：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        PlayerHurtEvent process = <span class="keyword">new</span> PlayerHurtEvent();</span><br><span class="line">        EventSubscriber subscriber = <span class="keyword">new</span> EventSubscriber();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 订阅事件</span></span><br><span class="line">        subscriber.Subscribe(process);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动过程</span></span><br><span class="line">        process.StartProcess();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优缺点">优缺点</h2><h3 id="优点"><strong>优点</strong></h3><ul><li><strong>解耦</strong><ul><li>观察者与主题是松耦合的，便于扩展。</li><li>增加新的观察者无需修改发布者。</li></ul></li><li><strong>扩展性好</strong><ul><li>新的功能只需增加观察者即可，不需要改变原有代码。</li></ul></li><li><strong>灵活性高</strong><ul><li>支持动态注册和移除观察者。</li></ul></li></ul><h3 id="缺点"><strong>缺点</strong></h3><ul><li><strong>复杂性增加</strong><ul><li>对于大量观察者的管理和通知机制需要谨慎，可能增加复杂度。</li></ul></li><li><strong>性能问题</strong><ul><li>当观察者数量较多时，通知过程可能影响性能，因此一个可行的方向是将订阅者分成更小的组，减少需要通知的订阅者的数量。</li></ul></li><li><strong>可能产生循环依赖</strong><ul><li>如果观察者和主题之间的关系处理不当，可能出现循环依赖，导致难以调试。</li></ul></li></ul><h1 id="在实际项目中的应用">在实际项目中的应用</h1><p>这次的Ludum Dare 49我们开发的游戏《Bable Block》中我使用了hll学长的代码，其中 EventCenter 的部分被我用来实现了<strong>底部广播</strong>的功能。底部广播由一个定时器触发，每隔10秒钟更新广播的内容，实现新闻联播中底部新闻的效果（我认为这样可以使游戏更<strong>幽默</strong>一些，因为LD49的评分维度有幽默一项）。</p><p>EventCenter 脚本实现了 UML 图中 Subject 部分的功能，支持有参/无参类型事件的监听，以下是它的源码：</p><h2 id="eventcenter">EventCenter</h2><p>EventCenter 通过字典来存储事件和事件对应的需要触发的订阅，基本功能包括：</p><ul><li>增加事件监听</li><li>移除事件监听</li><li>触发事件</li><li>清空事件和订阅</li></ul><h3 id="无参事件">无参事件</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> UnityAction actions;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EventInfo</span>(<span class="params">UnityAction action</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        actions += action;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 事件中心 单例模式对象</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 1.Dictionary</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 2.委托</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 3.观察者设计模式</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 4.泛型</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventCenter</span> : <span class="title">BaseManager</span>&lt;<span class="title">EventCenter</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//key —— 事件的名字（比如：怪物死亡，玩家死亡，通关 等等）</span></span><br><span class="line">    <span class="comment">//value —— 对应的是 监听这个事件 对应的委托函数们</span></span><br><span class="line">    <span class="keyword">private</span> Dictionary&lt;<span class="built_in">string</span>, EventInfo&gt; eventDic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, EventInfo&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 监听不需要参数传递的事件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span>事件的名字<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;action&quot;&gt;</span>准备用来处理事件 的委托函数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddEventListener</span>(<span class="params"><span class="built_in">string</span> name, UnityAction action</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//有没有对应的事件监听</span></span><br><span class="line">        <span class="comment">//有的情况</span></span><br><span class="line">        <span class="keyword">if</span> (eventDic.ContainsKey(name))</span><br><span class="line">        &#123;</span><br><span class="line">            (eventDic[name]).actions += action;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有的情况</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            eventDic.Add(name, <span class="keyword">new</span> EventInfo(action));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 移除不需要参数的事件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span>事件的名字<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;action&quot;&gt;</span>对应之前添加的委托函数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveEventListener</span>(<span class="params"><span class="built_in">string</span> name, UnityAction action</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (eventDic.ContainsKey(name))</span><br><span class="line">            (eventDic[name]).actions -= action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 事件触发（不需要参数的）</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span>哪一个名字的事件触发了<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EventTrigger</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//有没有对应的事件监听</span></span><br><span class="line">        <span class="comment">//有的情况</span></span><br><span class="line">        <span class="keyword">if</span> (eventDic.ContainsKey(name))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((eventDic[name]).actions != <span class="literal">null</span>)</span><br><span class="line">                (eventDic[name]).actions.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 清空事件中心</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 主要用在 场景切换时</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Clear</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        eventDic.Clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引入有参事件">引入有参事件</h3><p>如果我们希望事件携带参数该怎么办呢？可以通过一个空接口结合里氏替换原则实现多态存入字典中，改写如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用空接口是因为要把他存到字典里，要用里式转换原则转成其他的T类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IEventInfo</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventInfo</span> : <span class="title">IEventInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> UnityAction actions;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EventInfo</span>(<span class="params">UnityAction action</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        actions += action;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventInfo</span>&lt;<span class="title">T</span>&gt; : <span class="title">IEventInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> UnityAction&lt;T&gt; actions;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EventInfo</span>(<span class="params"> UnityAction&lt;T&gt; action</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        actions += action;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 事件中心 单例模式对象</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 1.Dictionary</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 2.委托</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 3.观察者设计模式</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 4.泛型</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventCenter</span> : <span class="title">BaseManager</span>&lt;<span class="title">EventCenter</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//key —— 事件的名字（比如：怪物死亡，玩家死亡，通关 等等）</span></span><br><span class="line">    <span class="comment">//value —— 对应的是 监听这个事件 对应的委托函数们</span></span><br><span class="line">    <span class="keyword">private</span> Dictionary&lt;<span class="built_in">string</span>, IEventInfo&gt; eventDic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, IEventInfo&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 添加事件监听</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span>事件的名字<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;action&quot;&gt;</span>准备用来处理事件 的委托函数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddEventListener</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> name, UnityAction&lt;T&gt; action</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//有没有对应的事件监听</span></span><br><span class="line">        <span class="comment">//有的情况</span></span><br><span class="line">        <span class="keyword">if</span>( eventDic.ContainsKey(name) )</span><br><span class="line">        &#123;</span><br><span class="line">            (eventDic[name] <span class="keyword">as</span> EventInfo&lt;T&gt;).actions += action;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有的情况</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            eventDic.Add(name, <span class="keyword">new</span> EventInfo&lt;T&gt;( action ));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 移除对应的事件监听</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span>事件的名字<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;action&quot;&gt;</span>对应之前添加的委托函数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveEventListener</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> name, UnityAction&lt;T&gt; action</span>)                  <span class="comment">//移除监听</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (eventDic.ContainsKey(name))</span><br><span class="line">            (eventDic[name] <span class="keyword">as</span> EventInfo&lt;T&gt;).actions -= action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 事件触发</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span>哪一个名字的事件触发了<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EventTrigger</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> name, T info</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//有没有对应的事件监听</span></span><br><span class="line">        <span class="comment">//有的情况</span></span><br><span class="line">        <span class="keyword">if</span> (eventDic.ContainsKey(name))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//eventDic[name]();</span></span><br><span class="line">            <span class="keyword">if</span>((eventDic[name] <span class="keyword">as</span> EventInfo&lt;T&gt;).actions != <span class="literal">null</span>)</span><br><span class="line">                (eventDic[name] <span class="keyword">as</span> EventInfo&lt;T&gt;).actions.Invoke(info);</span><br><span class="line">            <span class="comment">//eventDic[name].Invoke(info);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 清空事件中心</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 主要用在 场景切换时</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Clear</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        eventDic.Clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，需要强调的是在使用观察者模式时需要留意<strong>内存泄漏</strong>风险。我们需要确保所有添加的委托都能正确移除，特别是在<strong>对象销毁</strong>时，避免事件中心持有不再使用的对象造成内存泄漏。当对象仍被实践中心持有时它将不会被GC。</p><h1 id="参考资料">参考资料</h1><p><a href="https://zh.wikipedia.org/wiki/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F">https://zh.wikipedia.org/wiki/观察者模式</a><br><a href="https://www.dongchuanmin.com/csharp/2359.html">https://www.dongchuanmin.com/csharp/2359.html</a><br><a href="https://www.dongchuanmin.com/csharp/2360.html">https://www.dongchuanmin.com/csharp/2360.html</a><br><a href="https://www.dongchuanmin.com/csharp/2361.html">https://www.dongchuanmin.com/csharp/2361.html</a><br><a href="https://www.dongchuanmin.com/csharp/2362.html">https://www.dongchuanmin.com/csharp/2362.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏编程 </tag>
            
            <tag> 经验分享 </tag>
            
            <tag> 项目复盘 </tag>
            
            <tag> Unity </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 观察者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>§2-2：基础纹理</title>
      <link href="/2021/09/30/%C2%A72-2%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%BA%B9%E7%90%86/"/>
      <url>/2021/09/30/%C2%A72-2%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%BA%B9%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="基础概念">基础概念</h1><ul><li><strong>纹理映射(Texture Mapping)</strong><br>纹理映射指的是将一张贴图映射在模型表面，逐纹素(texel)的控制模型的颜色。</li><li><strong>纹理映射坐标(Texture-mapping Coordinates)</strong><br>通过模型的纹理展开(展uv)，我们可以获得一组纹理映射坐标，储存在每个顶点上。通常纹理映射坐标由(u, v)来表示，所以我们会简称纹理映射坐标为UV坐标。<br>不管贴图实际上有多大，UV坐标的范围通常被归于[0, 1]之间，并以纹理贴图的左下角为原点</li><li><strong>纹理空间(Texture Image Sace)</strong><br>纹理空间在纹理映射坐标的基础上乘以了纹理分辨率（如分辨率为256*256，新的uv坐标为（256u，256v））而得到的新坐标，用于寻找纹理贴图上对应的像素点的信息</li><li><strong>纹理采样(Texture Sampleing)</strong><br>我们获取纹理映射后对应纹理贴图像素点的过程</li></ul><p>纹理管线的完整流程，可参考：<a href="https://zhuanlan.zhihu.com/p/393323667">https://zhuanlan.zhihu.com/p/393323667</a></p><h1 id="unity中的纹理属性">Unity中的纹理属性</h1><p>在向Unity导入纹理之后，检查器中可以对纹理进行一系列设置：</p><center><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211031235838.png" width="400px/"></center><p>具体的设置见下：</p><h2 id="纹理类型-texture-type">纹理类型(Texture Type)</h2><p>我们可以选择设置成普通的纹理贴图、法线贴图或者是光照贴图等等。选择合适的类型能让Unity更好的针对贴图进行优化，节约游戏空间</p><center><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211101000053.png" width="280/"></center><h2 id="透明通道源-alpha-source">透明通道源(Alpha Source)</h2><p>设置透明通道的值。默认透明来自于贴图本身，但是也可以通过灰阶来设置透明通道</p><center><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211101000224.png" width="280/"></center><h2 id="平铺模式-wrap-mode">平铺模式(Wrap Mode)</h2><p>决定了当模型顶点对应的纹理坐标超过[0, 1]范围之后的<strong>平铺方式</strong>。按常理来说我们会把纹理差不多完整的弄上去，但可能造成效果不好看，所以需要人为的对纹理进行平移或缩放（_Texture_ST），这时候纹理映射坐标就会超出[0,1]的范畴。</p><center><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211101000612.png" width="280/"></center>以下是几种常见平铺模式的效果图：<center><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211004170946.png" width="400/"></center><h2 id="滤波模式-filter-mode">滤波模式(Filter Mode)</h2><p>相当于PS中改变图像大小时选择的图像处理模式。我们的纹理不一定正好对上物体，可能偏大（几个纹素对应一个像素）、偏小（一个纹素对应几个像素）或存在一定角度的偏差（旋转），因此需要进行纹理过滤。滤波模式决定了当纹理被放大或缩小时使用哪种滤波模式。按照滤波效果和性能排序，三种模式的顺序（又差到优）为：Point &lt; Bilinear &lt; Trilinear</p><center><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211101000919.png" width="280/">他们的效果图如图所示：<img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211004171217.png" width="400/"></center><blockquote><p><strong>Point：最近邻(Nearst Neighbor)</strong>，得到类似像素的风格，非常适合本身就是像素风格纹理的放大缩小<br><strong>Bilinear：双线性插值</strong>，对于每个像素与临近的四个像素进行<strong>线性插值</strong>，得到有些模糊的感觉。计算方式如下：<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211004171835.png" width="300/"><br><strong>Trilinear：立方卷积</strong>，在基于Bilinear的基础上对多级渐远纹理进行的混合</p></blockquote><h2 id="多级渐远纹理-mipmapping">多级渐远纹理(Mipmapping)</h2><p>通过勾选下列选项即可开启多级渐远纹理。这通常应用于频繁地需要将纹理缩小、或者纹理延伸到无穷远以至于远处的纹理是十分小的情况。多级渐远通过提前对纹理进行滤波得到纹理金字塔来减少渲染时间(经典的牺牲空间换取时间)</p><center><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211101001449.png" width="380/"></center><h2 id="纹理大小-texture-size">纹理大小(Texture Size)</h2><p>我们可以设置纹理的最大大小作为纹理的最大分辨率。理想情况下，纹理应该是正方形的，并且长宽的大小是2的幂。NPOT(Non Pow Of Two)类型的纹理处理会占用更多的内存，读取速度也会有所下降甚至不被支持<br><strong>当对纹理没有特殊要求的时候，请压缩纹理来节约空间</strong></p><center><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211101001652.png" width="350/"></center><h1 id="几种纹理贴图介绍">几种纹理贴图介绍</h1><h2 id="渐变纹理">渐变纹理</h2><p>这种纹理能够更加灵活的控制光线和阴影以达到更为微妙的效果，比如下图中类卡渲风格和阴影异色模糊渐变的效果：</p><center><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211101010206.png" width="250/"></center><p>真正意义上的卡渲的高光不是这样的，在之后的章节会提及。另外，<strong>需要注意的是，用于渐变渲染的贴图的平铺模式必须设置为Clamp，否则会因为float精度问题在高光区域出现黑点</strong>，如下图：</p><center><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211101010405.png" width="220/"></center><h2 id="遮罩纹理">遮罩纹理</h2><p>类似于图像遮罩、层遮罩等等，遮罩允许我们保护纹理的某些区域使其不受光照反射影响，从而更精细地控制光照细节，达成微妙的效果<br>遮罩纹理渲染的一般流程为：</p><ul><li>利用tex2D()对遮罩纹理进行采样</li><li>利用纹理采样的某个通道解码(或者不用，看情况)之后的某种属性与某个值A(比如高光反射)相乘<br>这样一来，当纹素解码出来的属性为0时，该纹素不受某个值A的影响。影响随属性大小改变</li></ul><blockquote><p><strong>图形学的吝啬</strong><br>只是随口一提罢了，正好书上也有提到：<br>一张纹理贴图，不同的分量(通道)可能包含了完全不同的信息。比如法线贴图的rgb表示的是法线的扰动大小(是偏移向量的三个分量)，但是a通道可能什么也没有表示，这其实是一种浪费。为了最大限度的利用一张纹理贴图，我们可以：</p><ul><li>R：储存高光反射强度</li><li>G：储存边缘光照强度</li><li>B：储存高光反射指数</li><li>A：自发光强度</li></ul></blockquote><p>并指定相应的映射公式来满足需要</p><br><hr><h1 id="shader函数学习：tex2d与transform-tex">Shader函数学习：tex2D与TRANSFORM_TEX</h1><ul><li>tex2D(sampler2D tex, fixed2 s)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tex2D(_MainTex, i.uv);</span><br></pre></td></tr></table></figure><p>这个方法其实就是对一张纹理_MainTex中的一个点进行采样。我们要得到整个纹理的颜色，就需要所有像素对应的uv点(并储存到一组纹理uv中)</p><ul><li>TRANSFORM_TEX(fixed4 tex, sampler2D texName)<br>这是一个Unity封装过的内置方法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 第一个参数：顶点uv</span><br><span class="line">// 第二个参数：要处理的纹理</span><br><span class="line">// o.uv：转移到片元着色器</span><br><span class="line">o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br></pre></td></tr></table></figure><p>该函数的作用就是对uv进行scale和offset(变化后的纹理坐标)，也就等价于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 将_MainTex的变化储存在uv的xy坐标中</span><br><span class="line">uv.xy = uv.xy * _MainTex__ST.xy + _MainTex_ST.zw</span><br></pre></td></tr></table></figure><h2 id="单张纹理代码">单张纹理代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Custom/单张纹理&quot;        // 基于Blinn-Phong高光模型</span><br><span class="line">&#123;</span><br><span class="line">    Properties&#123;</span><br><span class="line">        _Color (&quot;整体色调&quot;, Color) = (1.0, 1.0, 1.0, 1.0)           // 其实就是漫反射颜色</span><br><span class="line">        // 2D是纹理属性的声明方式</span><br><span class="line">        _MainTex(&quot;纹理&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _Specular(&quot;高光反射颜色&quot;, Color) = (1.0, 1.0, 1.0, 1.0)</span><br><span class="line">        _Gloss(&quot;光泽度&quot;, Range(8.0, 256)) = 20</span><br><span class="line">    &#125;</span><br><span class="line">    SubShader&#123;</span><br><span class="line">        Pass&#123;</span><br><span class="line">            Tags&#123; &quot;LightMode&quot; = &quot;ForwardBase&quot; &#125;</span><br><span class="line"></span><br><span class="line">            CGPROGRAM</span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            #include &quot;Lighting.cginc&quot;</span><br><span class="line"></span><br><span class="line">            fixed4 _Color;</span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            // 这个名字并不是随便起的，而是按照“纹理名字_ST”的方式来**声明对应纹理的属性**。ST指缩放(Scale，xy)和平移(Trans，zw)</span><br><span class="line">            // 存在该变量是因为我们可能要对一个物体的纹理进行缩放和偏移来获得更好的效果</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            fixed4 _Specular;</span><br><span class="line">            float _Gloss;</span><br><span class="line">            </span><br><span class="line">            struct a2v&#123;</span><br><span class="line">                float4 vertex : POSITION;               // 顶点在模型空间中的位置</span><br><span class="line">                float3 normal : NORMAL;                 // 顶点在模型空间中的法线</span><br><span class="line">                float4 texcoord : TEXCOORD0;            // 模型的一组纹理</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f&#123;</span><br><span class="line">                float4 pos : SV_POSITION;               // 裁剪空间中的**顶点位置**</span><br><span class="line">                float3 worldNormal : TEXCOORD0;         // 世界空间中的**顶点法线**</span><br><span class="line">                float3 worldPos : TEXCOORD1;            // 世界空间中的**顶点位置**</span><br><span class="line">                float2 uv : TEXCOORD2;                  // 顶点的uv坐标</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)&#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                // 顶点坐标从模型空间到裁剪空间</span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                // 世界空间的顶点法线</span><br><span class="line">                o.worldNormal = mul(v.normal, (float3x3)unity_WorldToObject);               </span><br><span class="line">                // 顶点的世界空间位置</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld, v.vertex);</span><br><span class="line">                </span><br><span class="line">                // 二维纹理uv坐标，为基础值 * 贴图缩放（分辨率） + 贴图偏移</span><br><span class="line">                o.uv = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;</span><br><span class="line">                o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);     // 投影函数，获得uv坐标，与上面那行等同</span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target&#123;</span><br><span class="line">                // 用于漫反射和高光计算</span><br><span class="line">                const fixed3 worldNormal = normalize(i.worldNormal);                          // 映射到0~1之间</span><br><span class="line">                const fixed3 worldLightDir = normalize(_WorldSpaceLightPos0.xyz);             // 世界空间的入射光单位向量，映射到0~1之间</span><br><span class="line"></span><br><span class="line">                // 反照率与环境光</span><br><span class="line">                const fixed3 albedo = tex2D(_MainTex, i.uv).rgb * _Color.rgb;                 // 反照率，对贴图进行纹理采样（计算出的纹素值与主色调相乘）</span><br><span class="line">                const fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * albedo;                 // 环境光，与反照率有关(因为有贴图颜色的存在)</span><br><span class="line"></span><br><span class="line">                // 计算漫反射光线</span><br><span class="line">                const fixed3 diffuse = _LightColor0.rgb * albedo * max(0, dot(worldNormal, worldLightDir)); </span><br><span class="line"></span><br><span class="line">                // 计算高光，使用Blinn-Phong公式</span><br><span class="line">                const fixed3 viewDir = normalize(_WorldSpaceCameraPos.xyz - i.worldPos.xyz);  // 计算视觉方向(v)的单位向量</span><br><span class="line">                const fixed3 halfDir = normalize(worldLightDir + viewDir);                    // 计算h单位向量，使用Blinn公式</span><br><span class="line">                const fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(max(0, dot(worldNormal, halfDir)), _Gloss);</span><br><span class="line"></span><br><span class="line">                // 呈现颜色：环境光 + 漫反射 + 高光反射</span><br><span class="line">                return fixed4(ambient + diffuse + specular, 1.0);</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Fallback &quot;Specular&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> Unity Shader </tag>
            
            <tag> 计算机图形学 </tag>
            
            <tag> shaderLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>§2-1：基础光照模型</title>
      <link href="/2021/09/17/%C2%A72-1%EF%BC%9A%E5%9F%BA%E7%A1%80%E5%85%89%E7%85%A7%E6%A8%A1%E5%9E%8B/"/>
      <url>/2021/09/17/%C2%A72-1%EF%BC%9A%E5%9F%BA%E7%A1%80%E5%85%89%E7%85%A7%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211101142347.png">&emsp;&emsp;光照模型分为两种：<ul><li>一种是基于物理的光照模型（PBR），非常真实的反映了现实世界的光照，但是需要大量复杂的计算</li><li>另一种是经验光照模型（如兰伯特），用较为简单的方式模拟了物理光照，也能得到不错的效果</li></ul><p>本章节主要介绍经验光照模型</p><h1 id="基本概念">基本概念</h1><h2 id="光源-light-source">光源(Light Source)</h2><p>  光从光源中发射出来，照到物体表面。对于不同类型的光，需要设置不同种类的光源（例如影响全局的场景光、点光源以及投射灯等等）。<br>  在Unity中，当我们选择创建光源时，有以下四种选项(反射球暂时先不考虑)：</p><center><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211101132458.png" width="250/"></center><h2 id="辐照度-irradiance">辐照度(Irradiance)</h2><p>  辐照度是<strong>衡量一个光源发出的光的多少</strong>使用的单位，用来量化光。</p><ul><li>对于平行光，辐照度可以通过计算垂直于光源方向l的单位面积上单位时间内穿过的能量得到。</li><li>而存在一定夹角的时候，可以通过求光源方向l和法线之间的夹角的余弦值求得（就是投影到垂直平面的方向的分量）。<br>  当光线间隔相同时，光与平面的夹角越大，单位面积内光的数量越少。</li></ul><h2 id="出射度-exitance">出射度(Exitance)</h2><p>  衡量出射光线的数量和方向的量，利用入射光线的数量和角度计算。和辐照度存在线性关系。</p><h2 id="吸收和散射">吸收和散射</h2><p>  光与物体相交有两个结果：<strong>散射</strong>和<strong>吸收</strong>。</p><ul><li>散射(Scattering)<br>  散射只改变光的方向，但不改变光的颜色和密度，如下图：</li></ul><center><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211101133200.png" width="250/"></center><p>  散射分为<strong>折射(Refraction)<strong>和</strong>反射(Reflection)</strong>，如上图的两个不同方向的出射光所示。对于不透明物体，折射进入物体内部的光线还会据徐与内部的颗粒进行相交，其中一些光效最后会重新发射出物体表面，而另一些则会被物体吸收。反射则在物体表面直接被弹出来了，但是如果物体表面粗糙会往不同的方向进行反射。<br>  针对反射的两种性状，我们有<strong>漫反射(Diffuse)模型</strong>与<strong>高光反射(Specular)模型</strong>。</p><ul><li>吸收(Absorption)<br>  吸收只改变光线的密度和颜色，不改变光线的方向。也就是说，吸收将光的能量吸收走了，而散射并没有只是改变了光的方向。</li></ul><pre class="mermaid">graph LR  光与物体相交 --> 散射  光与物体相交 --> 吸收  散射 --> 折射  散射 --> 反射  反射 --> 漫反射  反射 --> 高光反射</pre><h2 id="着色-shading">着色(Shading)</h2><p>  着色指的是根据材质属性、光源信息去使用一个或多个等式计算沿某个观察方向的出射度的过程。这些等式就是“光照模型(Light Model)”</p><h1 id="标准光照模型">标准光照模型</h1><p>  标准光照模型只关注直接光照(Direct Light)，也就是<strong>从光源出发，照射到物体表面，反射回摄像机</strong>的光线。于是，我们可以称标准光照模型为局部光照模型。<br>  进入摄像机的光线(符号：c~光线类型~)往往分为以下四种：</p><h2 id="漫反射-diffuse"><strong>漫反射(Diffuse)</strong></h2><h3 id="兰伯特模型-lambert"><strong>兰伯特模型（Lambert）</strong></h3><p>  用于描述当光线照射到物体表面，物体表面会向<strong>每个方向</strong>散射多少辐射量。对于漫反射而言，观察角度并不重要，因为我们默认漫反射在各个方向的分布是一样的。但是入射光线非常重要。<br>  漫反射符合<strong>兰伯特定律(Lambert’s law)</strong>：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mrow><mi>d</mi><mi>i</mi><mi>f</mi><mi>f</mi><mi>u</mi><mi>s</mi><mi>e</mi></mrow></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>c</mi><mrow><mi>l</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub><mo>⋅</mo><msub><mi>m</mi><mrow><mi>d</mi><mi>i</mi><mi>f</mi><mi>f</mi><mi>u</mi><mi>s</mi><mi>e</mi></mrow></msub><mo stretchy="false">)</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mover accent="true"><mi>n</mi><mo>^</mo></mover><mo>⋅</mo><mover accent="true"><mi>l</mi><mo>^</mo></mover><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c_{diffuse} = (c_{light} \cdot m_{diffuse})max(0, \hat{n} \cdot \hat{l})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.2078799999999998em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>  其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>n</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span> 为法线向量(normal vector, 一般用n表示)，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>l</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9578799999999998em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span> 为光源的单位矢量，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>m</mi><mrow><mi>d</mi><mi>i</mi><mi>f</mi><mi>f</mi><mi>u</mi><mi>s</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">m_{diffuse}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 就是材质的漫反射颜色，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mrow><mi>l</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">c_{light}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 是光源颜色</p><h3 id="半兰伯特模型-half-lambert"><strong>半兰伯特模型（Half Lambert）</strong></h3><p>  漫反射可以有逐顶点和逐片元两种模型(均满足兰伯特定律)，但是它们的暗部都是全黑的，这使得从暗部观察物体时不利于细节呈现并且看起来像个平面。通过更改兰伯特定律公式，我们可以得到半兰伯特模型的漫反射计算公式：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mrow><mi>d</mi><mi>i</mi><mi>f</mi><mi>f</mi><mi>u</mi><mi>s</mi><mi>e</mi></mrow></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>c</mi><mrow><mi>l</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub><mo>⋅</mo><msub><mi>m</mi><mrow><mi>d</mi><mi>i</mi><mi>f</mi><mi>f</mi><mi>u</mi><mi>s</mi><mi>e</mi></mrow></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">(</mo><mover accent="true"><mi>n</mi><mo>^</mo></mover><mo>⋅</mo><mover accent="true"><mi>l</mi><mo>^</mo></mover><mo stretchy="false">)</mo><mo>+</mo><mi>β</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c_{diffuse} = (c_{light} \cdot m_{diffuse})(\alpha (\hat{n} \cdot \hat{l}) + \beta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.2078799999999998em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span></span></span></span></span></p><p>  与兰伯特模型不同的是，半兰伯特模型对法线和光源的点乘进行的一个缩放并偏移。通常，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span> 与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span> 的值均为0.5，可以将光与法线的点积映射到[0, 1]范围中。<br>  三种方式计算漫反射背光部分的差别：</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211101140711.png" width="280/"><p>  三种计算漫反射的方式(左：逐像素；中：逐顶点；右：半兰伯特)，可以看出逐顶点漫反射有明显的锯齿边</p><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211101140900.png" width="280/"><h2 id="高光反射-specular"><strong>高光反射(Specular)</strong></h2><p>  用于描述当光线照射到物体表面，物体表面会在<strong>完全镜面反射方向</strong>散射多少辐射量。<br>  高光反射需要知道四个向量的值，即人眼观察方向(v)、法线方向(n)、光源方向(入射光l)、反射方向(出射光r)。</p><h3 id="phong模型"><strong>Phong模型</strong></h3><p>  Phong模型和物理中的光学模型类似，主要特征是入射光 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>l</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9578799999999998em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span> 、出射光 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>r</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span> 和法线 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>n</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span> 的夹角相同。 出射光<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>r</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span> 的计算公式为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>r</mi><mo>^</mo></mover><mo>=</mo><mn>2</mn><mo stretchy="false">(</mo><mover accent="true"><mi>n</mi><mo>^</mo></mover><mo>⋅</mo><mover accent="true"><mi>l</mi><mo>^</mo></mover><mo stretchy="false">)</mo><mover accent="true"><mi>n</mi><mo>^</mo></mover><mo>−</mo><mover accent="true"><mi>l</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{r} = 2(\hat{n} \cdot \hat{l}) \hat{n} - \hat{l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.2078799999999998em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9578799999999998em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span></span></p><p>  高光反射光的计算公式为( <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>m</mi><mrow><mi>g</mi><mi>l</mi><mi>o</mi><mi>s</mi><mi>s</mi></mrow></msub></mrow><annotation encoding="application/x-tex">m_{gloss}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 为材质光泽度，值越大材质光斑越小。max的作用是防止负数出现，避免背后的光照亮物体)：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mrow><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>u</mi><mi>l</mi><mi>a</mi><mi>r</mi></mrow></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>c</mi><mrow><mi>l</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub><mo>⋅</mo><msub><mi>m</mi><mrow><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>u</mi><mi>l</mi><mi>a</mi><mi>r</mi></mrow></msub><mo stretchy="false">)</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mover accent="true"><mi>v</mi><mo>^</mo></mover><mo>⋅</mo><mover accent="true"><mi>r</mi><mo>^</mo></mover><msup><mo stretchy="false">)</mo><msub><mi>m</mi><mrow><mi>g</mi><mi>l</mi><mi>o</mi><mi>s</mi><mi>s</mi></mrow></msub></msup></mrow><annotation encoding="application/x-tex">c_{specular} = (c_{light} \cdot m_{specular})max(0, \hat{v} \cdot \hat{r})^{m_{gloss}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29011428571428566em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><h3 id="blinn-phong模型"><strong>Blinn-Phong模型</strong></h3><p>  Blinn-Phong模型对Phong模型进行了简化，引入了一个新的矢量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>h</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{h}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9578799999999998em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">h</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span> 代替反射光线。 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>h</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{h}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9578799999999998em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">h</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span> 是对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>v</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{v}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>l</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9578799999999998em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span> 取平均再统一化得到的，指的是v和l中间的向量：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>h</mi><mo>^</mo></mover><mo>=</mo><mfrac><mrow><mover accent="true"><mi>v</mi><mo>^</mo></mover><mo>+</mo><mover accent="true"><mi>l</mi><mo>^</mo></mover></mrow><mrow><mi mathvariant="normal">∣</mi><mover accent="true"><mi>v</mi><mo>^</mo></mover><mo>+</mo><mover accent="true"><mi>l</mi><mo>^</mo></mover><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\hat{h} = \frac{\hat{v} + \hat{l}}{\vert \hat{v} + \hat{l}\vert }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9578799999999998em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">h</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.73276em;vertical-align:-1.09788em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6348799999999999em;"><span style="top:-2.15212em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mord">∣</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.09788em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><img src="https://tva1.sinaimg.cn/large/006UcwnJly1h5uppgwtpfj30ge0aa3yy.jpg" alt="image" width="190" data-width="590" data-height="370">&emsp;&emsp;高光反射光的计算公式为:$$c_{specular} = (c_{light} \cdot m_{specular})max(0, \hat{n} \cdot \hat{h})^{m_{gloss}}$$<p>  当摄像机无穷远时，我们认为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>v</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{v}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>l</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9578799999999998em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span> 均为定值，此时 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>h</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{h}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9578799999999998em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">h</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span> 为定值，使用Blinn模型的速度将更快。而当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>v</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{v}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>l</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9578799999999998em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span> 处在变化之中时，Phong模型更占优势。此外，一些适合Blinn模型更符合实验结果。因此具体选择哪种攻击计算高光反射需要依效果而定。比如当入射光方向和人眼观察方向在法线的同一侧时，Phong模型会产生奇怪的日食状“断层”现象，而Blinn-Phong模型则不会：</p><center><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211101143401.png" width="450/"></center><h3 id="gourand模型"><strong>Gourand模型</strong></h3><p>中文名是高洛德模型，这是一种在顶点着色器下计算的光照模型，适合顶点比较多的模型（不然效果太锯齿了）。不过由于是通过插值计算的高光，导致一个高光顶点会向四周蔓延，效果很拉。也因为这个原因，该模型不怎么用<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211101144623.png" width="100/"></p><p>  从左到右：逐像素高光、逐顶点高光(可见锯齿)、Blinn-Phong高光模型</p><center><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211101141058.png" width="300" style="display:inline"><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20211101141158.png" width="300" style="display:inline"></center><h2 id="环境光-ambient"><strong>环境光(Ambient)</strong></h2><p>  环境光用于描述其他所有的间接光照。通常用于模拟间接光照，是一个全局(goble)变量，一个场景中所有物体都使用这个环境光：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mrow><mi>a</mi><mi>m</mi><mi>b</mi><mi>i</mi><mi>e</mi><mi>n</mi><mi>t</mi></mrow></msub><mo>=</mo><msub><mi>g</mi><mrow><mi>a</mi><mi>m</mi><mi>b</mi><mi>i</mi><mi>e</mi><mi>n</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">c_{ambient} = g_{ambient}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><h2 id="自发光-emissive"><strong>自发光(Emissive)</strong></h2><p>  用于描述给定一个方向时物体本身能向该方向发射多少辐射量，指<strong>一个物体材质本身会发光</strong>，光再照射到摄像机中。所以标准光照模型中，自发光就等同于材质(metrail)的自发光颜色。</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mrow><mi>e</mi><mi>m</mi><mi>i</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>v</mi><mi>e</mi></mrow></msub><mo>=</mo><msub><mi>m</mi><mrow><mi>e</mi><mi>m</mi><mi>i</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>v</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">c_{emissive} = m_{emissive}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>  让自发光产生照亮其他物体效果的前提是使用全局光照模型，否则只是自己看起来更亮了而已（因为标准光照模型是局部的光照模型）。</p><h1 id="着色频率">着色频率</h1><p>  根据着色的形式，着色频率分为逐三角形渲染(flat shading)、逐顶点渲染(gourand shading)或逐像素渲染(phong shading)，如下图所示。<br><img src="https://tva4.sinaimg.cn/large/006UcwnJly1h5uu6b6h3sj30y30ahabx.jpg" alt="image" width="527" data-width="1227" data-height="377"></p><p>  由于顶点数量远少于像素数量，所以vert的计算量比frag小，但是vert依赖于线性插值(Lerp)，可能会导致光照模型中的非线性运算影响到实际输出效果</p><h2 id="顶点法线的计算"><strong>顶点法线的计算</strong></h2><p>高洛德着色涉及顶点的法线计算，对于一个点要怎么找它的法线呢？<br>一个顶点往往与一至多个面相连接，而面的法线是很好求的。所以，对于顶点连接的面的法线求一个平均就可以等价为顶点的法线<br><img src="https://tvax2.sinaimg.cn/large/006UcwnJly1h5uuqvw6syj30ci0b8my3.jpg" alt="image" width="200" data-width="450" data-height="404"></p><h2 id="像素法线的计算"><strong>像素法线的计算</strong></h2><p>冯着色涉及像素的法线计算，对于一个像素要怎么找它的法线呢？<br>有人觉得既然一个像素在某个面上，那么就直接用这个面的法线充当像素的法线，实际上是不对的。像素法线的求法实际上如下图所示，是用重心坐标求得的：<br><img src="https://tva2.sinaimg.cn/large/006UcwnJly1h5uuwuzfbdj30s20e30u5.jpg" alt="image" width="250" data-width="1010" data-height="507"></p><h1 id="shader函数学习：normalize-saturate与mul">Shader函数学习：normalize、saturate与mul</h1><ul><li>normalize()<br>该函数能将输入的参数转化为长度为1的单位向量，不改变输入参数的方向。输入的参数不仅可以是float，也可以是vec2、vec3等</li><li>saturate()<br>该函数能将输入的数映射到[0, 1]围内，常用于颜色等限制分量范围在[0, 1]内的参数</li><li>mul(a, b)<br>该函数返回a与b的点积，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>⋅</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a \cdot b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> Unity Shader </tag>
            
            <tag> 计算机图形学 </tag>
            
            <tag> shaderLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>§1-4：光栅化/Rasterize</title>
      <link href="/2021/07/17/%C2%A71-4%EF%BC%9ARasterize/"/>
      <url>/2021/07/17/%C2%A71-4%EF%BC%9ARasterize/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>光栅（Raster）这个词最初来源于德语的“屏幕”一词，相当于英语中的Screen。那么光栅化的含义就比较明确了，指的是<strong>把图形从标准立方体（NDC）绘制到屏幕上的过程</strong>。</p></blockquote><h1 id="屏幕坐标系">屏幕坐标系</h1><p>我的笔记本电脑的主显示屏分辨率是1920*1080，代表长1920个像素，宽1080个像素，一共有1920*1080个像素。假设以屏幕左下角为原点建立坐标系，可以给每个像素一个坐标。但由于像素具有实际大小，每个像素的中心点坐标为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>0.5</mn><mo separator="true">,</mo><mi>y</mi><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x + 0.5, y + 0.5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose">)</span></span></span></span><br><img src="https://s2.loli.net/2022/07/17/wQMSOqjgYxf29Ps.png"></p><h1 id="从ndc到屏幕坐标系">从NDC到屏幕坐标系</h1><h2 id="屏幕映射-screen-mapping">屏幕映射(Screen Mapping)</h2><p>NDC是一个长宽高范围均为[-1, 1]的标准立方体。在经过MVP矩阵变换与齐次除法之后，现在要做的就是把具有三维属性的NDC映射到只有二维属性的屏幕空间，怎么实现呢？<br>如果忽略z（深度信息），其实可以直接把NDC的x和y属性“拉伸”成屏幕空间的形状，使用视口变换矩阵：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi></mrow><mn>2</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi></mrow><mn>2</mn></mfrac></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><mn>2</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><mn>2</mn></mfrac></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">M = \begin{pmatrix}   \frac{width}{2}         &amp; 0        &amp; 0        &amp; \frac{width}{2} \\   0         &amp; \frac{height}{2}        &amp; 0        &amp; \frac{height}{2} \\   0         &amp; 0        &amp; 1        &amp; 0 \\   0         &amp; 0        &amp; 0        &amp; 1\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.9323239999999995em;vertical-align:-2.2161619999999997em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.716162em;"><span style="top:-4.836054000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.543838em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.3438380000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.1438380000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2161619999999997em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.716162em;"><span style="top:-4.836054000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.543838em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.3438380000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.1438380000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2161619999999997em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.716162em;"><span style="top:-4.836054000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.543838em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.3438380000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.1438380000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2161619999999997em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.716162em;"><span style="top:-4.836054000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.543838em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.3438380000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.1438380000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2161619999999997em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>所以，NDC内每一点乘以M之后变成了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>∗</mo><mfrac><mrow><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi></mrow><mn>2</mn></mfrac><mo>+</mo><mfrac><mrow><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mo>∗</mo><mfrac><mrow><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><mn>2</mn></mfrac><mo>+</mo><mfrac><mrow><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\begin{pmatrix}   x * \frac{width}{2} + \frac{width}{2} \\   y * \frac{height}{2} + \frac{height}{2} \\   z \\   1\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.9323239999999995em;vertical-align:-2.2161619999999997em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.716162em;"><span style="top:-4.836054000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.543838em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.3438380000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.1438380000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2161619999999997em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span>。</p><p>好了！现在每个顶点都找到了在屏幕空间中的位置，经过三角形设置与三角形遍历之后就能获得一组片元序列。但是片元终究不是像素，还需要从三角形到像素的转化过程。</p><h2 id="采样">采样</h2><blockquote><p><strong>离散采样点</strong><br>如果我们知道一个函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> ，我们可以在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 等于不同的数值的时候求出一个对应的结果。这些点是离散而非连续的。<br><img src="https://tva4.sinaimg.cn/large/006UcwnJly1h5s9jm6aqrj30kp0j0wjk.jpg" alt="image" width="300" data-width="745" data-height="684" style="float: right"></p></blockquote><p>在屏幕空间，我们知道每个像素中心点的坐标是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>0.5</mn><mo separator="true">,</mo><mi>y</mi><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x + 0.5, y + 0.5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose">)</span></span></span></span> 。假设我们有下图所示的三角形，三角形覆盖范围与各个像素中心点的覆盖关系如右图所示。</p><p>标红的部分表示像素中心点在三角形内。从这里可以抽象出一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mi>n</mi><mi>s</mi><mi>i</mi><mi>d</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">inside</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span></span></span></span> 函数，在三角形里时返回1，否则返回0，对像素中心点进行采样的过程即一种离散采样的过程。<br>关于<strong>边界问题</strong>，如果一个像素的中心点正好在两个三角形的共边上怎么办？通常：</p><ul><li>一些图形学API（如OpenGL）严格规定了上边和左边上的点属于该三角形</li><li>不做处理</li><li>自己做一些特殊处理，比如插值等</li></ul><blockquote><p><strong>inside函数</strong><br>用inside函数来定义一个点是否在三角形里，那这个函数应该怎么实现呢？<br>嗯，当然是用叉乘判断点的位置啦。根据叉乘所得到的结果可以判断点在三角形某一边的左侧还是右侧，使用三条边依次进行叉乘判断，就能缺点点是否在三角形内了。</p></blockquote><h3 id="aabb法">AABB法</h3><p>呃，不会对每个三角形都要遍历整个屏幕空间吧？如果是真的，现在人们的烧烤方式可能是围在电脑旁。对于所有三角形，我们可以划分出对应的轴向包围盒(AABB)区域，例如下图的蓝色区域：</p><img src="https://tva2.sinaimg.cn/large/006UcwnJly1h5sdmkixpdj30lk0k2th9.jpg" alt="image" width="265" data-width="776" data-height="722"><p>那么显然，在遍历的时候只需要遍历包围盒内的点信息就好了。</p><h3 id="逐行遍历">逐行遍历</h3><p>AABB并不是最好的包围盒，因为当一些物体呈现狭长又旋转了的姿态时，AABB会框住大量无用的部分。对比球包围盒、AABB和OBB：</p><img src="https://tvax2.sinaimg.cn/large/006UcwnJly1h5sdxlt1a8j30dd069ab6.jpg" alt="image" width="321" data-width="481" data-height="225"><p>既然包围盒多少都会携带无用的空区域，我们为什么不直接考虑三角形本身来计算点呢？</p><img src="https://tvax1.sinaimg.cn/large/006UcwnJly1h5sdsq1dmdj30l90k5q8t.jpg" alt="image" width="265" data-width="765" data-height="725"><h1 id="抗锯齿">抗锯齿</h1><img src="https://tvax3.sinaimg.cn/large/006UcwnJly1h5seb4rf1oj30jq0ifjut.jpg" alt="image" width="250" data-width="710" data-height="663" style="float: right"><p>经过采样，给像素着色，我们得到了右图的三角形。</p><p>这显然不是我们想要的平滑三角形，而是一个锯齿严重到肉眼可见的怪兽。这表现在：由于空间上的采样率较低（覆盖的像素较少）而导致的信息缺失、走样，或者说失真。</p><blockquote><p><strong>常见的采样问题</strong></p><ul><li>一张好好的图片，经过压缩之后出现了莫名其妙的摩尔纹</li><li>锯齿边的问题<br>除了上面两种因为<strong>空间</strong>采样率不足的问题（摩尔纹是由于仅采样奇数行列或偶数行列的像素造成的）之外，还存在<strong>时域上</strong>的采样问题，例如：</li><li>盯着高速旋转的物体，感觉它在“倒转”<br>这是由于人眼的采样率跟不上信号（运动的物体）变化的速度造成的</li></ul></blockquote><p>我们知道图像其实也是一系列信号，为什么采样率跟不上信号变化速度就会出现“倒转”的问题呢？<br>通过傅里叶变换，任何一个信号函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 都可以被细分成傅里叶级数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>ω</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F({\omega})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span><span class="mclose">)</span></span></span></span> ，例如下图展示了级数的每一项：<br><img src="https://tvax1.sinaimg.cn/large/006UcwnJly1h5sgamqki3j311z0jj12x.jpg" alt="image" width="667" data-width="1367" data-height="703"></p><p>如果以上图中的时间间隔采样，到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mn>3</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f_{3}(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 时就已经难以通过采样点还原函数原本的样子了，想想香农定理：<br><img src="https://tva3.sinaimg.cn/large/006UcwnJly1h5sgjhtld0j308d038mxa.jpg" alt="image" width="100" data-width="301" data-height="116"><br>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">f_{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为最大频率，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">F_{s}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为采样频率。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mi>s</mi></msub><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">F_{s}/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord">2</span></span></span></span> 又被称作尼奎斯特频率。当不满足这个条件的时候就会出现错误的视觉效果（aliasing，也就是混叠）了。</p><h2 id="思路">思路</h2><h3 id="预模糊-滤波处理">预模糊/滤波处理</h3><img src="https://tva4.sinaimg.cn/large/006UcwnJly1h5tevlz5uwj30kh0dq0tw.jpg" alt="image" width="337" data-width="737" data-height="494"><h4 id="预模糊-blur"><strong>预模糊(Blur)</strong></h4><p>在处理有向距离场的锯齿边缘时找到一篇采用预模糊方法处理抗锯齿的不错的博客，可以参考一下：<br><a href="https://drewcassidy.me/2020/06/26/sdf-antialiasing/">https://drewcassidy.me/2020/06/26/sdf-antialiasing/</a><br><img src="https://tva3.sinaimg.cn/large/006UcwnJly1h5sfuindvbj30zj0bpjue.jpg" alt="image" width="679" data-width="1279" data-height="421"><br>在shaderlab中，可以使用 smoothstep 函数来柔化边缘以实现抗锯齿。<br>但模糊的本质是————</p><h4 id="滤波-filter"><strong>滤波(Filter)</strong></h4><p>滤波顾名思义就是过滤掉指定频段的波。以下是两种滤波器的介绍：</p><div style="display: inline-block; vertical-align: middle;">  <img src="https://tva3.sinaimg.cn/large/006UcwnJly1h5shlfn1b2j31100ibaga.jpg" alt="image" width="532" data-width="1332" data-height="659" style="display: inline-block; vertical-align: middle; float:right">高通滤波器，指的就是“通过高频段，过滤掉低频段”。右图的频谱图中心的黑圈显示了被过滤掉的低频部分。</div><div style="display: inline-block; vertical-align: middle;">  <img src="https://tvax3.sinaimg.cn/large/006UcwnJly1h5si0vt8csj310y0jywi8.jpg" alt="image" width="532" data-width="1332" data-height="659" style="display: inline-block; vertical-align: middle; float:right">低通滤波器，指的就是“通过低频段，过滤掉高频段”。右图的频谱只保留了中心被留下的部分低频段信息。</div><p>你有没有发现，<strong>高通滤波返回</strong>的结果往往是一些<strong>边界</strong>，<strong>低通滤波</strong>则<strong>返回了模糊</strong>？</p><p>这是因为边界界定了一种范围的“变化”，划分了两个或多个区域。这代表边界的信号变化更大，频率也更高。而在低通中，高频的“边界”被过滤，留下了模糊的图像。这可以应用在后处理、人脸磨皮中，例如针对高频的线进行拉伸抖动实现运动模糊。</p><p>通过设置过滤的频段，可以得到更多不同的效果：</p><img src="https://tvax1.sinaimg.cn/large/006UcwnJly1h5si7xhhdoj310w0i8gq6.jpg" alt="image" width="628" data-width="1328" data-height="656"><blockquote><p>在此基础上加上噪声向上扭曲，就可以制作出人“热的冒烟”的效果。有时间可以试试。</p></blockquote><p>滤波又和卷积有关。<strong>卷积</strong>是非常常用到的一个的概念，本质上是对一个信号、将相邻的信号与其做加权平均处理的一个过程。可以定义一个卷积核，对像素进行卷积处理，实际上也是一种滤波的形式。卷积让图像更匀称的被模糊，因为对每个像素的处理是一样的。在生成的频域图像里（如下图），可以明显发现图像被过滤了高频。</p><img src="https://tvax2.sinaimg.cn/large/006UcwnJly1h5tf38ih5gj310b0k1ahj.jpg" alt="image" width="807" data-width="1307" data-height="721"><blockquote><p>值得一提的是，将频域图添加到正常图像的a通道中，可以实现一种色图加密。这不难实现，但想想图片文件夹吧的吧主…</p></blockquote><h3 id="使用更好的设备">使用更好的设备</h3><img src="https://tvax4.sinaimg.cn/large/006UcwnJly1h5teukslgwj30jt0e2ab8.jpg" alt="RY1G`_{1LGVJFQI4%SX7ZAY" width="313" data-width="713" data-height="506">如果采用视网膜显示屏，像素更多，采样率更高，就越不会出现混叠问题<h2 id="几种常用方法">几种常用方法</h2><h3 id="saa-supersampling-aa">SAA (Supersampling AA)</h3><p>一般称作超采样，对单个像素进行超分采样，例如在下图的像素中再划分出4*4：<br><img src="https://tvax2.sinaimg.cn/large/006UcwnJly1h5tfugh1jsj30bq0ajjrk.jpg" alt="image" width="222" data-width="422" data-height="379"></p><p>MSAA的计算可以用这样表示：<br><img src="https://tvax4.sinaimg.cn/large/006UcwnJly1h5tfy0ayjjj30g40f4778.jpg" alt="image" width="200" data-width="580" data-height="544" style="display: inline"><img src="https://tva2.sinaimg.cn/large/006UcwnJly1h5tfz4f46ij30g80f10uh.jpg" alt="image" width="200" data-width="584" data-height="541" style="display: inline"><img src="https://tvax4.sinaimg.cn/large/006UcwnJly1h5tg125svbj30g80be763.jpg" alt="image" width="200" data-width="584" data-height="410" style="display: inline"></p><p>MSAA的缺点也很明显，那就是过多的细分会导致计算量急剧增加，而且抗锯齿的效果也一般般。提升效果的方法可以是不规则划分细分采样的分布，例如采用随机数。</p><h3 id="fxaa-fast-approximate-aa">FXAA (Fast Approximate AA)</h3><p>快速近似抗锯齿的方法，实现原理与采样无关，而是聚焦于后处理，是最有效的抗锯齿方法之一。<br>在获得了有锯齿的图像之后，FXAA在后处理中识别到这些包含锯齿的边缘，再修复替换成没有锯齿的边。可以在Unity资源商店里找到：<br><img src="https://tvax1.sinaimg.cn/large/006UcwnJly1h5th359hdej317f0kr4lu.jpg" alt="image" width="863" data-width="1563" data-height="747"></p><p>Unity的Post-Processing模块也包含了FXAA，根据FXAA模型的不同可以获得不同的效果（例如，小模型更快但效果更差，适合移动端）。详细可以参考：<a href="https://docs.unity3d.com/Packages/com.unity.postprocessing@2.1/manual/Anti-aliasing.html">https://docs.unity3d.com/Packages/com.unity.postprocessing@2.1/manual/Anti-aliasing.html</a></p><ul><li>快速高效</li><li>不同模型适合不同平台</li></ul><h3 id="msaa-subpixel-morphological-aa">MSAA (Subpixel Morphological AA)</h3><p>子像素形态学抗锯齿。SMAA是一种比FXAA更高质量的抗锯齿效果，但相应的它的处理速度也比较慢。SMAA同样也是基于后处理的抗锯齿方法，可以在Unity的Post-Processing模块找到。</p><ul><li>不支持AR/VR</li><li>不适合移动端</li></ul><h3 id="taa-temporal-aa">TAA (Temporal AA)</h3><p>一篇不错的博客：<a href="https://www.sardinefish.com/blog/444">https://www.sardinefish.com/blog/444</a><br>时间性抗锯齿。TAA是一种先进的抗锯齿技术，它也是前文所提到的几种抗锯齿技术中开销最高的。TAA允许帧随着时间的推移积累到历史缓冲区中，以便更有效地平滑边缘。它在平滑运动中的边缘方面有很大的优势，但需要运动矢量，是桌面和控制台平台的理想选择。TAA也是一种基于后处理的抗锯齿方法，可以在Unity的Post-Processing模块找到。</p><ul><li>不支持OpenGL ES2</li><li>需要深度纹理和运动向量</li><li>开销大</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> Unity Shader </tag>
            
            <tag> 计算机图形学 </tag>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>§1-3：坐标空间与MVP矩阵变换</title>
      <link href="/2021/07/16/%C2%A71-3%EF%BC%9A%E5%9D%90%E6%A0%87%E7%A9%BA%E9%97%B4%E4%B8%8EMVP%E7%9F%A9%E9%98%B5%E5%8F%98%E6%8D%A2/"/>
      <url>/2021/07/16/%C2%A71-3%EF%BC%9A%E5%9D%90%E6%A0%87%E7%A9%BA%E9%97%B4%E4%B8%8EMVP%E7%9F%A9%E9%98%B5%E5%8F%98%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><center><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210924154412.png" width="800px/"><p>从观察者的观察空间投影到屏幕空间</p></center><p>  什么是MVP矩阵？MVP矩阵的三个字母指的是模型矩阵(Model)、观察矩阵(View)和投影矩阵(Projection)。回想一个模型从导出到最终呈现在屏幕上的过程，我们发现模型的顶点的坐标经历了这么些事：</p><ul><li>在建模软件中，模型顶点的坐标是以模型中心为原点计算的</li><li>在把模型拖入场景之后，模型顶点的坐标是以世界中心为原点计算的</li><li>从摄像机出发观察模型</li><li>将模型投影到摄像机上，进行渲染，最终呈现在玩家眼前</li></ul><p>  实际上，这个变换就是使用了MVP矩阵。从模型空间的顶点，我们最终得到了投影在相机上的结果。再想想写shader的时候，顶点着色器往往包含以下语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v2f o;                                  // 传输到片元着色器</span><br><span class="line">o.pos = UnityObjectToClipPos(v.vertex); // 将顶点坐标从模型空间(Object)转换到裁剪空间(Clip)</span><br></pre></td></tr></table></figure><p>  我们知道，顶点着色器最基本的功能就是将顶点坐标从模型空间转换到裁剪空间。这里的UnityObjectToClipPos函数的作用即将顶点坐标乘上MVP矩阵进行变化，实现了一个物体从自己的模型空间(也成为局部空间/Local Space)经过模型矩阵(M)，转换到世界空间(World Space)；再经过观察矩阵(V)，进入到摄像机所观察到的视觉空间(View Space)；最后通过投影矩阵转换到裁剪空间(Clip Space)的过程。</p><h1 id="模型空间-世界空间">模型空间—&gt;世界空间</h1><p>  模型空间就是在建模的时候以模型自身中心为中心的坐标系；世界空间指的是以世界中心为中心的坐标系。<br>  感觉好像对模型空间很生疏？实际上，当一个物体有子对象的时候，父物体的坐标是世界空间下的坐标，而子物体的坐标其实就是模型空间下的。举个例子，现在我们的地图中有一个电脑作为父物体，而显示器、键盘都是子物体。当我们聚焦整个父物体时，我们发现它的Transform组件下的坐标就是世界空间下的坐标:<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210926155901.png" width="200/"><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210926160002.png" width="310/"><br>  而当我们聚焦电脑下的组件（比如键盘）时，Transform组件显示的坐标就是整个电脑模型空间下的坐标：<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210926160252.png" width="200/"><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210926160322.png" width="310/"></p><p>  再比如说，我们在处理模型的时候经常会遇到上(Vector3.up)、左(Vector3.left)、前(Vector3.forward)等方向性的概念，而萌新使用这些概念的时候往往无法得到正确的结果，比如我们希望这个模型通过Vector3.up明确方向实现向上移动，但是它怎么朝着莫名其妙的方向动了呢？这是因为搞混了模型空间和世界空间。Unity脚本API中对Vector3.up的描述是：用于编写 Vector3(0, 1, 0)的简便方法。然而这里的(0, 1, 0)是对物体的模型空间而言的，而不是世界空间。举个例子：</p><p>// 请在这里插入手绘示意图</p><p>  这就是出错的原因了。我们提到的上下左右前后几种方向被称为“自然方向”，由于Unity使用左手系的缘故，这些方向和坐标轴的对应关系为：</p><ul><li>+x —&gt; 右/right</li><li>+y —&gt; 上/up</li><li>+z —&gt; 前/forward</li></ul><h2 id="模型矩阵m">模型矩阵M</h2><p>  那么，我们该如何将点/向量从模型空间转换到世界空间呢？回想一下刚刚我们提到的父对象的Transform坐标！<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210926160002.png" width="310/"><br>  父对象的Transform的坐标指的就是这个模型原点在世界空间下的坐标，从(0, 0, 0)变成(-2.918, -3.026, 0.091)了呢，还有旋转变换和缩放变换。实际上，我们需要的就是一个矩阵的复合变换来实现这个过程。变换方式如下(顺序不能改)：</p><ul><li>进行缩放</li><li>进行旋转（绕各轴旋转的顺序可以打乱，比如说我下面写的是先转z然后y然后x）</li><li>进行平移</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>x</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>y</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>z</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><msub><mi>θ</mi><mi>x</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><msub><mi>θ</mi><mi>x</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><msub><mi>θ</mi><mi>x</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><msub><mi>θ</mi><mi>x</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><msub><mi>θ</mi><mi>y</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><msub><mi>θ</mi><mi>y</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><msub><mi>θ</mi><mi>y</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><msub><mi>θ</mi><mi>y</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><msub><mi>θ</mi><mi>z</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><msub><mi>θ</mi><mi>z</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><msub><mi>θ</mi><mi>z</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><msub><mi>θ</mi><mi>z</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>k</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>k</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>k</mi><mi>z</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">M = \begin{pmatrix}   1         &amp; 0        &amp; 0        &amp; t_{x} \\   0         &amp; 1        &amp; 0        &amp; t_{y} \\   0         &amp; 0        &amp; 1        &amp; t_{z} \\   0         &amp; 0        &amp; 0        &amp; 1\end{pmatrix}  \begin{pmatrix}   1         &amp; 0              &amp; 0             &amp; 0 \\   0         &amp; cos\theta_{x}  &amp; -sin\theta_{x}&amp; 0 \\   0         &amp; sin\theta_{x}  &amp; cos\theta_{x} &amp; 0 \\   0         &amp; 0              &amp; 0             &amp; 1\end{pmatrix}  \begin{pmatrix}   cos\theta_{y}  &amp; 0        &amp; sin\theta_{y}  &amp; 0 \\   0              &amp; 1        &amp; 0              &amp; 0 \\   -sin\theta_{y} &amp; 0        &amp; cos\theta_{y}  &amp; 0 \\   0              &amp; 0        &amp; 0              &amp; 1\end{pmatrix}  \begin{pmatrix}   cos\theta_{z}  &amp; -sin\theta_{z}  &amp; 0       &amp; 0 \\   sin\theta_{z}  &amp; cos\theta_{z}   &amp; 0       &amp; 0 \\   0              &amp; 0               &amp; 1       &amp; 0 \\   0              &amp; 0               &amp; 0       &amp; 1\end{pmatrix}  \begin{pmatrix}   k_{x}     &amp; 0        &amp; 0        &amp; 0 \\   0         &amp; k_{y}    &amp; 0        &amp; 0 \\   0         &amp; 0        &amp; k_{z}    &amp; 0 \\   0         &amp; 0        &amp; 0        &amp; 1\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>代入数据得：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>2.918</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>3.026</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0.091</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mn>44.003</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>sin</mi><mo>⁡</mo><mn>44.003</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mn>44.003</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mn>44.003</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mn>85.543</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mn>85.543</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>sin</mi><mo>⁡</mo><mn>85.543</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mn>85.543</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mrow><mo>−</mo><mn>94.927</mn></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>sin</mi><mo>⁡</mo><mrow><mo>−</mo><mn>94.927</mn></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mrow><mo>−</mo><mn>94.927</mn></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mrow><mo>−</mo><mn>94.927</mn></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1.8</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1.8</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1.8</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">M = \begin{pmatrix}   1         &amp; 0        &amp; 0        &amp; -2.918 \\   0         &amp; 1        &amp; 0        &amp; -3.026 \\   0         &amp; 0        &amp; 1        &amp; 0.091 \\   0         &amp; 0        &amp; 0        &amp; 1\end{pmatrix}  \begin{pmatrix}   1         &amp; 0              &amp; 0             &amp; 0 \\   0         &amp; \cos{44.003}  &amp; -\sin{44.003}&amp; 0 \\   0         &amp; \sin{44.003}  &amp; \cos{44.003} &amp; 0 \\   0         &amp; 0              &amp; 0             &amp; 1\end{pmatrix}  \begin{pmatrix}   \cos{85.543}  &amp; 0        &amp; \sin{85.543}  &amp; 0 \\   0              &amp; 1        &amp; 0              &amp; 0 \\   -\sin{85.543} &amp; 0        &amp; \cos{85.543}  &amp; 0 \\   0              &amp; 0        &amp; 0              &amp; 1\end{pmatrix}  \begin{pmatrix}   \cos{-94.927}  &amp; -\sin{-94.927}  &amp; 0       &amp; 0 \\   \sin{-94.927}  &amp; \cos{-94.927}   &amp; 0       &amp; 0 \\   0              &amp; 0               &amp; 1       &amp; 0 \\   0              &amp; 0               &amp; 0       &amp; 1\end{pmatrix}  \begin{pmatrix}   1.8     &amp; 0        &amp; 0        &amp; 0 \\   0         &amp; 1.8    &amp; 0        &amp; 0 \\   0         &amp; 0        &amp; 1.8    &amp; 0 \\   0         &amp; 0        &amp; 0        &amp; 1\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">2</span><span class="mord">.</span><span class="mord">9</span><span class="mord">1</span><span class="mord">8</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">3</span><span class="mord">.</span><span class="mord">0</span><span class="mord">2</span><span class="mord">6</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">9</span><span class="mord">1</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">4</span><span class="mord">4</span><span class="mord">.</span><span class="mord">0</span><span class="mord">0</span><span class="mord">3</span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">4</span><span class="mord">4</span><span class="mord">.</span><span class="mord">0</span><span class="mord">0</span><span class="mord">3</span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">4</span><span class="mord">4</span><span class="mord">.</span><span class="mord">0</span><span class="mord">0</span><span class="mord">3</span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">4</span><span class="mord">4</span><span class="mord">.</span><span class="mord">0</span><span class="mord">0</span><span class="mord">3</span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">8</span><span class="mord">5</span><span class="mord">.</span><span class="mord">5</span><span class="mord">4</span><span class="mord">3</span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">8</span><span class="mord">5</span><span class="mord">.</span><span class="mord">5</span><span class="mord">4</span><span class="mord">3</span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">8</span><span class="mord">5</span><span class="mord">.</span><span class="mord">5</span><span class="mord">4</span><span class="mord">3</span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">8</span><span class="mord">5</span><span class="mord">.</span><span class="mord">5</span><span class="mord">4</span><span class="mord">3</span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">−</span><span class="mord">9</span><span class="mord">4</span><span class="mord">.</span><span class="mord">9</span><span class="mord">2</span><span class="mord">7</span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">−</span><span class="mord">9</span><span class="mord">4</span><span class="mord">.</span><span class="mord">9</span><span class="mord">2</span><span class="mord">7</span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">−</span><span class="mord">9</span><span class="mord">4</span><span class="mord">.</span><span class="mord">9</span><span class="mord">2</span><span class="mord">7</span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">−</span><span class="mord">9</span><span class="mord">4</span><span class="mord">.</span><span class="mord">9</span><span class="mord">2</span><span class="mord">7</span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">.</span><span class="mord">8</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">.</span><span class="mord">8</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">.</span><span class="mord">8</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>  具体结果是什么我就不算了，这庞大的计算量。。。总之，在计算的最后我们会得到一个4*4矩阵，这就是针对该模型的模型矩阵 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span> 。利用这个矩阵，我们现在可以求得子物体Transform坐标（模型空间坐标）的世界空间坐标了！<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210926160322.png" width="310/"><br>  将键盘的模型坐标<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>0.005815</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0.0167358</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0.1960645</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\begin{pmatrix}-0.005815\\0.0167358\\0.1960645\\1\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">0</span><span class="mord">5</span><span class="mord">8</span><span class="mord">1</span><span class="mord">5</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">1</span><span class="mord">6</span><span class="mord">7</span><span class="mord">3</span><span class="mord">5</span><span class="mord">8</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord">9</span><span class="mord">6</span><span class="mord">0</span><span class="mord">6</span><span class="mord">4</span><span class="mord">5</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span>乘上刚刚算好的模型矩阵M，我们就能得到就能得到键盘的世界坐标。</p><h1 id="世界空间-观察空间">世界空间—&gt;观察空间</h1><p>  观察空间就是以摄像机为中心的坐标系。我们可以认为观察空间也是模型空间的一种，<strong>想象一下所有被观察的物体都是相机的子物体</strong>，那么我们要做的就是某种意义上的“从世界坐标重新转换成模型坐标”的过程。这不是恰好和刚刚进行的“从模型空间坐标转换成世界空间坐标”的操作正好反过来了吗？<br>  没错！从模型空间到世界空间，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span> 矩阵的操作是先缩放、旋转，最后平移。那么反过来的过程就应该是<strong>先平移再旋转</strong>。由于缩放对相机视野并不产生影响，所以我们不考虑缩放的选项。不过到这里还没有结束，我们还<strong>需要对z轴进行逆变换，因为观察空间是右手系</strong>（也是几个坐标空间中唯一的右手系），而世界空间是左手系。为什么呢？因为我们希望相机的前方是z轴的负方向，这样一来观察空间中每个能够进入摄像机视野的物体的z值都是正数，并且表示了该物体和摄像机的距离。<br>  为什么非要搞这一出呢？在接下来的学习中我们会接触到<strong>深度值</strong>的概念。在对每个物体进行渲染之前，我们会将物体片元的深度值写入深度缓冲中（关闭深度写入另谈）。当同一个位置上出现多个片元时，我们会只渲染深度值最小的那个片元。当z值（深度）都是正值时，我们能够对数据更直观的分析。</p><blockquote><p><strong>另一种思考模式</strong><br>  我们可以想象将摄像机移动到世界中心，再将相机的坐标轴与世界空间的坐标轴对齐。这样处理之后得到的观察矩阵和前文提到的相同。<br>  相机从世界中心原点移动到它所在的位置，是先平移，再旋转的。那么移动回来，就需要先旋转，再平移。<br>  因为是反向平移，所以移动的矩阵和原本坐标符号相反</p></blockquote><h2 id="观察矩阵v">观察矩阵V</h2><p>  以这个摄像机为例：<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210926171746.png" width="190/"><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210926171828.png" width="441/"></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><msub><mi>θ</mi><mi>x</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><msub><mi>θ</mi><mi>x</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><msub><mi>θ</mi><mi>x</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><msub><mi>θ</mi><mi>x</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><msub><mi>θ</mi><mi>y</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><msub><mi>θ</mi><mi>y</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><msub><mi>θ</mi><mi>y</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><msub><mi>θ</mi><mi>y</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><msub><mi>θ</mi><mi>z</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><msub><mi>θ</mi><mi>z</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><msub><mi>θ</mi><mi>z</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><msub><mi>θ</mi><mi>z</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>x</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>y</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>z</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">V = \begin{pmatrix}   1         &amp; 0      &amp; 0     &amp; 0 \\   0         &amp; 1      &amp; 0     &amp; 0 \\   0         &amp; 0      &amp; -1    &amp; 0 \\   0         &amp; 0      &amp; 0     &amp; 1\end{pmatrix}\begin{pmatrix}   1         &amp; 0              &amp; 0             &amp; 0 \\   0         &amp; cos\theta_{x}  &amp; -sin\theta_{x}&amp; 0 \\   0         &amp; sin\theta_{x}  &amp; cos\theta_{x} &amp; 0 \\   0         &amp; 0              &amp; 0             &amp; 1\end{pmatrix}  \begin{pmatrix}   cos\theta_{y}  &amp; 0        &amp; sin\theta_{y}  &amp; 0 \\   0              &amp; 1        &amp; 0              &amp; 0 \\   -sin\theta_{y} &amp; 0        &amp; cos\theta_{y}  &amp; 0 \\   0              &amp; 0        &amp; 0              &amp; 1\end{pmatrix}  \begin{pmatrix}   cos\theta_{z}  &amp; -sin\theta_{z}  &amp; 0       &amp; 0 \\   sin\theta_{z}  &amp; cos\theta_{z}   &amp; 0       &amp; 0 \\   0              &amp; 0               &amp; 1       &amp; 0 \\   0              &amp; 0               &amp; 0       &amp; 1\end{pmatrix}  \begin{pmatrix}   1         &amp; 0        &amp; 0        &amp; t_{x} \\   0         &amp; 1        &amp; 0        &amp; t_{y} \\   0         &amp; 0        &amp; 1        &amp; t_{z} \\   0         &amp; 0        &amp; 0        &amp; 1\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>代入数据得:</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mrow><mo>−</mo><mn>29.049</mn></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>sin</mi><mo>⁡</mo><mrow><mo>−</mo><mn>29.049</mn></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mrow><mo>−</mo><mn>29.049</mn></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mrow><mo>−</mo><mn>29.049</mn></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mrow><mo>−</mo><mn>24.138</mn></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mrow><mo>−</mo><mn>24.138</mn></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>sin</mi><mo>⁡</mo><mrow><mo>−</mo><mn>24.138</mn></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mrow><mo>−</mo><mn>24.138</mn></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mn>23.288</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>sin</mi><mo>⁡</mo><mn>23.288</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mn>23.288</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mn>23.288</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>5.24</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4.19</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>8.29</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">V = \begin{pmatrix}   1         &amp; 0      &amp; 0     &amp; 0 \\   0         &amp; 1      &amp; 0     &amp; 0 \\   0         &amp; 0      &amp; -1    &amp; 0 \\   0         &amp; 0      &amp; 0     &amp; 1\end{pmatrix}\begin{pmatrix}   1         &amp; 0              &amp; 0             &amp; 0 \\   0         &amp; \cos{-29.049}  &amp; -\sin{-29.049}&amp; 0 \\   0         &amp; \sin{-29.049}  &amp; \cos{-29.049} &amp; 0 \\   0         &amp; 0              &amp; 0             &amp; 1\end{pmatrix}  \begin{pmatrix}   \cos{-24.138}  &amp; 0        &amp; \sin{-24.138}  &amp; 0 \\   0              &amp; 1        &amp; 0              &amp; 0 \\   -\sin{-24.138} &amp; 0        &amp; \cos{-24.138}  &amp; 0 \\   0              &amp; 0        &amp; 0              &amp; 1\end{pmatrix}  \begin{pmatrix}   \cos{23.288}  &amp; -\sin{23.288}  &amp; 0       &amp; 0 \\   \sin{23.288}  &amp; \cos{23.288}   &amp; 0       &amp; 0 \\   0              &amp; 0               &amp; 1       &amp; 0 \\   0              &amp; 0               &amp; 0       &amp; 1\end{pmatrix}  \begin{pmatrix}   1         &amp; 0        &amp; 0        &amp; -5.24 \\   0         &amp; 1        &amp; 0        &amp; 4.19 \\   0         &amp; 0        &amp; 1        &amp; 8.29 \\   0         &amp; 0        &amp; 0        &amp; 1\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">−</span><span class="mord">2</span><span class="mord">9</span><span class="mord">.</span><span class="mord">0</span><span class="mord">4</span><span class="mord">9</span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">−</span><span class="mord">2</span><span class="mord">9</span><span class="mord">.</span><span class="mord">0</span><span class="mord">4</span><span class="mord">9</span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">−</span><span class="mord">2</span><span class="mord">9</span><span class="mord">.</span><span class="mord">0</span><span class="mord">4</span><span class="mord">9</span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">−</span><span class="mord">2</span><span class="mord">9</span><span class="mord">.</span><span class="mord">0</span><span class="mord">4</span><span class="mord">9</span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">−</span><span class="mord">2</span><span class="mord">4</span><span class="mord">.</span><span class="mord">1</span><span class="mord">3</span><span class="mord">8</span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">−</span><span class="mord">2</span><span class="mord">4</span><span class="mord">.</span><span class="mord">1</span><span class="mord">3</span><span class="mord">8</span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">−</span><span class="mord">2</span><span class="mord">4</span><span class="mord">.</span><span class="mord">1</span><span class="mord">3</span><span class="mord">8</span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">−</span><span class="mord">2</span><span class="mord">4</span><span class="mord">.</span><span class="mord">1</span><span class="mord">3</span><span class="mord">8</span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="mord">3</span><span class="mord">.</span><span class="mord">2</span><span class="mord">8</span><span class="mord">8</span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="mord">3</span><span class="mord">.</span><span class="mord">2</span><span class="mord">8</span><span class="mord">8</span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="mord">3</span><span class="mord">.</span><span class="mord">2</span><span class="mord">8</span><span class="mord">8</span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="mord">3</span><span class="mord">.</span><span class="mord">2</span><span class="mord">8</span><span class="mord">8</span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">5</span><span class="mord">.</span><span class="mord">2</span><span class="mord">4</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span><span class="mord">.</span><span class="mord">1</span><span class="mord">9</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span><span class="mord">.</span><span class="mord">2</span><span class="mord">9</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>  同样，由于计算太过繁琐，我用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span></span> 来指代运算的结果，这是个4*4的矩阵。将物体的世界坐标乘以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span></span> 就可以得到观察空间下的坐标。</p><h1 id="观察空间-裁剪空间">观察空间—&gt;裁剪空间</h1><p>  这一步<strong>并不是真正的投影(三维的游戏物体投影到屏幕的二维坐标)，只是为投影做准备</strong>。真正的投影发生在屏幕映射的齐次除法中。裁剪空间的主要目的是判断顶点是否在可见范围内（利用w分量划定了范围，实际上就是视锥体的范围）。当一个物体部分满足范围时，它将被<strong>裁剪</strong>；而当一个物体完全不满足范围时，它将被<strong>剔除</strong>。</p><h2 id="视锥体">视锥体</h2><p>  什么是视锥体？使用过unity相机，或者其他建模软件中的相机的人，在gizmos模式下点击相机的时候都能看到金字塔一样的线框（下左），或者长方形一样的线框（下右）：<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210928213302.png" width="300/"><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210928213535.png" width="365/"><br>  其中，左图的金字塔结构就是<strong>透视投影</strong>下的视锥体，而右图是<strong>正交投影</strong>下的视锥体。二者的区别在于是否产生透视的效果，前者能够带来近大远小的物理上的真实感，而后者则没有这种效果，不论远近所有物体看起来都没有形变。啊哈，这不是某种程度上意味着透视适合3D，而正交适合2D吗？确实，这也是为什么我们创建一个新项目时，2D项目的相机默认是正交投影而3D项目默认是透视投影的原因。<br>  首先，我们来了解一下视锥体的几个基本参数！</p><p>// 插入手绘示意图</p><p>  除了上面标注出来的视场(FoV)、近裁平面高度(nearClipPlaneHeight)、远裁平面高度(farClipPlaneHeight)、近裁面距离(Near)、远裁面距离(Far)之外，我们要怎么知道宽度信息呢？比如说近裁平面宽度什么的，但是我们的横截面只能告诉我们高度信息。为了解决这个问题，我们引入了一个新的量叫做横纵比(Aspect，顾名思义是横和纵的比值)：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo>=</mo><mfrac><mrow><mi>n</mi><mi>e</mi><mi>a</mi><mi>r</mi><mi>C</mi><mi>l</mi><mi>i</mi><mi>p</mi><mi>P</mi><mi>l</mi><mi>a</mi><mi>n</mi><mi>e</mi><mi>W</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi></mrow><mrow><mi>n</mi><mi>e</mi><mi>a</mi><mi>r</mi><mi>C</mi><mi>l</mi><mi>i</mi><mi>p</mi><mi>P</mi><mi>l</mi><mi>a</mi><mi>n</mi><mi>e</mi><mi>H</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">Aspect = \frac{nearClipPlaneWidth}{nearClipPlaneHeight}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">s</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo>=</mo><mfrac><mrow><mi>f</mi><mi>a</mi><mi>r</mi><mi>C</mi><mi>l</mi><mi>i</mi><mi>p</mi><mi>P</mi><mi>l</mi><mi>a</mi><mi>n</mi><mi>e</mi><mi>W</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi></mrow><mrow><mi>f</mi><mi>a</mi><mi>r</mi><mi>C</mi><mi>l</mi><mi>i</mi><mi>p</mi><mi>P</mi><mi>l</mi><mi>a</mi><mi>n</mi><mi>e</mi><mi>H</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">Aspect = \frac{farClipPlaneWidth}{farClipPlaneHeight}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">s</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h2 id="投影矩阵">投影矩阵</h2><h3 id="透视投影">透视投影</h3><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210928215534.png" width="400/"><p>  通过上述的参数（我们可以直接在Unity中设置，如上图）以及Camera.aspect更改/获取的横纵比，我们可以推导出以下投影矩阵 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><msub><mo><mi>cot</mi><mo>⁡</mo></mo><mfrac><mrow><mi>F</mi><mi>O</mi><mi>V</mi></mrow><mn>2</mn></mfrac></msub><mrow><mi>A</mi><mi>s</mi><mi>c</mi><mi>e</mi><mi>p</mi><mi>t</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mo><mi>cot</mi><mo>⁡</mo></mo><mfrac><mrow><mi>F</mi><mi>O</mi><mi>V</mi></mrow><mn>2</mn></mfrac></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mrow><mi>F</mi><mi>a</mi><mi>r</mi><mo>+</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi></mrow><mrow><mi>F</mi><mi>a</mi><mi>r</mi><mo>−</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi></mrow></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mrow><mn>2</mn><mo>⋅</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi><mo>⋅</mo><mi>F</mi><mi>a</mi><mi>r</mi></mrow><mrow><mi>F</mi><mi>a</mi><mi>r</mi><mo>−</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">P = \begin{pmatrix}   \frac{\cot_{\frac{FOV}{2}}}{Ascept}    &amp; 0                       &amp; 0                                 &amp; 0 \\   0                                      &amp; \cot_{\frac{FOV}{2}}    &amp; 0                                 &amp; 0 \\   0                                      &amp; 0                       &amp; -\frac{Far + Near}{Far - Near}    &amp; -\frac{2 \cdot Near \cdot Far}{Far - Near} \\   0                                      &amp; 0                       &amp; -1                                &amp; 0\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:5.603596000000001em;vertical-align:-2.5517980000000007em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.950035em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.4999950000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.0950050000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.6900150000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.7100150000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.950035000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.0517980000000002em;"><span style="top:-5.051798em;"><span class="pstrut" style="height:3.3003609999999997em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3003609999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">A</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.869805em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop mtight"><span class="mtight">c</span><span class="mtight">o</span><span class="mtight">t</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448000000000001em;"><span style="top:-2.5802785714285714em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size1 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.07033em;"><span style="top:-2.468em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.387em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.532em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size1 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7997214285714286em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.7306899999999996em;"><span class="pstrut" style="height:3.3003609999999997em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.351893999999999em;"><span class="pstrut" style="height:3.3003609999999997em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.108562999999999em;"><span class="pstrut" style="height:3.3003609999999997em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.5517980000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.0517980000000002em;"><span style="top:-5.051798em;"><span class="pstrut" style="height:3.3003609999999997em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.7306899999999996em;"><span class="pstrut" style="height:3.3003609999999997em;"></span><span class="mord"><span class="mop"><span class="mop">cot</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.734335em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8720928571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5064649999999999em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.351893999999999em;"><span class="pstrut" style="height:3.3003609999999997em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.108562999999999em;"><span class="pstrut" style="height:3.3003609999999997em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.5517980000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.0517980000000002em;"><span style="top:-5.051798em;"><span class="pstrut" style="height:3.3003609999999997em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.7306899999999996em;"><span class="pstrut" style="height:3.3003609999999997em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.351893999999999em;"><span class="pstrut" style="height:3.3003609999999997em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.108562999999999em;"><span class="pstrut" style="height:3.3003609999999997em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.5517980000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.0517980000000002em;"><span style="top:-5.051798em;"><span class="pstrut" style="height:3.3003609999999997em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.7306899999999996em;"><span class="pstrut" style="height:3.3003609999999997em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.351893999999999em;"><span class="pstrut" style="height:3.3003609999999997em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.108562999999999em;"><span class="pstrut" style="height:3.3003609999999997em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.5517980000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.950035em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.4999950000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.0950050000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.6900150000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.7100150000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.950035000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>  这是一个恒定的公式，将投影矩阵乘上点/向量的观察空间坐标之后我们得到了裁剪空间坐标，现在我们要开始判断这个东西应不应该被剔除了。</p><blockquote><p><strong>透视投影的投影矩阵推导</strong><br>  把远裁平面挤压成和近裁平面一样大的程度，这时候我们得到了一个正交投影一样的视锥体。现在，我们只需要进行正交投影的投影矩阵计算就好了。<br>  说的很简单，那么怎么进行挤压的操作呢？从截面来看，我们可以找到一对相似三角形，通过相似三角形的定义，我们能够得到变化后y与变化前y的关系，x也是一样的（n/z）<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210929205101.png" width="400/"><br>  关于正交投影的投影矩阵推导，在下面会提。</p></blockquote><p>  计算完成后，我们得到了结果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>w</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\begin{pmatrix}x\\y\\z\\w\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span>。当三个分量x、y、z的范围都在±w范围内时，我们认为该点位于裁剪空间内，即：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mi>w</mi><mo>⩽</mo><mi>x</mi><mo>⩽</mo><mi>w</mi></mrow><annotation encoding="application/x-tex">-w \leqslant x \leqslant w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mi>w</mi><mo>⩽</mo><mi>y</mi><mo>⩽</mo><mi>w</mi></mrow><annotation encoding="application/x-tex">-w \leqslant y \leqslant w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83111em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mi>w</mi><mo>⩽</mo><mi>z</mi><mo>⩽</mo><mi>w</mi></mrow><annotation encoding="application/x-tex">-w \leqslant z \leqslant w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span></span></p><h3 id="正交投影">正交投影</h3><p>  我们知道，正交投影常用于2D游戏，因为不论远近同一个物体看起来都是一样大的。同样的，我们可以在检查器中调整视锥体的相关参数。<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210928221640.png" width="400/"></p><p>  因为正交投影的近裁面和远裁面大小一致，所以我们不再有近裁平面高度这样的参数，而是用Size代替。Size的大小为原本近裁平面高度的一半。正交投影的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span> 矩阵如下：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mrow><mi>A</mi><mi>s</mi><mi>c</mi><mi>e</mi><mi>p</mi><mi>t</mi><mo>⋅</mo><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mrow><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mn>2</mn><mrow><mi>F</mi><mi>a</mi><mi>r</mi><mo>−</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi></mrow></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mrow><mi>F</mi><mi>a</mi><mi>r</mi><mo>+</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi></mrow><mrow><mi>F</mi><mi>a</mi><mi>r</mi><mo>−</mo><mi>N</mi><mi>e</mi><mi>a</mi><mi>r</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">P = \begin{pmatrix}   \frac{1}{Ascept \cdot Size}    &amp; 0                 &amp; 0                        &amp; 0 \\   0                              &amp; \frac{1}{Size}    &amp; 0                        &amp; 0 \\   0                              &amp; 0                 &amp; -\frac{2}{Far - Near}    &amp; -\frac{Far + Near}{Far - Near} \\   0                              &amp; 0                 &amp; 0                        &amp; 1\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:5.006986em;vertical-align:-2.253493em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.753493em;"><span style="top:-4.908385em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">A</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">t</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mord mathdefault mtight">e</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.5821689999999995em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.349838em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.106507em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.253493em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.753493em;"><span style="top:-4.908385em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.5821689999999995em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mord mathdefault mtight">e</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.349838em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.106507em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.253493em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.753493em;"><span style="top:-4.908385em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.5821689999999995em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.349838em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.106507em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.253493em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.753493em;"><span style="top:-4.908385em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.5821689999999995em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.349838em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.106507em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.253493em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><blockquote><p><strong>正交投影的投影矩阵推导</strong><br>  正交投影的过程是将正方体/长方体形状的裁剪空间投影成正则（标准）正方体，并且是以屏幕中心为原点的。简单来说，我们将空间整体<strong>先平移到原点再缩放</strong>，乘完的结果就是正交投影的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span> 矩阵。<br>  我们知道Size、Ascept、Near和Far，所以我们已经知道了视锥体八个顶点的位置信息。由此：<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210929202835.png" width="400/"><br>  请注意我们缩放到了2，这是因为从-1到1一共长度是2.</p></blockquote><p>  计算完成后，我们得到了结果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>w</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\begin{pmatrix}x\\y\\z\\w\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span>。同样的，当三个分量x、y、z的范围都在±w范围内时，我们认为该点位于裁剪空间内，即：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mi>w</mi><mo>⩽</mo><mi>x</mi><mo>⩽</mo><mi>w</mi></mrow><annotation encoding="application/x-tex">-w \leqslant x \leqslant w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mi>w</mi><mo>⩽</mo><mi>y</mi><mo>⩽</mo><mi>w</mi></mrow><annotation encoding="application/x-tex">-w \leqslant y \leqslant w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83111em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mi>w</mi><mo>⩽</mo><mi>z</mi><mo>⩽</mo><mi>w</mi></mrow><annotation encoding="application/x-tex">-w \leqslant z \leqslant w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span></span></p><h1 id="裁剪空间-屏幕空间">裁剪空间—&gt;屏幕空间</h1><p>  已经经过MVP矩阵的变换了，现在离屏幕已经非常近了。处于裁剪空间中的物体依然是三维的（位于视锥体内），现在我们需要使用<strong>齐次除法</strong>(Homogeneous Devision)将视锥体变成一个正方体。<br>  什么是齐次除法？这个名字听起来仿佛深渊沼泽里的骇人美人鱼。实际上这个降维投影的操作非常简单，只需要对物体的x、y、z分量分别除以w，即投影后物体的坐标为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mi>x</mi><mi>w</mi></mfrac></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mi>y</mi><mi>w</mi></mfrac></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mi>z</mi><mi>w</mi></mfrac></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\begin{pmatrix}\frac{x}{w}  \\                 \frac{y}{w}  \\                 \frac{z}{w}\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8100000000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7475em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8100000000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>  最后，进行屏幕映射（pixelWidth即像素宽度，指的是屏幕分辨率中的宽。我们也可以通过Unity设置分辨率来实现不同分辨率下的屏幕映射结果）：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>c</mi><mi>r</mi><mi>e</mi><mi>e</mi><msub><mi>n</mi><mi>x</mi></msub><mo>=</mo><mfrac><mrow><mi>c</mi><mi>l</mi><mi>i</mi><msub><mi>p</mi><mi>x</mi></msub><mo>⋅</mo><mi>p</mi><mi>i</mi><mi>x</mi><mi>e</mi><mi>l</mi><mi>W</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi></mrow><mrow><mn>2</mn><mo>⋅</mo><mi>c</mi><mi>l</mi><mi>i</mi><msub><mi>p</mi><mi>x</mi></msub></mrow></mfrac><mo>+</mo><mfrac><mrow><mi>p</mi><mi>i</mi><mi>x</mi><mi>e</mi><mi>l</mi><mi>W</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">screen_{x} = \frac{clip_{x} \cdot pixelWidth}{2 \cdot clip_{x}} + \frac{pixelWidth}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">i</span><span class="mord mathdefault">x</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="mord mathdefault">i</span><span class="mord mathdefault">x</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>c</mi><mi>r</mi><mi>e</mi><mi>e</mi><msub><mi>n</mi><mi>y</mi></msub><mo>=</mo><mfrac><mrow><mi>c</mi><mi>l</mi><mi>i</mi><msub><mi>p</mi><mi>y</mi></msub><mo>⋅</mo><mi>p</mi><mi>i</mi><mi>x</mi><mi>e</mi><mi>l</mi><mi>H</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><mrow><mn>2</mn><mo>⋅</mo><mi>c</mi><mi>l</mi><mi>i</mi><msub><mi>p</mi><mi>y</mi></msub></mrow></mfrac><mo>+</mo><mfrac><mrow><mi>p</mi><mi>i</mi><mi>x</mi><mi>e</mi><mi>l</mi><mi>H</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">screen_{y} = \frac{clip_{y} \cdot pixelHeight}{2 \cdot clip_{y}} + \frac{pixelHeight}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.343548em;vertical-align:-0.972108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">i</span><span class="mord mathdefault">x</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.972108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="mord mathdefault">i</span><span class="mord mathdefault">x</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>  这个坐标<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>s</mi><mi>c</mi><mi>r</mi><mi>e</mi><mi>e</mi><msub><mi>n</mi><mi>x</mi></msub><mo separator="true">,</mo><mi>s</mi><mi>c</mi><mi>r</mi><mi>e</mi><mi>e</mi><msub><mi>n</mi><mi>y</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(screen_{x}, screen_{y})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>就是最终投影在屏幕上的像素坐标，z坐标不被处理，它将被用于深度缓冲等模块。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> Unity Shader </tag>
            
            <tag> 计算机图形学 </tag>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>§1-2：数学基础</title>
      <link href="/2021/07/15/%C2%A71-2%EF%BC%9A%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/07/15/%C2%A71-2%EF%BC%9A%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>写shader对线性代数的要求还是挺高的w…毕竟基础原理和线代密切相关，主要是矩阵和矩阵变换那块的内容，现在来复习一下!</p><h1 id="坐标系">坐标系</h1><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210922124755.png" width="300" style="float:right"><p>  为了给每个点一个确切的表示，我们规定一个坐标系。坐标系基于一个人为规定的原点，以及相互垂直的坐标轴。二维的笛卡尔坐标系属于小学生都会的范畴就不多提了，三维笛卡尔坐标系由于镜面对称(像手性碳一样)分为两种：左手系和右手系。<br>  如何区分左手系和右手系？习惯上，我们用：</p><ul><li>拇指表示x轴正方向</li><li>食指表示y轴正方向</li><li>中指表示z轴正方向</li></ul><p>  很明显，用左手和右手都可以获得一个三维笛卡尔坐标系，它们镜面对称从而不完全一样，于是我们把左手表示的坐标系称为左手系，右手的称为右手系。Unity和Blender使用的都是左手系。<br>  那么这两种手系可以互相转换吗？答案当然是可以，只需要把左手系的一根坐标轴的方向反过来它就变成了右手系，对于右手系也是同理。这也是为什么从摄像机角度出发的<strong>观察空间(View Space)是右手系，因为摄像机出发的前向的z轴是负方向</strong>。</p><blockquote><p><strong>不同手系的正向旋转</strong><br>  不同手系的正向旋转完全不同，不过我们可以用手性法则来表示不同手系的正向旋转！<br>  由此，左手法则表示的旋转方向就是左手系的正向旋转方向；右手法则表示的旋转方向就是右手系的正向旋转方向</p></blockquote><h1 id="向量">向量</h1><p>  向量(通常用粗体小写字母<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext mathvariant="bold">a</mtext><mo separator="true">,</mo><mtext mathvariant="bold">b</mtext><mo separator="true">,</mo><mtext mathvariant="bold">u</mtext></mrow><annotation encoding="application/x-tex">\textbf{a}, \textbf{b}, \textbf{u}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord text"><span class="mord textbf">a</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord text"><span class="mord textbf">b</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord text"><span class="mord textbf">u</span></span></span></span></span>等表示)在物理中又被称作矢量，就是有模长(mganitude)和方向(direction)的量，我们一般用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext mathvariant="bold">v</mtext><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\textbf{v}=(x, y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord text"><span class="mord textbf">v</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>来表示二维矢量，用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext mathvariant="bold">v</mtext><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\textbf{v}=(x, y, z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord text"><span class="mord textbf">v</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span>来表示三维矢量，用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext mathvariant="bold">v</mtext><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><mo separator="true">,</mo><mi>w</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\textbf{v}=(x, y, z, w)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord text"><span class="mord textbf">v</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mclose">)</span></span></span></span>来表示四维矢量</p><h2 id="加-减-标量乘除">加、减、标量乘除</h2><p>  当我们进行向量与标量的乘除法、向量间的加减法时我们需要注意这些操作体现出来的<strong>几何意义</strong>。<br>  向量的加减法遵循三角形定则(triangle rule):</p><center><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210922125111.png" width="300/"></center>&emsp;&emsp;而标量与向量的乘除则直接放缩了原本的向量：<center><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210922125529.png" width="220/"></center><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210922132204.png" width="280" style="float:right"><h2 id="点乘和叉乘">点乘和叉乘</h2><br><p>  向量之间的点乘( <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext mathvariant="bold">a</mtext><mo>⋅</mo><mtext mathvariant="bold">b</mtext><mo>=</mo><mi mathvariant="normal">∣</mi><mi>a</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>b</mi><mi mathvariant="normal">∣</mi><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow><annotation encoding="application/x-tex">\textbf{a} \cdot \textbf{b} = |a||b|cos\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord text"><span class="mord textbf">a</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord text"><span class="mord textbf">b</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">a</span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">b</span><span class="mord">∣</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span> ,结果将得到一个标量 )存在一种投影关系:</p><ul><li>当<strong>a</strong>与<strong>b</strong>垂直时，投影长度为0，<strong>a</strong>与<strong>b</strong>点乘的结果为0</li><li>当我们知道坐标时，可以有(x1, y1, z1) · (x2, y2, z2) = x1x2 + y1y2 + z1z2</li><li>点乘的运算顺序优先于乘法和除法</li></ul><br><br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210922140146.png" width="300" style="float:right"><p>  向量之间的叉乘( <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext mathvariant="bold">a</mtext><mo>×</mo><mtext mathvariant="bold">b</mtext><mo>=</mo><mi mathvariant="normal">∣</mi><mi>a</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>b</mi><mi mathvariant="normal">∣</mi><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi></mrow><annotation encoding="application/x-tex">\textbf{a} \times \textbf{b} = |a||b|sin\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord text"><span class="mord textbf">a</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord text"><span class="mord textbf">b</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">a</span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">b</span><span class="mord">∣</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span> ,结果将得到一个矢量 )，其结果垂直于两个原向量所构成的平面:</p><ul><li>点乘不考虑顺序问题，但叉乘考虑。不同的顺序会得到方向不同的结果，如右图----&gt;</li><li>左手系中判断叉乘结果的方向使用左手法则；右手系则使用右手法则</li><li>当我们知道坐标时，可以有(x1, y1, z1) · (x2, y2, z2) = (y1z2-z1y2, x1z2-z1x2, x1y2-y1x2)</li><li>当<strong>a</strong>和<strong>b</strong>平行，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">sin\theta = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，我们将得到一个零向量</li></ul><blockquote><p><strong>叉乘的应用</strong><br>  我们通过片元上顶点是顺时针还是逆时针来判断这个片元是正对我们的还是背对我们的。可以利用叉乘带来的方向来判断三角形的三个顶点是顺时针还是逆时针</p></blockquote><h1 id="矩阵">矩阵</h1><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210922162011.png" width="260" style="float:right"><p>  矩阵就是像这样由行和列组成的一组数据，本质上也是数组，不过是二维的。右图是一个3*3的方矩阵，矩阵的行和宽可以是0，这时候就变成了一维的行矩阵、列矩阵或者什么都没有的0矩阵了。<br>  我们一般用m[i][j]来表示第i行j列的矩阵元素</p><h2 id="标量乘除">标量乘除</h2><p>  同样的，我们在进行矩阵运算的时候也要考虑其中的几何意义。<br>  矩阵与标量的乘除法相当于整体扩充或者缩小的矩阵，我们将矩阵的每个元素都乘上/除以标量</p><h2 id="矩阵乘法">矩阵乘法</h2><p>  矩阵与矩阵相乘必须满足笑脸定律，也就是仅m * n的矩阵和n* k的矩阵能够相乘，最后得到一个m * k的矩阵。m和k的值可以相同。矩阵乘法的示意图如下：<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210922163818.png" width="400/"><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210922164953.png" width="400/"><br>  左图表示AB，而右图是BA<br>  于是你也发现了，矩阵乘法的这种性质决定了更改乘法的顺序就会得到灾难性的结果。但在不改变左右顺序的情况下，我们先计算拿两个矩阵相乘是不影响最终结果的，也就是说：ABCDEF = A((BC)E)F</p><p>  有关矩阵运算、矩阵类型等等更多的内容，可以看EE112下的笔记</p><h2 id="矩阵变换-transform">矩阵变换(Transform)</h2><center><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210922215837.png" width="430" style="float:right"></center><p>  矩阵变换一般包括<strong>缩放、平移和旋转</strong>。我们用某个点或者矢量使用特定的变换矩阵，就能得到变换后新的点或矢量。最常见的应用例子就是顶点着色器中将应用传输进来的模型空间的顶点坐标经过MVP矩阵的变换转变成裁剪空间中的坐标。<br>  变换包括<strong>线性变换</strong>和<strong>平移变换</strong>。其中：</p><ul><li>线性变换包括缩放、旋转、错切、镜像和正交投影</li><li>线性变换满足f(x) + f(y) = f(x+y)和kf(x) = f(kx)</li><li>平移变换不满足线性加法和线性乘法</li></ul><p>  如右图所示，线性变化（以缩放为例）满足线性加法（左）和线性乘法（右），而平移变换则不满足。当给予x一个确定的值，如（1，1，2）时将会明显的发现获得的结果不满足线性乘法。所以为了统一线性变换和平移变换，我们采用四维空间(<strong>齐次坐标空间</strong>)下的<strong>仿射变换</strong>进行矩阵变换操作。而转换到齐次空间之后的点和向量的坐标就是<strong>齐次坐标(homogeneous coordinate)</strong>。<br>一般的，我们有如下规则：</p><ul><li>点的齐次坐标的w分量为1</li><li>向量的齐次坐标的w分量为0（目的是不受平移影响，因为位置对于向量来说并不重要）</li></ul><h3 id="平移矩阵">平移矩阵</h3><p>  从上文的内容中我们得知，平移并不是线性变换，而是仿射变换。为了统一仿射变换和线性变换我们才需要齐次坐标。很基本的原因是：我们没有办法在同一个维度中简单的用一个变换矩阵和点/向量相乘得到平移后的结果。<br>比如说：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mi>y</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>x</mi><mo>+</mo><mi>d</mi><mi>y</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{pmatrix}   a         &amp; b  \\   c         &amp; d\end{pmatrix}  \begin{pmatrix}   x \\   y\end{pmatrix} = \begin{pmatrix}   ax + by \\   cx + dy\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></p><p>  我们如果我们要把图形所以的点向左平移一个单位，那么我们得到的结果的矩阵应该是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>+</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\begin{pmatrix} x+1\\ y\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span>。啊，但是我们刚刚得到的公式好像并没有办法加上<strong>常数</strong>。所以，想要在同一个维度中得到正确的平移变换，我们需要稍微修改一下这个公式，得到：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>+</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>x</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>y</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{pmatrix}   x&#x27; \\   y&#x27;\end{pmatrix}=\begin{pmatrix}   a         &amp; b  \\   c         &amp; d\end{pmatrix}  \begin{pmatrix}   x \\   y\end{pmatrix} + \begin{pmatrix}   t_{x} \\   t_{y}\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></p><p>  于是，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mi>y</mi><mo>+</mo><msub><mi>t</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">x&#x27; = ax + by + t_{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，我们甚至可以把abcd转变成 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span> 矩阵的形式，因为没有必要弄的这么复杂，直接每个坐标轴移动多少加上去就好了。但是仿射变换的小尾巴无法和线性变换统一，而加上一个维度就能解决不统一的问题，何乐而不为呢？于是，在齐次坐标空间下，平移变换的变换矩阵可以简化为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>x</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>y</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>z</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>+</mo><msub><mi>t</mi><mi>x</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mo>+</mo><msub><mi>t</mi><mi>y</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>z</mi><mo>+</mo><msub><mi>t</mi><mi>z</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{pmatrix}   1         &amp; 0        &amp; 0        &amp; t_{x} \\   0         &amp; 1        &amp; 0        &amp; t_{y} \\   0         &amp; 0        &amp; 1        &amp; t_{z} \\   0         &amp; 0        &amp; 0        &amp; 1\end{pmatrix}  \begin{pmatrix}   x \\   y \\   z \\   1\end{pmatrix} = \begin{pmatrix}   x + t_{x} \\   y + t_{y} \\   z + t_{z} \\   1\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>  于是乎，一个点经过平移矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>x</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>y</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>z</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\begin{pmatrix}1&amp; 0&amp; 0&amp; t_{x} \\ 0&amp; 1&amp; 0&amp; t_{y} \\ 0 &amp; 0&amp; 1&amp; t_{z} \\ 0&amp; 0&amp; 0&amp; 1\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span>变换之后得到的结果就是该点在空间中平移了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>t</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>z</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(t_{x}, t_{y}, t_{z})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>之后的结果。<br>  但是如果我们对一个向量的齐次坐标进行同样的平移操作，我们会得到：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>x</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>y</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>z</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{pmatrix}   1         &amp; 0        &amp; 0        &amp; t_{x} \\   0         &amp; 1        &amp; 0        &amp; t_{y} \\   0         &amp; 0        &amp; 1        &amp; t_{z} \\   0         &amp; 0        &amp; 0        &amp; 1\end{pmatrix}  \begin{pmatrix}   x \\   y \\   z \\   0\end{pmatrix} = \begin{pmatrix}   x \\   y \\   z \\   0\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>  发现平移对向量没有任何影响。原因在上文中提到过了</p><h3 id="镜像矩阵">镜像矩阵</h3><p>  我们需要考虑针对哪条轴进行镜像（就是对称）操作。举个例子，一个点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x, y, z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span>和x轴镜像的点的坐标为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(-x, y, z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span>。如果镜像的轴并不是坐标轴那么变换会变得更复杂，涉及到复合变换。<br>  对x轴的镜像变换操作为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>x</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{pmatrix}   -1        &amp; 0        &amp; 0        &amp; 0 \\   0         &amp; 1        &amp; 0        &amp; 0 \\   0         &amp; 0        &amp; 1        &amp; 0 \\   0         &amp; 0        &amp; 0        &amp; 1\end{pmatrix}  \begin{pmatrix}   x \\   y \\   z \\   1\end{pmatrix} = \begin{pmatrix}   -x \\   y \\   z \\   1\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>  易得，对y轴进行镜像即将变换矩阵的矩阵元素<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">M_{2,2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>改为-1，而其他对角元素保持为1不变即可。z轴镜像类似</p><h3 id="错切矩阵">错切矩阵</h3><p>  错切这个词听起来比较陌生，似乎我们日常生活中不怎么接触到这个操作。实际上错切用通俗的话来讲就是拽着一条边拉动，比如下图的两种都是错切：<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210924161129.png" width="400px" style="float:left"></p><p>  我们要如何表示错切呢？首先找到不变的轴。比如右图上方的情况，我们发现图形在变换过程中每个点的纵坐标都没有改变。接下来我们观察每个点的横坐标，发现y = 0时物体的横坐标不变，y = 1时（假定经过错切变换后的图形纵坐标最大为1）所有点的横坐标都向右偏移了a个单位。不难发现，随着点的纵坐标不断变大，点横坐标的偏移不断线性地变大，直到达到a。<br>  如果变化不是线性的呢？那么非线性的变化会体现在图形的边上。当然，这样的变换也不能称之为“错切”了。<br>  以三维笛卡尔坐标系为例，沿x轴水平错切的变换矩阵公式为（错切斜率为1/m）：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>m</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>+</mo><mi>m</mi><mi>y</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{pmatrix}   1         &amp; m        &amp; 0        &amp; 0 \\   0         &amp; 1        &amp; 0        &amp; 0 \\   0         &amp; 0        &amp; 1        &amp; 0 \\   0         &amp; 0        &amp; 0        &amp; 1\end{pmatrix}  \begin{pmatrix}   x \\   y \\   z \\   1\end{pmatrix} = \begin{pmatrix}   x + my \\   y \\   z \\   1\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h3 id="缩放矩阵">缩放矩阵</h3><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>k</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>k</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>k</mi><mi>z</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>k</mi><mi>x</mi></msub><mi>x</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>k</mi><mi>y</mi></msub><mi>y</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>k</mi><mi>z</mi></msub><mi>z</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{pmatrix}   k_{x}     &amp; 0        &amp; 0        &amp; 0 \\   0         &amp; k_{y}    &amp; 0        &amp; 0 \\   0         &amp; 0        &amp; k_{z}    &amp; 0 \\   0         &amp; 0        &amp; 0        &amp; 1\end{pmatrix}  \begin{pmatrix}   x \\   y \\   z \\   1\end{pmatrix} = \begin{pmatrix}   k_{x}x \\   k_{y}y \\   k_{z}z \\   1\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>  可以看到，缩放矩阵成功的让点的齐次坐标沿坐标轴产生了缩放。这对向量坐标同样有用：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>k</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>k</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>k</mi><mi>z</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>k</mi><mi>x</mi></msub><mi>x</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>k</mi><mi>y</mi></msub><mi>y</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>k</mi><mi>z</mi></msub><mi>z</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{pmatrix}   k_{x}     &amp; 0        &amp; 0        &amp; 0 \\   0         &amp; k_{y}    &amp; 0        &amp; 0 \\   0         &amp; 0        &amp; k_{z}    &amp; 0 \\   0         &amp; 0        &amp; 0        &amp; 1\end{pmatrix}  \begin{pmatrix}   x \\   y \\   z \\   0\end{pmatrix} = \begin{pmatrix}   k_{x}x \\   k_{y}y \\   k_{z}z \\   0\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>  当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>k</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>k</mi><mi>z</mi></msub></mrow><annotation encoding="application/x-tex">k_{x}, k_{y}, k_{z}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的值一样时，这种类型的缩放被称为统一缩放(uniform scale)，否则则被称为非统一缩放。统一缩放能够在各方向上均匀的“缩放原物体，而非统一缩放会产生“拉伸”的效果。</p><h3 id="旋转矩阵">旋转矩阵</h3><p>  旋转矩阵比前两种要复杂一些。因为我们要考虑点/向量是围绕哪个坐标轴进行旋转的（如果不是围绕xyz轴旋转则更复杂，需要使用复合矩阵）。以围绕x轴旋转 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span> 度为例的旋转矩阵为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>x</mi></msub><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">R_{x}(\theta) = \begin{pmatrix}   1         &amp; 0        &amp; 0        &amp; 0 \\   0         &amp; cos\theta&amp; -sin\theta&amp; 0 \\   0         &amp; sin\theta&amp; cos\theta&amp; 0 \\   0         &amp; 0        &amp; 0        &amp; 1\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>  绕y轴旋转的旋转矩阵则为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>y</mi></msub><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">R_{y}(\theta) = \begin{pmatrix}   cos\theta &amp; 0        &amp; sin\theta&amp; 0 \\   0         &amp; 1        &amp; 0        &amp; 0 \\   -sin\theta&amp; 0        &amp; cos\theta&amp; 0 \\   0         &amp; 0        &amp; 0        &amp; 1\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>  最后，绕z轴旋转的旋转矩阵为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>z</mi></msub><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">R_{z}(\theta) = \begin{pmatrix}   cos\theta &amp; -sin\theta   &amp; 0       &amp; 0 \\   sin\theta &amp; cos\theta    &amp; 0       &amp; 0 \\   0         &amp; 0            &amp; 1       &amp; 0 \\   0         &amp; 0            &amp; 0       &amp; 1\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><blockquote><p><strong>罗德里格斯旋转公式(Rodrigues’ Rotation Formula)</strong><br>  啊，好高级的名字！前面我们提到的旋转矩阵只能沿坐标轴旋转，这也太拉了，那这个公式就是用来解决<strong>沿任意轴进行旋转</strong>的问题的。罗德里格斯旋转公式如下：<br><img src="https://raw.githubusercontent.com/Guiny-Time/PictureBed/main/20210925212531.png" width="600/"><br>  首先我们需要知道旋转的轴n和旋转的角度α。<strong>轴和向量并不等同</strong>，因为向量没有位置的属性，而轴有。在这个公式中，我们默认轴指的是从原点出发的轴。有人会问，那像x = 3这样的轴要怎么表示呢？它不过原点。解决方法是：</p><ul><li>先把旋转中心移动到经过原点（x = 3 —&gt; x = 0），需要旋转的点/向量也会相应的被移动。所以，首先我们需要乘上一个平移矩阵</li><li>代入罗德里格斯旋转公式进行旋转</li><li>再将旋转中心移回去，需要旋转的点/向量也会相应的被移动。所以，我们还需要乘上一个平移矩阵才能得到最终结果</li></ul></blockquote><h2 id="矩阵复合变换">矩阵复合变换</h2><p>  我们对一个点或向量的操作肯定不止单单平移或者单单旋转这么简单。通常，在涉及坐标空间的变换时一个向量会旋转并被缩放。当涉及到不止一个矩阵变换时，我们将其称之为复合变换。简单来说，复合变换就是多个变换矩阵相乘，以达到最终效果的过程（需要注意变换顺序）。<br>  在矩阵变换中，我们使用的齐次坐标是列矩阵的形式，乘法的顺序是从右往左。似乎从小到大我们接触的都是从左乘到右的铁律，为什么复合变换我们是从右乘到左呢？原因很简单，首先我们没有违反矩阵乘法的定律，<strong>右乘符合结合律</strong>。最右边的是我们的点或者坐标，当我们每右乘一个变换矩阵的时候，我们可以马上得到经过一步变换后的点或向量的坐标，这比将所有复合矩阵乘完再乘点/向量要直观的多！如果左乘，我们将再经过复杂的4*4运算之后直接得到结果，万一结果是错的我们也不知道从哪里下手，修改起来会很难。所以为了更加直观，我们举个例子：<br>  如果我们用P指代空间中一点的坐标，用M指代变换矩阵：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mrow><mi>n</mi><mi>e</mi><mi>w</mi></mrow></msub><mo>=</mo><msub><mi>M</mi><mrow><mi>r</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></msub><msub><mi>M</mi><mrow><mi>s</mi><mi>c</mi><mi>a</mi><mi>l</mi><mi>e</mi></mrow></msub><msub><mi>M</mi><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></msub><msub><mi>P</mi><mrow><mi>o</mi><mi>l</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">P_{new} = M_{rotation} M_{scale} M_{translation} P_{old}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>  该式子的意思应该是点先平移，再缩放，最后进行旋转的一个过程。由于矩阵乘法的特殊性（不满足交换律！<strong>AB≠BA</strong>），乘法的顺序将会影响最终结果所以顺序很重要。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> Unity Shader </tag>
            
            <tag> 计算机图形学 </tag>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>§1-1：渲染流水线</title>
      <link href="/2021/07/13/%C2%A71-1%EF%BC%9A%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF/"/>
      <url>/2021/07/13/%C2%A71-1%EF%BC%9A%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>我们总在说渲染管线，几乎每一个与TA有关的课程第一课都和渲染管线相关，这是一切图像的基础。就拿最近在用的Unity内置渲染管线为例吧，其中包含了CPU和GPU两个部分，总的流程图如下所示：</p><p><img src="/2021/07/13/%C2%A71-1%EF%BC%9A%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF/Clipboard_2021-09-12-04-25-58.png" alt></p><h1 id="应用阶段-cpu处理阶段">应用阶段/CPU处理阶段</h1><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA9b9cef8b1cf22d282bf0cc32344dee73.png" alt="image.png" title="image.png" width="635"><p>应用阶段的处理场所在CPU。这一阶段主要处理以下几件事：</p><ul><li>准备好场景数据</li><li>剔除不需要渲染的部分</li><li>设置渲染顺序</li><li>加载数据到显存</li><li>调用DrawCall</li><li><strong>输出渲染图元</strong>(Rendering Primitives)作为几何阶段的输入。通俗来讲，渲染图元可以是点、线、三角面等，这些信息会传递给GPU渲染管线处理。</li></ul><h2 id="剔除-culling"><strong>剔除(Culling)</strong></h2><p>CPU阶段的剔除是<strong>粗粒度</strong>的，和GPU阶段的裁剪不同。粗粒度剔除发生在物体层面，剔除是以物体1为单位进行的。这一步包含了三种剔除：</p><ol><li><p>视锥体剔除<br>视锥体剔除指的是剔除掉相机视锥体之外的元素，视锥体即相机的可视范围，全部在外的物体(比如下图的鸟)不需要渲染，部分在外的物体会在GPU渲染部分被裁剪。<br><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA679019020b8176f927ad44c010889bc0.png" alt="image.png" title="image.png"></p></li><li><p>层级剔除<br>层级剔除指物体所处的层(Layer)是否被相机所渲染。如果相机的渲染层不包含该物体的layer，则该物体不被渲染。譬如在上文的例子中，如果不渲染树木层，就会是下面的画面：<br><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA97faa25782a72442debbbff7b7cb8c55.png" alt="image.png" title="image.png" width="403"></p></li><li><p>遮挡剔除<br>遮挡剔除指当一个物体被其他物体遮挡而不在摄像机的可视范围内时，不对其进行渲染。对这些物体进行渲染是浪费时间和性能的，所以要先剔除掉这部分元素以节省接下来的时间。</p></li></ol><h2 id="设置渲染顺序">设置渲染顺序</h2><p>渲染顺序主要由<strong>渲染队列</strong>(Render Queue)决定的，序号越小的越先渲染。Unity默认渲染队列序号如下：</p><ul><li>Background（1000）<br>最早被渲染的物体的队列。</li><li>Geometry（2000）<br>不透明物体的渲染队列。大多数物体都应该使用该队列进行渲染，也是Unity Shader中默认的渲染队列。</li><li>AlphaTest（2450）<br>有透明通道，需要进行Alpha Test的物体的队列，比在Geomerty中更有效。</li><li>Transparent（3000）<br>半透物体的渲染队列。一般是不写深度的物体，Alpha Blend等的在该队列渲染。</li><li>Overlay（4000）<br>最后被渲染的物体的队列，一般是覆盖效果，比如镜头光晕，屏幕贴片之类的</li></ul><p>当渲染队列相同时，<strong>不透明队列</strong>(RenderQueue &lt; 2500)，根据摄像机距离<strong>从前往后排序</strong>，这样先渲染离摄像机近的物体，远处的物体被遮挡剔除；<strong>半透明队列</strong>(RenderQueue &gt; 2500)，根据摄像机距离<strong>从后往前排序</strong>，这是为了保证渲染正确性，例如半透明黄色和蓝色物体，不同的渲染顺序会出现不一样的颜色。</p><h2 id="打包数据到显存">打包数据到显存</h2><p>在CPU阶段，数据会先从硬盘加载到RAM中，随后网格、纹理等数据又被加载到显存上。加载到显存上之后，数据就会被移除。<br>之所以这么做是因为GPU访问显存的速度比访问前两者更快，而且多数显卡可能无法直接访问RAM。打包的数据主要包括：</p><ol><li><strong>模型信息</strong>，包括顶点坐标、法线、uv、切线、顶点颜色等等</li><li><strong>变换矩阵</strong>V和P，这是由相机的位置和FOV决定的</li><li><strong>灯光信息</strong></li><li>模型的<strong>材质参数</strong>，设置对应的渲染状态</li></ol><h2 id="调用setpass-call和draw-call">调用SetPass Call和Draw Call</h2><ul><li><p>SetPass Call<br>Shader脚本中一个Pass语义块就是一个完整的渲染流程，一个着色器可以包含多个Pass语义块，<strong>每当GPU运行一个Pass之前，就会产生一个SetPassCall</strong>，所以可以理解为调用一个完整渲染流程。</p></li><li><p>DrawCall<br>CPU每次调用图像编程接口命令GPU渲染的操作称为一次Draw Call。Draw Call就是一次渲染命令的调用，它指向一个需要被渲染的图元（primitive）列表，不包含任何材质信息。GPU收到指令就会根据渲染状态（例如材质、纹理、着色器等）和所有输入的顶点数据来进行计算，最终输出成屏幕上显示的那些漂亮的像素。</p></li></ul><h1 id="几何阶段-gpu处理阶段">几何阶段/GPU处理阶段</h1><p>处理场所：GPU<br>主要流程：</p><ol><li>顶点处理</li><li>图元装配</li><li>光栅化</li><li>片元着色器</li><li>输出合并</li></ol><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA3ab332888e0df4ce1aeb54cabf9ba62b.png" alt="image.png" title="image.png"><h2 id="顶点处理">顶点处理</h2><p>在顶点处理阶段，每个顶点都会经过一次顶点着色器。虽然一个模型可能有很多很多顶点，但得益于GPU的高并发的特点，可以同时处理大量的数据，所以实际上是很快的（虽然快但不代表可以无限精细模型）。在顶点阶段完成的最基本的操作是顶点坐标的变换，从模型空间经过MVP处理变换到齐次裁剪空间。在这个阶段也可以计算顶点的光照（高洛德着色），但效果不佳。</p><p>除了顶点着色器之外，顶点处理阶段还包括<strong>曲面细分着色器</strong>和<strong>几何着色器</strong>。这两种着色器是<strong>非必须</strong>的，可选可不选。</p><h3 id="曲面细分着色器-tessellation-shader">曲面细分着色器(Tessellation Shader)</h3><p>主要作用是用于细分图元。曲面细分着色器是一个<strong>可选的着色器</strong>，主要是对三角面进行细分，以此来增加物体表面的三角面的数量。借助它可以实现<strong>细节层次(LOD,Level-of-Detail</strong>)的机制，使得离摄像机越近的物体具有更加丰富的细节，而远离摄像机的物体具有较少的细节。</p><h3 id="几何着色器">几何着色器</h3><p>几何着色器也是一个<strong>可选的着色器</strong>，它以完整的图元（比如点）作为输入数据，输出可以是一个或多个其他的图元(比如三角面)，或者不输出任何的图元。几何着色器的拿手好戏就是将输入的点或线扩展成多边形。我们可以用几何着色器完成很多工作，例如绘制mesh的法线、</p><h2 id="图元装配">图元装配</h2><h3 id="裁剪-clipping">裁剪(Clipping)</h3><p>CPU阶段的剔除已经帮助我们去掉了所有整个在视锥体外、不需要渲染的物体。但有一些物体<strong>部分在视锥体内部分在视锥体外</strong>，针对这些物体，在视锥体外的部分就需要进行裁剪，使用一些新的顶点来代替被裁剪的部分，不再渲染视锥体外被裁减的部分，减少开销。</p><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA98e47f2dc4bc2daa31c10d8e5c37e035.png" alt="image.png" title="image.png" width="196"><h3 id="标准化设备坐标-normalized-device-coordinates-ndc">标准化设备坐标(Normalized Device Coordinates，NDC)</h3><p>在处理完模型顶点的裁剪空间的基础上，进行透视除法(perspective division，即除w)后会得到一个长宽高均为2的正方体，这就是标准化设备坐标(NDC)。之所以边长是2是因为从原点出发三个轴的范围都在[0,1]之间。</p><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA63923e5233b56a1b4a6ffd973198e322.png" alt="image.png" title="image.png" width="292"><p>获得NDC坐标是为了实现屏幕坐标的转换，与硬件无关。</p><h3 id="背面剔除-back-face-culling">背面剔除(Back-Face Culling)</h3><p>这一步在NDC之后，剔除所有背对摄像机的三角面。上篇文章（GPU渲染管线）中我们讲到过模型数据中含有顶点和mesh的索引列表，列表中的三个点组成一个三角片，默认情况下：</p><ul><li>三个点是顺时针排列的，认为背对摄像机</li><li>三个点是逆时针排列的，认为正对摄像机</li></ul><p>关于是顺时针还是逆时针，可以通过三角形任意两边叉乘的方向判断。判断为背面则剔除，除非开启了双面渲染等设置。</p><h3 id="屏幕映射-screen-mapping">屏幕映射(Screen Mapping)</h3><p>屏幕映射将NDC中每个图元的x、y坐标转换到屏幕坐标系(Screen Coordinates, <strong>z坐标不做任何处理</strong>（但并不是无用的），因为屏幕是二维的。</p><p>屏幕坐标系和z坐标一起被称作<strong>窗口坐标系</strong>(Window Coordinates)。</p><h2 id="光栅化">光栅化</h2><p>光栅化的主要流程是计算每个图元覆盖了哪些像素，并计算它们的颜色。即将屏幕空间的<strong>图元离散化为片元</strong>的过程，包括：</p><ul><li>三角形设置</li><li>三角形遍历</li></ul><h3 id="三角形设置-triangle-setup">三角形设置(Triangle Setup)</h3><p>我们从上一个阶段获得图元的顶点信息，也就是三角面每条边的两个端点，但如果要得到整个三角网格对像素的覆盖情况，我们就必须计算每条边上的像素坐标。为了能够计算边界像素的坐标信息，我们就需要得到三角形边界的表示方式。这样一个计算三角网格表示数据的过程就叫做三角形设置。</p><h3 id="三角形遍历-triangle-traversal">三角形遍历(Triangle Traversal)</h3><p>检查每个像素是否被一个三角形网格覆盖，如果覆盖的话则生成一个<strong>片元(Fragment)</strong>, 并使用三角网格3个顶点的顶点信息对整个覆盖区域的像素进行插值。这个阶段也被成为<strong>扫描变换(Scan Conversion)</strong>。</p><p>经过三角形遍历我们会得到一个片元序列，但片元不等同于像素，而是包含了屏幕坐标、深度信息(通过插值得到)、顶点信息等的状态合集。</p><h2 id="片元着色器-fragment-shader">片元着色器(Fragment Shader)</h2><p>片元着色器最主要的任务就是<strong>着色</strong>,光栅化阶段实际上并不会影响屏幕上每个像素的颜色值，而是会产生一系列的数据信息，用来表述一个三角网格是怎样覆盖每个像素的。而每个片元就负责存储这样一系列数据。着色有两种最常见的技术，分别是<strong>纹理贴图</strong>和<strong>光照技术</strong>。</p><h2 id="输出合并-output-operations">输出合并(Output Operations)</h2><p>这个阶段也被成为<strong>逐片元操作</strong>（Per-Fragment Operations），主要决定了每个片元的<strong>可见性</strong>(在这个阶段需要对片元进行多种测试，包括透明度测试、模板测试和深度测试等等)和片元的混合。</p><h3 id="透明度测试-alpha-test"><strong>透明度测试(Alpha Test)</strong></h3><p>这是输出合并阶段片元经历的<strong>第一个测试</strong>，也是一个非常简单粗暴的测试。通过片元数据，可以获取该片元的alpha值，如果alpha值小于某个数的话，则直接将该片元丢弃，不进行渲染（即只渲染透明度在某一范围内的片元），可以用来做一些树叶镂空的效果。</p><h3 id="模板测试-stencil-test"><strong>模板测试(Stencil Test)</strong></h3><p>模板测试是输出合并阶段经历的<strong>第二个测试</strong>。模板测试将<strong>模板缓冲区中的模板值</strong>与<strong>参考值</strong>进行比较，可以自己配置比较的方式，比较的结果决定一个片元是否通过测试。通过模板测试的片元可以参与下一阶段的深度测试(如果开启了的话)，否则被舍弃。</p><img src="https://b.bdstatic.com/comment/HPpFm-ziUYsgpwpjCcQ1VA805b3cc2d0696b913f4c61ef0b730bfb.png" alt="image.png" title="image.png" width="987"><h3 id="深度测试-depth-test"><strong>深度测试(Depth Test)</strong></h3><p>深度测试是<strong>最后一个测试</strong>。深度测试比较了片元的深度值和已存在于深度缓冲区中的深度值，可以自己配置比较的方式，比较的结果决定一个片元是否通过深度测试。如果没有通过，需要舍弃该片元。</p><p>深度测试在正常的思维中是近处覆盖远处(深度值小覆盖深度值大，同时缓冲区内的深度值被替换成当前深度值)，但通过修改深度测试的规则，可以允许物体永远出现在前方，或仅在遮挡时显示。</p><h3 id="混合-blend">混合(Blend)</h3><p>混合操作对于半透明物体而言十分重要。如果没有开启混合功能，GPU会直接使用片元的颜色覆盖掉颜色缓冲区中的颜色。而如果开启了混合功能，GPU会取出颜色缓冲区中的颜色(目标颜色)与片元的颜色(源颜色)根据设置的混合模式进行<strong>混合</strong>。</p><p>对混合更好的理解是绘图软件（例如PS）中的混合模式(比如叠加、正片叠底、滤色等等)，实际上就是混合图层与下面的图层进行混合。在片元着色器的混合中，因为存在深度(z轴参数不同)，所以实际上片元也存在图层的前后关系。</p><blockquote><p><strong>提前深度测试</strong> (Early-z)<br>深度测试和模板测试是在片段着色器之后进行的，这里就存在一个问题：我们费尽千辛万苦计算了一个片元的颜色，然后它没有通过测试，被抛弃了！那我们花在这个片元上的计算岂不是就<strong>浪费</strong>了吗？Yes，真是这样。<br>提前深度测试正是在这种情况下出现的，它在顶点着色器和片元着色器之间进行，可以在片元着色器计算之前把那些无法通过深度测试的片元剔除。不过，Early-Z Culling<strong>不是管线标准</strong>，只是硬件厂商用来加速渲染的一种优化手段，所以在不同的硬件上会有不同的实现，而且Early-Z Culling并不保证一定有效，它需要硬件的支持。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TA </tag>
            
            <tag> Unity Shader </tag>
            
            <tag> 计算机图形学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC设计模式</title>
      <link href="/2021/05/19/MVC%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/05/19/MVC%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>MVC 模式的全称是 Model-View-Controller，即模型-视图-控制器。严格来说，MVC并不是GoF（四人帮）归纳出的一种独立设计模式，而是组合模式（UI界面的构建）、策略模式（VC之间的一对多关系）和观察者模式（MV间的事件触发）的组合。<br>这种设计模型通常用于用户图形界面的图形/数据/逻辑分离（是不是感觉在某些方面很像 ECS？），因此在游戏领域中常被用于 UI 相关的功能上。那么，什么是 M / V / C 呢？</p><ul><li><strong>M</strong>（模型）<br>模型层（M 层）负责<strong>存放数据</strong>，类似于 ECS 中的 C（组件）。</li><li><strong>V</strong>（视图）<br>视图层（V 层）负责<strong>展示用户图形界面</strong>，类似于 ECS 中的 E（实体），是用户与之直接交互的元素。</li><li><strong>C</strong>（控制器）<br>控制层（C 层）负责<strong>处理数据逻辑</strong>，类似于 ECS 中的 S（系统），包含了所有数据计算的部分，负责更新M层的数据。</li></ul><p>使用 MVC 模式的目的是将 M 和 V 的实现代码分离，从而使同一个程序可以使用不同的表现形式。比如一批统计数据可以分别用柱状图、饼图来表示。C 存在的目的则是确保 M 和 V 的同步，一旦 M 改变，V 应该同步更新。</p><h1 id="unity中的mvc">Unity中的MVC</h1><p><img src="https://img-blog.csdnimg.cn/20181106152450894.png" alt><br><img src="http://xpsuper.com/upload/2021/10/MVC01-da44a1398db94f8987ec9aa716cb1725.png" alt></p><p>以上述框架为例，假设我们要做一个点击按钮更新金币数量（即点击一次金币数 +1 ）和清空当前金币的功能：</p><p><img src="https://velog.velcdn.com/images/suhan0304/post/d6333381-8221-4cae-9f3c-f7d21ed3e978/image.png" alt></p><h2 id="m">M</h2><p>M 层存放所有数据，包括静态数据、变量、资源（如贴图、游戏对象等）等。在这个例子中，M 层中只有金币数量的数据。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">CoinModel</span> : <span class="title">Monobehavior</span>&#123;</span><br><span class="line">  <span class="comment">// 金币数据</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">int</span> _coins&#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="v">V</h2><p>V 层负责为拿取所有 UI 组件对象，并为它们声明相关的事件：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">CoinView</span> : <span class="title">Monobehavior</span>&#123;</span><br><span class="line">  CoinController coinCtrl = GameObject.Find(<span class="string">&quot;#VisualElement&quot;</span>).GetComponent(<span class="string">&quot;CoinController&quot;</span>);</span><br><span class="line">  <span class="comment">// 拿取所有组件obj</span></span><br><span class="line">  <span class="keyword">public</span> Text coin_num;</span><br><span class="line">  <span class="keyword">public</span> Button b_add;</span><br><span class="line">  <span class="keyword">public</span> Button b_reset;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Awake</span>()</span>&#123;</span><br><span class="line">    coin_num = GameObject.Find(<span class="string">&quot;#Label--Coin&quot;</span>);</span><br><span class="line">    b_add = GameObject.Find(<span class="string">&quot;#Button--Coin&quot;</span>);</span><br><span class="line">    b_reset = GameObject.Find(<span class="string">&quot;#Button--Reset&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 声明点击事件</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Intput.GetMouseButtonDown(<span class="number">0</span>))&#123;</span><br><span class="line">      <span class="comment">// 触发硬币+1</span></span><br><span class="line">      <span class="keyword">if</span>(b_add.OnePointColliderObject() != <span class="literal">null</span>)&#123;</span><br><span class="line">        coinCtrl.AddCoin();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 触发硬币重置</span></span><br><span class="line">      <span class="keyword">if</span>(b_reset.OnePointColliderObject() != <span class="literal">null</span>)&#123;</span><br><span class="line">        coinCtrl.ResetCoin();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="c">C</h2><p>C 层负责业务逻辑相关功能（在本例中为“金币 +1 ”和“清空金币”两大功能）的实现，获取Model的数据，通知View层更新数据。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CoinController</span>&#123;</span><br><span class="line">  <span class="comment">// 获取M层和V层 </span></span><br><span class="line">  CoinModel coinMod = GameObject.Find(<span class="string">&quot;#VisualElement&quot;</span>).GetComponent(<span class="string">&quot;CoinModel&quot;</span>);</span><br><span class="line">  CoinView coinVie = GameObject.Find(<span class="string">&quot;#VisualElement&quot;</span>).GetComponent(<span class="string">&quot;CoinView&quot;</span>);</span><br><span class="line">  <span class="comment">// 硬币++</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddCoin</span>()</span>&#123;</span><br><span class="line">    coinMod._coins++;</span><br><span class="line">    coinVie.coin_num.text = coinMod._coins;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 重置硬币</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ResetCoin</span>()</span>&#123;</span><br><span class="line">    coinMod._coins = <span class="number">0</span>;</span><br><span class="line">    coinVie.coin_num.text = coinMod._coins;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，MVC不仅可以用于UI系统（只是在大部分情况下，它天然地适合于此），也可以拓展引用到其他模块上，例如<a href="https://github.com/jskyzero/MVC.DotNet/tree/master">这个仓库</a>所展示的玩家系统。</p><h1 id="参考资料">参考资料</h1><p><a href="https://bbs.huaweicloud.com/blogs/306798">https://bbs.huaweicloud.com/blogs/306798</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 游戏开发 </tag>
            
            <tag> 框架 </tag>
            
            <tag> MVC </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Unity简单实现明日方舟</title>
      <link href="/2021/04/03/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F/"/>
      <url>/2021/04/03/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言">前言</h1><p>这次学校工作室的考核任务（是的还是考核）是复刻一款游戏，给出了三个游戏选择（饥荒/杀戮尖塔/元气骑士）不过我都没有玩过，于是想了想我决定做一个简陋版的明日方舟。之前在b站看到过大佬仅耗时48小时开发出明日方舟的战斗界面，感觉好像也不会很难吧……就去试了！</p><p>但是做了之后才发现其实是很有挑战性的一次任务。先上两张游戏界面的图（p1p2）！</p><p><img src="/2021/04/03/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F/image.png" alt="p1"><br><img src="/2021/04/03/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F/image-1.png" alt="p2"></p><h1 id="制作思路">制作思路</h1><h2 id="场景：">场景：</h2><p>最开始我的想法包括了五个场景：两个关卡、选择干员的界面、看板界面和登录起始界面（包括一些本地化的内容，工作量挺大的）。后来由于时间不够了就砍成了登录起始界面和一个关卡。</p><h2 id="干员：2d骨骼-trail-renderer">干员：2D骨骼/Trail Renderer</h2><p>选择什么干员来演示比较合适呢？方舟并没有公开模型，如果要获取对应的gif会比较麻烦，而自己画角色好像也很麻烦。</p><p>纠结了半天我决定画三个自己的原创角色，并使用2D骨骼动画制作了相关的站立、战斗的动画（对2D骨骼感兴趣的同学可以在b站上找Michael老师的系列教程参考学习）</p><p>在干员战斗的时候你会注意到一些秘制特效，这是用Unity自带的组件Trail Renderer做的。这个组件很强大，如果加上一点代码能得到非常酷的效果。</p><h2 id="关卡：2-5d-正交相机-透视相机">关卡：2.5D/正交相机+透视相机</h2><p>关卡界面我是完全按照方舟游戏本体的某一关来搭建的。</p><p>我们知道舟游的地图是3D的，但是干员又是纸片人，这种不同维度的结合势必会带来一些问题。几番考虑我决定在2D场景中创建3D的地图（其实是某种意义上的2.5D），正好Unity默认的Cube长宽为1，完美契合了地图格子的对应位置，能够得到图3的效果：</p><p><img src="/2021/04/03/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F/image-2.png" alt></p><p>因为想要得到近大远小的效果，所以渲染地图的相机必须是透视而不是正交的，但是这样会导致我方干员贴图在挪动到地图边缘的位置时出现扭曲的现象。为了解决这个问题，我额外引入了另一个正交像机专门用来渲染干员预制件，这样干员在拖拽实例化之后怎么看都像端端正正站立在地图上的。</p><p>不过这样也会导致另外一个问题，那就是在靠近边缘的地方干员和格子可能无法很好的对应上。我认为是能找到一个数学模型来对应的，但是有点麻烦…</p><p>后来在参考研究48h开发明日方舟的白斗七星大佬的作品时发现他只用了一个摄像机，但是这个摄像机的机位很巧妙，把近小远大的影响压到了最小。</p><h1 id="具体实现">具体实现</h1><p>标题场景比较简单，就是几个UI元素调到还行的布局，在此不多做论述。</p><p><img src="/2021/04/03/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F/image-3.png" alt="起始界面ui"></p><p><img src="/2021/04/03/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F/image-4.png" alt="代码结构"></p><p>在上一期《用Unity简单实现合成大西瓜》一文中，我在代码结构的处理上非常糟糕，该封装的东西都没封装，导致整个代码结构特别复杂也特别乱。这次在这方面做了一些小小的努力，相对结构也还是能看的吧（笑～）</p><h2 id="敌人相关">敌人相关</h2><p>EnemyWaveController参（zhao）考（ban）了油管上Brackeys老师的教程，EnemyMove则使用了A* 算法。对于网格地图上的移动，除了A* 之外还有好几种其他的寻路算法，感兴趣可以上b站找Joe的视频参考学习。</p><p>为了减小开销（在频繁销毁生成的资源很多的时候，这点非常重要），敌人的生成和死亡使用了对象池。</p><h2 id="player相关">Player相关</h2><p>第一次写接口（IPlayer）竟然是用在玩家的攻击和特殊攻击上。因为考虑到每个我方干员都有这两种攻击形式和一些属性，就整了这么个，后来用起来也还挺方便的。</p><p>PlayerMgr里的玩家列表对“已上场的干员”、“还未上场的干员”、“攻击范围内的干员”都有着至关重要的作用。UI的玩家图像按钮就是依赖于这个列表。</p><p>玩家信息则存放的是该干员的部署费用、名字等元素。</p><h2 id="ui相关">UI相关</h2><p>有很多按钮的OnClick事件和一些与数值有关的事件委托。</p><p>其中最复杂的地方莫过于拖拽实例化+放置玩家+设置朝向。我的思路大概是这样的：</p><p>点击玩家按钮列表，利用eventHandler的drag函数在鼠标的地方实例化出对应干员 à 拖的时候对应的地块颜色变成绿色（调整材质球的颜色） à 松开鼠标，如果在适合的位置就吸附到该格子中心 à 调整朝向，攻击范围也随之改变 à 放置完成</p><p>想法挺简单的，写起来有点复杂…相信有更快更简洁的实现方式</p><h1 id="回顾思考">回顾思考</h1><p>值得改进的地方有许多，比如从代码角度出发，我的代码还不够精简（尤其是拖拽放置的那个模块），还不够OOP（</p><p>此外，从可玩性的角度出发，如果地图和敌人能做到随机生成，那么游戏的可玩性和难度会大大提升的</p><p>最后，感谢阅读到这里的你！如果你对这个项目有什么意见和建议欢迎在评论区和我探讨</p><p>源码已上传GitHub：<a href="https://github.com/Guiny-Time/Arknights">https://github.com/Guiny-Time/Arknights</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏编程 </tag>
            
            <tag> 经验分享 </tag>
            
            <tag> 项目复盘 </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Unity简单实现合成大西瓜</title>
      <link href="/2021/01/30/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C/"/>
      <url>/2021/01/30/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近一款名叫“合成大西瓜”的游戏风靡空间，大家在真香之后都笑称自己为“西瓜人”，随后各种恶搞大西瓜的趣图、大西瓜bot更是接踵而至，甚至诞生了“合成大西瓜护肝版”、“合成小葡萄”、“合成大国家”等一系列衍生体…本文将主要探讨如何用Unity做一个“合成大西瓜”。</p><h1 id="素材搜集">素材搜集</h1><p>素材，或者说贴图展现了水果们的样貌。在这里如果把贴图替换成其他元素，比如说香蕉啦、波兰球啦一类的我们就能得到合成大国家等等的恶搞游戏。</p><p>这里为了简单（其实是我不会画）表现一下水果，笔者画了几个球，如图：</p><p><img src="/2021/01/30/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C/image.png" alt></p><p>从左到右分别表示的是葡萄、小番茄、橘子、柠檬、猕猴桃、西红柿、半个西瓜和西瓜。游戏规则是两个等级相同的水果可以合成更高一级的水果，合成出西瓜就算获得游戏胜利。</p><p>这里在合成路线上省略了椰子、土豆等中间部分的水果，因为道理是一样的嘛就不画了（说到底还是因为懒惰</p><h1 id="ui">UI</h1><p>笔者简单设计了一个UI，如图：</p><p><img src="/2021/01/30/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C/image-1.png" alt></p><p>可以看到这个UI主要由三个部分组成。第一个部分是顶端的白色图片，这张图片将用于显示下一个出现的水果的图案；第二部分是左上角的分数，用来统计玩家通过合成获得的分数；第三部分则是左部、右部和底端的边界，都加上了碰撞器，防止水果掉出界面。</p><p>这两部分准备好以后就可以开始构思程序了</p><h1 id="编程与实现">编程与实现</h1><p>基本思路：给每个水果加上2D刚体和2D球状碰撞器，在鼠标点击的位置的x方向上实例化出对应的“下一个水果”。在水果的碰撞事件中两个水果被摧毁的同时生成高等级的水果，得分增加。</p><p>所以第一步是让对应的下一个水果实例化在鼠标位置的x方向上。因为涉及到水果的摧毁，所以不能直接实例化水果本体，否则会导致元物体被摧毁而无法继续实例化。所以思路是创建一个元物体的备份，在备份上进行实例化和摧毁的操作。</p><p><img src="/2021/01/30/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C/image-2.png" alt><br><img src="/2021/01/30/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C/image-3.png" alt></p><p>可以从上面两张图片看到，带public访问修饰符的物体就是水果的本体，而下方隐式的物体则是相应水果的备份体。在鼠标点击后，从已经生成的随机数中选择出对应的水果并实例化在鼠标的世界坐标的x方向上。这里的5.0f是一个固定的y坐标，能够获得水果从屏幕顶端落下的效果。</p><p>第二步，实现相同水果撞击后摧毁并“合成”出更高一级的水果并加分，以葡萄为例（下图）：</p><p><img src="/2021/01/30/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C/image-4.png" alt></p><p>这里一共有四个操作：记录碰撞的布尔值变成true、积分增加10分、记录碰撞的位置和摧毁两个碰撞体。</p><p>你会注意到我没有直接在碰撞事件里生成下一等级的物体，而是将一个记录碰撞的布尔值改成了true。这是因为两个相互碰撞的水果都带有碰撞器，所以实际上这个方法是被执行了两次，执行的主体分别是碰撞的双方。如果在这个方法里直接实例化下一等级的水果的话，我们将直接得到两个紧贴在一块的水果，并直接到达合成路线的终点——大西瓜。</p><p>所以在这里采用了设布尔值的方式，在另一个类的LateUpdate方法里对布尔值进行检测并实例化下一等级的水果就能避免生成两个，如下图。</p><p><img src="/2021/01/30/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C/image-5.png" alt></p><p>最后一步的随机生成的“下一个水果”，这个比较简单，就是用一个随机数进行选择就可以了：</p><p><img src="/2021/01/30/%E7%94%A8Unity%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%90%88%E6%88%90%E5%A4%A7%E8%A5%BF%E7%93%9C/image-6.png" alt></p><p>以上就是一些基本的思路。这个大概200行代码的重制版的“合成大西瓜”已经能实现原版的大部分功能，但是还缺少了失败判定功能（可以用触发器+FixedUpdate计时）和一些激动人心（大雾）的音效，但是效果还是不如原版的好嘞~</p>]]></content>
      
      
      <categories>
          
          <category> 项目复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏编程 </tag>
            
            <tag> 经验分享 </tag>
            
            <tag> 项目复盘 </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
