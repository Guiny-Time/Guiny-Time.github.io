<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NexT</title>
  
  
  <link href="https://cattyhouse-guiny.xyz/next/atom.xml" rel="self"/>
  
  <link href="https://cattyhouse-guiny.xyz/next/"/>
  <updated>2024-03-19T06:15:38.623Z</updated>
  <id>https://cattyhouse-guiny.xyz/next/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>排序算法之选泡插</title>
    <link href="https://cattyhouse-guiny.xyz/next/:/next/"/>
    <id>https://cattyhouse-guiny.xyz/next/:/next/</id>
    <published>2024-03-02T12:40:59.000Z</published>
    <updated>2024-03-19T06:15:38.623Z</updated>
    
    <content type="html"><![CDATA[<details class="note info"><summary><p>simple</p></summary><p>通俗易懂了解算法方面我强烈推荐油管主 Michael Sambol 的“x分钟了解xx算法”系列视频！非常直观</p></details><p>在不同领域，排序算法的实现各有千秋。总体来看，排序算法大致可分为十类：</p><ul><li><mark class="label 选泡插 red"></mark>：选择排序/Selection Sort、冒泡排序/Bubble Sort、插入排序/Insertion Sort</li><li><mark class="label 快归希堆 green"></mark>：快速排序/Quick Sort、归并排序/Merge Sort、希尔排序/Shell Sort、堆排序/Heap Sort</li><li><mark class="label 桶计基 blue"></mark>：桶排序/Bucket sort、计数排序/Counting Sort、基数排序/Radix Sort</li></ul><p>在排序算法中，按照其特性，还有以下两种分类方式：</p><ul><li><p><strong>稳定stable&#x2F;不稳定unstable</strong><br>A stable sorting algorithm is any sorting algorithm that preserves the relative ordering of items with equal values. </p><blockquote><p>一个稳定的排序算法是<strong>保持具有相等值的项</strong>的<strong>相对顺序</strong>的任何排序算法。通俗的说就是：假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，r[i] &#x3D; r[j]，且 r[i] 在 r[j] 之前，而在排序后的序列中，r[i] 仍在 r[j] 之前，则称这种排序算法是稳定的；否则称为不稳定的。</p></blockquote></li><li><p><strong>就地in-place&#x2F;不就地out-place</strong><br>An in-place algorithm is an algorithm which transforms input using no auxiliary data structure. </p><blockquote><p>就地算法是一种<strong>不使用辅助数据结构</strong>对输入进行转换的算法。</p></blockquote></li></ul><p>按照被排序的数据元素的存储位置，还分为以下两种：</p><ul><li><strong>内排序</strong><br>内排序是被排序的数据元素全部<strong>存放在计算机内存中</strong>的排序算法，也称为内部排序。</li><li><strong>外排序</strong><br>若待排序记录的数量庞大，在排序的过程中需要使用到<strong>外部存储介质</strong>如磁盘等，这种涉及内外存储器数据交换的排序过程称为外排序，又称为外部排序。如：归并排序、拓扑排序。</li></ul><h1 id="时间复杂度为O-n-2-的排序算法"><a href="#时间复杂度为O-n-2-的排序算法" class="headerlink" title="时间复杂度为O(n^2)的排序算法"></a>时间复杂度为O(n^2)的排序算法</h1><h2 id="冒泡排序-bubble-sort"><a href="#冒泡排序-bubble-sort" class="headerlink" title="冒泡排序&#x2F;bubble sort"></a>冒泡排序&#x2F;bubble sort</h2><ul><li>Stable&#x2F;In-place</li><li>最优时间复杂度：O(n)，即已经排序好的情况下</li><li>最差时间复杂度：O(n^2)，即完全没排序的情况，或原始算法</li><li>空间复杂度：O(1)<img src="https://img11.360buyimg.com/ddimg/jfs/t1/158015/1/42815/50715/65e2d284Fdf45dfbe/89a05babfa393505.jpg" width=500 title="图解冒泡排序" /></li></ul><video src="CS210-1.mp4" preload="metadata" controlslist="nodownload" controls playsinline poster=""></video><br/><div class="tabs" id="冒泡排序的写法"><ul class="nav-tabs"><li class="tab active"><a href="#冒泡排序的写法-1">一般来说的写法</a></li><li class="tab"><a href="#冒泡排序的写法-2">经过优化的写法(交换确认)</a></li><li class="tab"><a href="#冒泡排序的写法-3">更进一步优化的写法</a></li></ul><div class="tab-content"><div class="tab-pane active" id="冒泡排序的写法-1"><p>根据上面的视频，我们不难写出：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] bubbleSort(<span class="type">int</span>[] arr)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)&#123;      <span class="comment">// 每次比较的上限</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - i; j++)&#123;  <span class="comment">// 范围内进行两两比较</span></span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="comment">// 如果比后面的元素大，则交换.这里的交换是伪代码</span></span><br><span class="line">                swap(arr[j], arr[j + <span class="number">1</span>])；</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改写一下for循环，使其统一为++的形式，则有：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// 如果左边的数大于右边的数，则交换，保证右边的数字最大</span></span><br><span class="line">                swap(arr, j, j + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="冒泡排序的写法-2"><p>使用一个变量<strong>swaped</strong>记录当前轮次的比较是否发生过交换，如果没有发生交换表示已经有序，不再继续排序。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> swaped;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        swaped = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// 如果左边的数大于右边的数，则交换，保证右边的数字最大</span></span><br><span class="line">                swaped = <span class="literal">true</span>;</span><br><span class="line">                swap(arr, j, j + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果这一轮遍历都没有发生过交换，直接退出循环</span></span><br><span class="line">        <span class="keyword">if</span> (!swapped) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="冒泡排序的写法-3"><p>在前一种排序方法的基础上，我们还可以更进一步优化算法，即在下一轮比较时，只需比较到上一轮比较中，<strong>最后一次发生交换的位置</strong>即可。因为后面的所有元素都没有发生过交换，必然已经有序了。<br>当一轮比较中从头到尾都没有发生过交换，则表示整个列表已经有序，排序完成。<br>因此我们需要引入两个变量：<strong>swaped</strong> 和 <strong>lastSwapIndex</strong>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">swaped</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 最后一个没有经过排序的元素的下标</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">indexOfLastUnsortedElement</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 上次发生交换的位置</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">swappedIndex</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (swapped) &#123;</span><br><span class="line">        swapped = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; indexOfLastUnsortedElement; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// 如果左边的数大于右边的数，则交换，保证右边的数字最大</span></span><br><span class="line">                swap(arr, i, i + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 表示发生了交换</span></span><br><span class="line">                swapped = <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">// 更新交换的位置</span></span><br><span class="line">                swappedIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后一个没有经过排序的元素的下标就是最后一次发生交换的位置</span></span><br><span class="line">        indexOfLastUnsortedElement = swappedIndex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><h3 id="更高效的交换算法"><a href="#更高效的交换算法" class="headerlink" title="更高效的交换算法"></a>更高效的交换算法</h3><div class="tabs" id="冒泡排序的写法"><ul class="nav-tabs"><li class="tab active"><a href="#冒泡排序的写法-1">初学者写法</a></li><li class="tab"><a href="#冒泡排序的写法-2">位运算魔法</a></li><li class="tab"><a href="#冒泡排序的写法-3">数学方法</a></li></ul><div class="tab-content"><div class="tab-pane active" id="冒泡排序的写法-1"><p>在前面的代码中，我并没有写出交换方法 <strong>swap</strong> 的具体实现。作为初学者，很容易写出以下方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[a];</span><br><span class="line">    arr[a] = arr[b];</span><br><span class="line">    arr[b] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="冒泡排序的写法-2"><p>创建新变量temp无疑增大了空间复杂度，有没有不引入新变量又安全的方法呢？隆重推出：<strong>位运算魔法</strong>！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">    arr[a] = arr[a] ^ arr[b];</span><br><span class="line">    arr[b] = arr[b] ^ arr[a];</span><br><span class="line">    arr[a] = arr[a] ^ arr[b];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个相同的值相与的时候，返回1；此时与任何元素相与都会得到元素本身。这种写法不会出现越界问题，较于数学方法更安全。</p></div><div class="tab-pane" id="冒泡排序的写法-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">    arr[a] = arr[a] + arr[b];</span><br><span class="line">    arr[b] = arr[a] - arr[b];</span><br><span class="line">    arr[a] = arr[a] - arr[b];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><h2 id="选择排序-selection-sort"><a href="#选择排序-selection-sort" class="headerlink" title="选择排序&#x2F;selection sort"></a>选择排序&#x2F;selection sort</h2><p>在未排序部分找到最小的数，放到未排序的首位</p><ul><li>Unsatble&#x2F;In-place</li><li>时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li></ul><img src="https://img14.360buyimg.com/ddimg/jfs/t1/230674/34/14634/49156/65e2d43aF55757290/ecad4d4afdca897f.jpg" width=500 title="图解选择排序" /><video src="CS210-2.mp4" preload="metadata" controlslist="nodownload" controls playsinline poster=""></video><br><p>选择排序中，最小值和首位交换的过程可能会破坏稳定性。比如数列：[2, 2, 1]，在选择排序中第一次进行交换时，原数列中的两个 2 的相对顺序就被改变了，因此，我们说选择排序是不稳定的。<br>算法稳定性的意义在于：当要排序的内容是一个对象的多个属性，且其原本的<strong>顺序存在意义</strong>时，如果我们需要在二次排序后<strong>保持原有排序的意义</strong>，就需要使用到稳定性的算法。</p><blockquote><p><strong>选择排序算法如何实现稳定排序呢？</strong><br>实现的方式有很多种，这里给出一种最简单的思路：新开一个数组，将每轮找出的最小值依次添加到新数组中，选择排序算法就变成稳定的了。<br>但如果将寻找最小值的比较条件由arr[minIndex] &gt; arr[j]修改为arr[minIndex] &gt;&#x3D; arr[j]，即使新开一个数组，选择排序算法依旧是不稳定的。所以分析算法的稳定性时，需要结合具体的实现逻辑才能得出结论，我们通常所说的算法稳定性是基于一般实现而言的。</p></blockquote><div class="tabs" id="选择排序的写法"><ul class="nav-tabs"><li class="tab active"><a href="#选择排序的写法-1">一般来说的写法</a></li><li class="tab"><a href="#选择排序的写法-2">经过优化的写法(二元选择)</a></li></ul><div class="tab-content"><div class="tab-pane active" id="选择排序的写法-1"><p>这种写法也被称作“简单选择排序”。关键字比较的次数与记录的初始排列无关。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectionSort</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">    <span class="type">int</span> min;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="number">0</span>; outer &lt; array.length; outer++) &#123;<span class="comment">//未排序的部分</span></span><br><span class="line">        min = outer;<span class="comment">//要检查的槽位 </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> outer + <span class="number">1</span>; i &lt; array.length; i++) &#123;<span class="comment">//内循环，遍历未排序的部分</span></span><br><span class="line">            <span class="keyword">if</span> (array[i] &lt; array[min]) &#123; </span><br><span class="line">                min = i; <span class="comment">//找到最小值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// 将最小元素交换至首位</span></span><br><span class="line">        swap(outer, min);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="选择排序的写法-2"><p>选择排序算法也是可以优化的，既然每轮遍历时找出了<strong>最小值</strong>，何不把<strong>最大值</strong>也顺便找出来呢？这就是二元选择排序的思想。<br>使用二元选择排序，每轮选择时记录最小值和最大值，可以把数组需要遍历的范围<strong>缩小一倍</strong>。其思想是减少一半的外圈遍历，在内圈遍历时同时交换首位&#x2F;最小值与末位&#x2F;最大值，然后缩短遍历范围。当minIndex与maxIndex相碰的时候，说明遍历完成，可以跳出循环。<br>虽然如此，由于存在两个for循环，这种思想下的选择排序的时间复杂度依然是**O(n^2)**。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectionSort2</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> minIndex, maxIndex;</span><br><span class="line">    <span class="comment">// i 只需要遍历一半</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        minIndex = i;</span><br><span class="line">        maxIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; arr.length - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[minIndex] &gt; arr[j]) &#123;</span><br><span class="line">                <span class="comment">// 记录最小值的下标</span></span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (arr[maxIndex] &lt; arr[j]) &#123;</span><br><span class="line">                <span class="comment">// 记录最大值的下标</span></span><br><span class="line">                maxIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果 minIndex 和 maxIndex 都相等，那么他们必定都等于 i，且后面的所有数字都与 arr[i] 相等，此时已经排序完成</span></span><br><span class="line">        <span class="keyword">if</span> (minIndex == maxIndex) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将最小元素交换至首位</span></span><br><span class="line">        swap(i, minIndex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果最大值的下标刚好是 i，由于 arr[i] 和 arr[minIndex] 已经交换了，所以这里要更新 maxIndex 的值。</span></span><br><span class="line">        <span class="keyword">if</span> (maxIndex == i) maxIndex = minIndex;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将最大元素交换至末尾</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lastIndex</span> <span class="operator">=</span> arr.length - <span class="number">1</span> - i;</span><br><span class="line">        swap(lastIndex, maxIndex);                                                 </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><h2 id="插入排序-insertion-sort"><a href="#插入排序-insertion-sort" class="headerlink" title="插入排序&#x2F;insertion sort"></a>插入排序&#x2F;insertion sort</h2><p>遍历数组，插入合适的位置</p><ul><li>Statble&#x2F;In-place</li><li>时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li></ul><img src="https://img14.360buyimg.com/ddimg/jfs/t1/182518/29/36021/31240/65e2d459F2dc463b5/57b367697ae574f0.jpg" width=500 title="图解插入排序" /><p>插入排序有两种写法（<strong>交换法</strong>&#x2F;<strong>移动法</strong>），以下是移动法的示意视频：</p><video src="CS210-3.mp4" preload="metadata" controlslist="nodownload" controls playsinline poster=""></video><br/><div class="tabs" id="插入排序的写法"><ul class="nav-tabs"><li class="tab active"><a href="#插入排序的写法-1">交换法</a></li><li class="tab"><a href="#插入排序的写法-2">移动法</a></li></ul><div class="tab-content"><div class="tab-pane active" id="插入排序的写法-1"><p>在新数字插入过程中，不断与前面的数字交换，直到找到自己合适的位置。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertionSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt; arr[j]) &#123;</span><br><span class="line">                swap(arr, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>上面for嵌套for的写法，也可以改成for嵌套while（好处是可以提前跳出while，不用走完一遍循环）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">1</span> &amp;&amp; arr[j] &lt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">            swap(arr, j, j - <span class="number">1</span>);</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="插入排序的写法-2"><p>在新数字插入过程中，与前面的数字不断比较，前面的数字不断向后挪出位置，当新数字找到自己的位置后，插入一次即可。<br>这好比打牌的时候，我们摸到了一张新的牌，要把它插入现有手牌的合适位置中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSortMove</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> array[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; temp &lt; array[j])&#123;   <span class="comment">// 越界检测在前，因为这里j是-1的话实际上array[j]会返回报错</span></span><br><span class="line">            array[j + <span class="number">1</span>] = array[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        array[j + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><table><thead><tr><th align="center">复习周期</th><th align="center">1d</th><th align="center">2d</th><th align="center">7d</th><th align="center">21d</th></tr></thead><tbody><tr><td align="center">&#x2F;</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;details class=&quot;note info&quot;&gt;&lt;summary&gt;&lt;p&gt;simple&lt;/p&gt;
&lt;/summary&gt;
&lt;p&gt;通俗易懂了解算法方面我强烈推荐油管主 Michael Sambol 的“x分钟了解xx算法”系列视频！非常直观&lt;/p&gt;

&lt;/details&gt;

&lt;p&gt;</summary>
      
    
    
    
    <category term="算法与数据结构" scheme="https://cattyhouse-guiny.xyz/next/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="计算机科学技术" scheme="https://cattyhouse-guiny.xyz/next/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF/"/>
    
    <category term="面试相关" scheme="https://cattyhouse-guiny.xyz/next/tags/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/"/>
    
    <category term="算法与数据结构" scheme="https://cattyhouse-guiny.xyz/next/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://cattyhouse-guiny.xyz/next/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
